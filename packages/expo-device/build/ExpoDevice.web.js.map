{"version":3,"file":"ExpoDevice.web.js","sourceRoot":"","sources":["../src/ExpoDevice.web.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,cAAc,CAAC;AAEpC,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAE5C,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AACxD,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;AAElC,eAAe;IACb,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,KAAK;QACP,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,YAAY;QACd,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC;IACtC,CAAC;IACD,IAAI,SAAS;QACX,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC;IACrC,CAAC;IACD,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,WAAW;QACb,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,yBAAyB;QAC3B,OAAO,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACpE,CAAC;IACD,IAAI,MAAM;QACR,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC;IACxB,CAAC;IACD,IAAI,SAAS;QACX,OAAO,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC;IAC3B,CAAC;IACD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC;IACd,CAAC;IACD,KAAK,CAAC,kBAAkB;QACtB,QAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YAC1B,KAAK,QAAQ;gBACX,OAAO,UAAU,CAAC,KAAK,CAAC;YAC1B,KAAK,QAAQ;gBACX,OAAO,UAAU,CAAC,MAAM,CAAC;YAC3B,KAAK,SAAS;gBACZ,OAAO,UAAU,CAAC,EAAE,CAAC;YACvB,KAAK,SAAS,CAAC;YACf,KAAK,UAAU,CAAC;YAChB,KAAK,UAAU;gBACb,OAAO,UAAU,CAAC,OAAO,CAAC;YAC5B;gBACE,OAAO,UAAU,CAAC,OAAO,CAAC;SAC7B;IACH,CAAC;IACD,KAAK,CAAC,yBAAyB;QAC7B,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC","sourcesContent":["import UAParser from 'ua-parser-js';\n\nimport { DeviceType } from './Device.types';\n\nconst parser = new UAParser(window.navigator.userAgent);\nconst result = parser.getResult();\n\nexport default {\n  get isDevice(): boolean {\n    return true;\n  },\n  get brand(): null {\n    return null;\n  },\n  get manufacturer(): null {\n    return result.device.vendor || null;\n  },\n  get modelName(): string | null {\n    return result.device.model || null;\n  },\n  get deviceYearClass(): null {\n    return null;\n  },\n  get totalMemory(): null {\n    return null;\n  },\n  get supportedCpuArchitectures(): string[] | null {\n    return result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName(): string {\n    return result.os.name;\n  },\n  get osVersion(): string {\n    return result.os.version;\n  },\n  get osBuildId(): null {\n    return null;\n  },\n  get osInternalBuildId(): null {\n    return null;\n  },\n  get deviceName(): null {\n    return null;\n  },\n  async getDeviceTypeAsync(): Promise<DeviceType> {\n    switch (result.device.type) {\n      case 'mobile':\n        return DeviceType.PHONE;\n      case 'tablet':\n        return DeviceType.TABLET;\n      case 'smarttv':\n        return DeviceType.TV;\n      case 'console':\n      case 'embedded':\n      case 'wearable':\n        return DeviceType.UNKNOWN;\n      default:\n        return DeviceType.DESKTOP;\n    }\n  },\n  async isRootedExperimentalAsync(): Promise<boolean> {\n    return false;\n  },\n};\n"]}