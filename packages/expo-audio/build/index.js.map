{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AAChC,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAC7D,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAU5C,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACjE,OAAO,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AAEtD,MAAM,UAAU,cAAc,CAC5B,SAA+C,IAAI;IAEnD,MAAM,YAAY,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAC3C,MAAM,MAAM,GAAG,wBAAwB,CAAC,GAAG,EAAE;QAC3C,OAAO,IAAI,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAEnC,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,wBAAwB,EAAE;QACxD,EAAE,EAAE,MAAM,CAAC,EAAE;QACb,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,MAAM,EAAE,SAAS;QACjB,iBAAiB,EAAE,SAAS;QAC5B,sBAAsB,EAAE,SAAS;QACjC,IAAI,EAAE,MAAM,CAAC,KAAK;QAClB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,WAAW,EAAE,MAAM,CAAC,WAAW;QAC/B,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,kBAAkB,EAAE,MAAM,CAAC,kBAAkB;KAC9C,CAAC,CAAC;IAEH,OAAO,CAAC,MAAM,EAAE,MAAM,CAAU,CAAC;AACnC,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,OAAyB,EACzB,cAAkD;IAElD,MAAM,eAAe,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACxD,MAAM,QAAQ,GAAG,wBAAwB,CAAC,GAAG,EAAE;QAC7C,OAAO,IAAI,WAAW,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;IACxD,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAEtC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAgB,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;IAExE,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,YAAY,GAAG,QAAQ,CAAC,WAAW,CAAC,yBAAyB,EAAE,CAAC,MAAM,EAAE,EAAE;YAC9E,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAElB,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;YAChC,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;YACpC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAElB,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC3B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,MAAe;IACzD,OAAO,MAAM,WAAW,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,IAAe;IACrD,OAAO,MAAM,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AACnD,CAAC;AAED,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC;AACnD,cAAc,eAAe,CAAC","sourcesContent":["import { useEvent } from 'expo';\nimport { useReleasingSharedObject } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\n\nimport {\n  AudioMode,\n  AudioSource,\n  AudioStatus,\n  RecorderState,\n  RecordingOptions,\n  RecordingStatus,\n} from './Audio.types';\nimport AudioModule from './AudioModule';\nimport { AudioPlayer, AudioRecorder } from './AudioModule.types';\nimport { createRecordingOptions } from './utils/options';\nimport { resolveSource } from './utils/resolveSource';\n\nexport function useAudioPlayer(\n  source: AudioSource | string | number | null = null\n): [AudioPlayer, AudioStatus] {\n  const parsedSource = resolveSource(source);\n  const player = useReleasingSharedObject(() => {\n    return new AudioModule.AudioPlayer(parsedSource);\n  }, [JSON.stringify(parsedSource)]);\n\n  const status = useEvent(player, 'onPlaybackStatusUpdate', {\n    id: player.id,\n    currentTime: player.currentTime,\n    status: 'unknown',\n    timeControlStatus: 'unknown',\n    reasonForWaitingToPlay: 'unknown',\n    mute: player.muted,\n    duration: player.duration,\n    playing: player.playing,\n    loop: player.loop,\n    isBuffering: player.isBuffering,\n    isLoaded: player.isLoaded,\n    playbackRate: player.playbackRate,\n    shouldCorrectPitch: player.shouldCorrectPitch,\n  });\n\n  return [player, status] as const;\n}\n\nexport function useAudioRecorder(\n  options: RecordingOptions,\n  statusListener?: (status: RecordingStatus) => void\n): [AudioRecorder, RecorderState] {\n  const platformOptions = createRecordingOptions(options);\n  const recorder = useReleasingSharedObject(() => {\n    return new AudioModule.AudioRecorder(platformOptions);\n  }, [JSON.stringify(platformOptions)]);\n\n  const [state, setState] = useState<RecorderState>(recorder.getStatus());\n\n  useEffect(() => {\n    const subscription = recorder.addListener('onRecordingStatusUpdate', (status) => {\n      statusListener?.(status);\n    });\n    return () => subscription.remove();\n  }, [recorder.id]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const status = recorder.getStatus();\n      setState(status);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [recorder.id]);\n\n  return [recorder, state];\n}\n\nexport async function setIsAudioActiveAsync(active: boolean): Promise<void> {\n  return await AudioModule.setIsAudioActiveAsync(active);\n}\n\nexport async function setAudioModeAsync(mode: AudioMode): Promise<void> {\n  return await AudioModule.setAudioModeAsync(mode);\n}\n\nexport { AudioModule, AudioPlayer, AudioRecorder };\nexport * from './Audio.types';\n"]}