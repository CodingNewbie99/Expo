{"version":3,"file":"Haptics.js","sourceRoot":"","sources":["../src/Haptics.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAuBxD,MAAM,WAAW,GAAG,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,WAAW,CAAC;AAEpG,cAAc;AACd;;;GAGG;AACH,MAAM,CAAN,IAAY,wBAaX;AAbD,WAAY,wBAAwB;IAClC;;OAEG;IACH,+CAAmB,CAAA;IACnB;;OAEG;IACH,+CAAmB,CAAA;IACnB;;OAEG;IACH,2CAAe,CAAA;AACjB,CAAC,EAbW,wBAAwB,KAAxB,wBAAwB,QAanC;AAED,cAAc;AACd;;;GAGG;AACH,MAAM,CAAN,IAAY,mBAaX;AAbD,WAAY,mBAAmB;IAC7B;;OAEG;IACH,sCAAe,CAAA;IACf;;OAEG;IACH,wCAAiB,CAAA;IACjB;;OAEG;IACH,sCAAe,CAAA;AACjB,CAAC,EAbW,mBAAmB,KAAnB,mBAAmB,QAa9B;AAED,cAAc;AACd;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,OAAiC,wBAAwB,CAAC,OAAO;IAEjE,IAAI,CAAC,WAAW,EAAE,iBAAiB,EAAE,CAAC;QACpC,MAAM,IAAI,mBAAmB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;IAChE,CAAC;IACD,MAAM,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC5C,CAAC;AAED,cAAc;AACd;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,QAA6B,mBAAmB,CAAC,MAAM;IAEvD,IAAI,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC;QAC9B,MAAM,IAAI,mBAAmB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IACzD,CAAC;IACD,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC;AAED,cAAc;AACd;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc;IAClC,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC;QACjC,MAAM,IAAI,mBAAmB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IAC5D,CAAC;IACD,MAAM,WAAW,CAAC,cAAc,EAAE,CAAC;AACrC,CAAC","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\ndeclare global {\n  namespace AppleRuntime {\n    interface ExpoHaptics {\n      notificationAsync(type: NotificationFeedbackType): Promise<void>;\n      impactAsync(style: ImpactFeedbackStyle): Promise<void>;\n      selectionAsync(): Promise<void>;\n    }\n  }\n  namespace AndroidRuntime {\n    interface ExpoHaptics {\n      notificationAsync(type: string): Promise<void>;\n      impactAsync(style: string): Promise<void>;\n      selectionAsync(): Promise<void>;\n    }\n  }\n\n  interface ExpoNativeModules {\n    ExpoHaptics?: AppleRuntime.ExpoHaptics | AndroidRuntime.ExpoHaptics;\n  }\n}\n\nconst ExpoHaptics = typeof expo === 'undefined' ? undefined : globalThis.expo?.modules?.ExpoHaptics;\n\n// @needsAudit\n/**\n * The type of notification feedback generated by a UINotificationFeedbackGenerator object.\n * [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype)\n */\nexport enum NotificationFeedbackType {\n  /**\n   * A notification feedback type indicating that a task has completed successfully.\n   */\n  Success = 'success',\n  /**\n   * A notification feedback type indicating that a task has produced a warning.\n   */\n  Warning = 'warning',\n  /**\n   * A notification feedback type indicating that a task has failed.\n   */\n  Error = 'error',\n}\n\n// @needsAudit\n/**\n * The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object\n * [`UINotificationFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle)\n */\nexport enum ImpactFeedbackStyle {\n  /**\n   * A collision between small, light user interface elements.\n   */\n  Light = 'light',\n  /**\n   * A collision between moderately sized user interface elements.\n   */\n  Medium = 'medium',\n  /**\n   * A collision between large, heavy user interface elements.\n   */\n  Heavy = 'heavy',\n}\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics?.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n// @needsAudit\n/**\n * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics?.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics?.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n"]}