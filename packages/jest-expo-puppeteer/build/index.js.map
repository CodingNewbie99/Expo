{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { readConfigJson } from '@expo/config';\n\nimport { boolish } from 'getenv';\nimport path from 'path';\nimport fs from 'fs';\n\nfunction getPuppeteerOptions() {\n  if (boolish('CI', false)) {\n    return {\n      args: ['--ignore-certificate-errors', '--no-sandbox', '--disable-setuid-sandbox'],\n      ignoreHTTPSErrors: true,\n      headless: true,\n    };\n  }\n  return {\n    args: ['--ignore-certificate-errors'],\n    ignoreHTTPSErrors: true,\n    headless: true,\n  };\n}\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\nfunction ofCommands(commands) {\n  return commands.filter(Boolean).join(' && ');\n}\n\nmodule.exports = {\n  withExpoPuppeteer(config: any = {}): { [key: string]: any } {\n    const { mode = process.env.EXPO_WEB_E2E_ENV, preventRebuild, server = {}, launch = {}, projectRoot, ...partConfig } = config;\n    const projectPath = path.resolve(projectRoot || process.cwd());\n\n    const { web = {} } = readConfigJson(projectPath);\n\n    const hasServerSideRendering = web.use === 'nextjs';\n    const defaultPort = hasServerSideRendering ? 8000 : 5000;\n    const serverPort = !server.port ? defaultPort : server.port;\n    let defaultURL;\n    let command;\n\n    // Tell Expo CLI to use the same port on which the test runner expects there to be a server\n    process.env.WEB_PORT = serverPort;\n  \n    if (mode === 'production') {\n      defaultURL = `http://localhost:${serverPort}`;\n\n      const outputBuildPath = (web.build || {}).output || 'web-build';\n\n      const buildFolder = path.resolve(projectPath, outputBuildPath);\n      const serveCommand = `serve ${buildFolder}`;\n      const commands = [serveCommand];\n      const hasBuild = fs.existsSync(buildFolder);\n    \n      if (!preventRebuild || !hasBuild) {\n        const buildCommand = `node ${require.resolve('./build-expo.js')} ${projectPath}`;\n        commands.unshift(buildCommand);\n      }\n      command = ofCommands(commands);\n    } else {\n      command = `expo start ${projectPath} --web-only --non-interactive --https`;\n      defaultURL = `https://localhost:${serverPort}`;\n    }\n\n    const hasModules = fs.existsSync(path.resolve(projectPath, 'node_modules'));\n    let launchTimeout = isNaN(server.launchTimeout) ? 30000 : server.launchTimeout;\n    if (!hasModules) {\n      launchTimeout += 30000;\n      command = ofCommands([`cd ${projectPath} && yarn && cd ${process.cwd()}`, command]);\n    }\n\n    const url = isUndefined(config.url) ? defaultURL : config.url;\n\n    \n\n    return {\n      hasServerSideRendering,\n      ...partConfig,\n      url,\n      launch: {\n        ...getPuppeteerOptions(),\n        ...launch,\n      },\n      server: {\n        launchTimeout,\n        debug: true,\n        ...server,\n        command,\n        port: serverPort,\n      },\n    };\n  },\n};\n"]}