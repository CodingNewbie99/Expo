{"version":3,"file":"NavigationBar.js","sourceRoot":"","sources":["../src/NavigationBar.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport React, { useState } from 'react';\nimport { ColorValue, processColor } from 'react-native';\n\nimport ExpoNavigationBar from './ExpoNavigationBar';\nimport { Appearance, Behavior, Position, Visibility, VisibilityEvent } from './NavigationBar.types';\n\nconst emitter = new EventEmitter(ExpoNavigationBar);\n\n/**\n * Observe changes to the system navigation bar.\n * Due to platform constraints, this callback will also be triggered when the status bar visibility changes.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.addVisibilityListener(({ visibility }) => {\n *   // ...\n * });\n * ```\n */\nexport function addVisibilityListener(listener: (event: VisibilityEvent) => void): Subscription {\n  return emitter.addListener('ExpoNavigationBar.didChange', listener);\n}\n\nconst assertIsOnPlatform = (functionName: string, onlyAvailableOn: typeof Platform['OS'][]) => {\n  if (!onlyAvailableOn.includes(Platform.OS)) {\n    throw new UnavailabilityError('ExpoNavigationBar', functionName);\n  }\n};\n\n/**\n * Changes the navigation bar's background color.\n *\n * @platform android\n *\n * @param color any valid CSS color\n *\n * @example\n * ```typescript\n * NavigationBar.setBackgroundColorAsync(\"white\");\n * ```\n */\nexport async function setBackgroundColorAsync(color: ColorValue): Promise<void> {\n  assertIsOnPlatform('setBackgroundColorAsync', ['android']);\n  const colorNumber = processColor(color);\n  console.log('COOR:', colorNumber);\n  return await ExpoNavigationBar.setBackgroundColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's background color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const color = await NavigationBar.getBackgroundColorAsync();\n * ```\n */\nexport async function getBackgroundColorAsync(): Promise<ColorValue> {\n  assertIsOnPlatform('getBackgroundColorAsync', ['android']);\n  return await ExpoNavigationBar.getBackgroundColorAsync();\n}\n\n/**\n * Changes the navigation bar's border color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.setBorderColorAsync(\"red\");\n * ```\n */\nexport async function setBorderColorAsync(color: ColorValue): Promise<void> {\n  if (ExpoNavigationBar.setBorderColorAsync) {\n    const colorNumber = processColor(color);\n    await ExpoNavigationBar.setBorderColorAsync(colorNumber);\n  }\n}\n\n/**\n * Gets the navigation bar's border color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const color = await NavigationBar.getBorderColorAsync();\n * ```\n */\nexport function getBorderColorAsync(): Promise<ColorValue | null> {\n  assertIsOnPlatform('getBorderColorAsync', ['android']);\n  return ExpoNavigationBar.getBorderColorAsync();\n}\n\n/**\n * Set the navigation bar's visibility.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.setVisibilityAsync(\"hidden\");\n * ```\n */\nexport async function setVisibilityAsync(visibility: Visibility): Promise<void> {\n  if (ExpoNavigationBar.setVisibilityAsync) {\n    await ExpoNavigationBar.setVisibilityAsync(visibility);\n  }\n}\n\n/**\n * Get the navigation bar's visibility.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.setVisibilityAsync(\"hidden\");\n * ```\n */\nexport async function getVisibilityAsync(): Promise<Visibility> {\n  assertIsOnPlatform('getVisibilityAsync', ['android']);\n  return ExpoNavigationBar.getVisibilityAsync();\n}\n\n/**\n * Changes the navigation bar's foreground style between white and a dark gray color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.setAppearanceAsync(\"light\");\n * ```\n */\nexport async function setAppearanceAsync(style: Appearance): Promise<void> {\n  if (ExpoNavigationBar.setAppearanceAsync) {\n    await ExpoNavigationBar.setAppearanceAsync(style);\n  }\n}\n\n/**\n * Gets the navigation bar's foreground style.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const appearance = await NavigationBar.getAppearanceAsync();\n * ```\n */\nexport async function getAppearanceAsync(): Promise<Appearance> {\n  assertIsOnPlatform('getAppearanceAsync', ['android']);\n  return await ExpoNavigationBar.getAppearanceAsync();\n}\n\n/**\n * Sets positioning method used for the navigation bar (and status bar).\n * Setting position `absolute` will float the navigation bar above the content,\n * whereas position `relative` will shrink the screen to inline the navigation bar.\n *\n * When drawing behind the status and navigation bars, ensure the safe area insets are adjusted accordingly.\n *\n * @platform android\n *\n * @example\n * ```ts\n * // enables edge-to-edge mode\n * await NavigationBar.setPositionAsync('absolute')\n * // transparent backgrounds to see through\n * await NavigationBar.setBackgroundColorAsync('#ffffff00')\n * ```\n */\nexport async function setPositionAsync(position: Position): Promise<void> {\n  if (ExpoNavigationBar.setPositionAsync) {\n    await ExpoNavigationBar.setPositionAsync(position);\n  }\n}\n\n/**\n * Whether the navigation and status bars float above the app (absolute) or sit inline with it (relative).\n * This value can be incorrect if `androidNavigationBar.visible` is used instead of the config plugin `position` property.\n *\n * @platform android\n */\nexport async function getPositionAsync(): Promise<Position> {\n  assertIsOnPlatform('getPositionAsync', ['android']);\n  return await ExpoNavigationBar.getPositionAsync();\n}\n\n/**\n * Sets the behavior of the status bar and navigation bar when they are hidden and the user wants to reveal them.\n *\n * For example, if the navigation bar is hidden (`setVisibilityAsync(false)`) and the behavior\n * is `'overlay-swipe'`, the user can swipe from the bottom of the screen to temporarily reveal the navigation bar.\n *\n * * `'overlay-swipe'`: Temporarily reveals the System UI after a swipe gesture (bottom or top) without insetting your App's content.\n * * `'inset-swipe'`: Reveals the System UI after a swipe gesture (bottom or top) and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n * * `'inset-touch'`: Reveals the System UI after a touch anywhere on the screen and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n *\n * @platform android\n */\nexport async function setBehaviorAsync(behavior: Behavior): Promise<void> {\n  assertIsOnPlatform('setBehaviorAsync', ['android']);\n  return await ExpoNavigationBar.setBehaviorAsync(behavior);\n}\n\n/**\n * Gets the behavior of the status and navigation bars when the user swipes or touches the screen.\n *\n * @platform android\n */\nexport async function getBehaviorAsync(): Promise<Behavior> {\n  assertIsOnPlatform('getBehaviorAsync', ['android']);\n  return await ExpoNavigationBar.getBehaviorAsync();\n}\n\n/**\n * React hook that statefully updates with the visibility of the system navigation bar.\n *\n * @returns visibility of the navigation bar, `null` during async initialization.\n */\nexport function useVisibility(): Visibility | null {\n  const [visibility, setVisible] = useState<Visibility | null>(null);\n\n  React.useEffect(() => {\n    let isMounted = true;\n    if (Platform.OS === 'android') {\n      getVisibilityAsync().then((visibility) => {\n        if (isMounted) {\n          setVisible(visibility);\n        }\n      });\n    }\n\n    const listener = addVisibilityListener(({ visibility }) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    return () => {\n      listener.remove();\n      isMounted = false;\n    };\n  }, []);\n\n  return visibility;\n}\n\nexport * from './NavigationBar.types';\n"]}