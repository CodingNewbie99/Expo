{"version":3,"file":"warnDeprecated.js","sourceRoot":"","sources":["../src/warnDeprecated.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,cAAc,GAA+B,EAAE,CAAC;AAEtD;;GAEG;AACH,MAAM,CAAC,OAAO,UAAU,cAAc,CACpC,OAAe,EACf,UAAkB,EAClB,UAII,EAAE;IAEN,MAAM,EAAE,cAAc,EAAE,eAAe,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;IACjE,MAAM,GAAG,GAAG,GAAG,OAAO,IAAI,UAAU,IAAI,WAAW,EAAE,CAAC;IACtD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;QACxB,cAAc,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;KAC5B;IAED,IACE,CAAC,cAAc;QACf,CAAC,cAAc,CAAC,MAAM;QACtB,CAAC,eAAe;QAChB,CAAC,eAAe,CAAC,MAAM;QACvB,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,cAAc,CAAC,EAC5C;QACA,IAAI,OAAO,GAAG,KAAK,UAAU,qBAAqB,CAAC;QACnD,IAAI,eAAe,EAAE;YACnB,OAAO,GAAG,GAAG,OAAO,mBAAmB,eAAe,GAAG,CAAC;SAC3D;QACD,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,EAAE;YACrC,OAAO,GAAG,GAAG,OAAO,yBAAyB,WAAW,IAAI,CAAC;SAC9D;QACD,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;KAClD;IAED,IAAI,OAAO,GAAG,KAAK,UAAU,wBAAwB,CAAC;IACtD,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,EAAE;QACrC,OAAO,GAAG,GAAG,OAAO,kBAAkB,WAAW,IAAI,CAAC;KACvD;IACD,IAAI,eAAe,IAAI,eAAe,CAAC,MAAM,EAAE;QAC7C,OAAO,GAAG,GAAG,OAAO,oCAAoC,eAAe,GAAG,CAAC;KAC5E;IACD,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;AAChD,CAAC;AAED,SAAS,aAAa,CAAC,OAAe,EAAE,OAAe;IACrD,OAAO,GAAG,OAAO,KAAK,OAAO,EAAE,CAAC;AAClC,CAAC","sourcesContent":["import semver from 'semver';\n\nconst postedWarnings: { [key: string]: boolean } = {};\n\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function warnDeprecated(\n  library: string,\n  deprecated: string,\n  options: {\n    replacement?: string;\n    currentVersion?: string;\n    versionToRemove?: string;\n  } = {}\n) {\n  const { currentVersion, versionToRemove, replacement } = options;\n  const key = `${library}:${deprecated}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (\n    !currentVersion ||\n    !currentVersion.length ||\n    !versionToRemove ||\n    !versionToRemove.length ||\n    !semver.gte(versionToRemove, currentVersion)\n  ) {\n    let message = `\\`${deprecated}\\` has been removed`;\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n    throw new Error(appendLibrary(message, library));\n  }\n\n  let message = `\\`${deprecated}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(appendLibrary(message, library));\n}\n\nfunction appendLibrary(message: string, library: string): string {\n  return `${library}: ${message}`;\n}\n"]}