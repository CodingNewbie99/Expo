{"version":3,"file":"InstallationIdProvider.web.js","sourceRoot":"","sources":["../src/InstallationIdProvider.web.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,SAAS,CAAC;AAI7B,MAAM,mBAAmB,GAAG,oCAAoC,CAAC;AACjE,MAAM,iBAAiB,GAAG,kCAAkC,CAAC;AAE7D,uDAAuD;AACvD,IAAI,yBAAyB,GAAG,GAAG,EAAE;IACnC,MAAM,qBAAqB,GAAG,MAAM,EAAE,CAAC;IACvC,yBAAyB,GAAG,GAAG,EAAE,CAAC,qBAAqB,CAAC;AAC1D,CAAC,CAAC;AAEF,SAAS,gBAAgB;IACvB,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,CAAC;KACpE;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,IAAI,CACV,mBAAmB,EACnB,4GAA4G,EAC5G,CAAC,CACF,CAAC;QACF,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAED,eAAe;IACb,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACjC,IAAI,cAAc,CAAC;QAEnB,IAAI;YACF,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YAC3D,IAAI,CAAC,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;gBACzD,cAAc,GAAG,MAAM,EAAE,CAAC;gBAC1B,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;aAC3D;SACF;QAAC,OAAO,KAAK,EAAE;YACd,cAAc,GAAG,yBAAyB,EAAE,CAAC;SAC9C;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IACD,qBAAqB,EAAE,KAAK,IAAI,EAAE,CAAC,gBAAgB,EAAE;IACrD,oBAAoB,EAAE,KAAK,EAAE,KAAa,EAAE,YAAqB,EAAE,EAAE;QACnE,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;QACzC,IAAI,YAAY,EAAE;YAChB,aAAa,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;SAC7B;aAAM;YACL,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;SAC7B;QACD,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;IACzD,CAAC;IACD,uBAAuB;IACvB,WAAW,EAAE,GAAG,EAAE,GAAE,CAAC;IACrB,eAAe,EAAE,GAAG,EAAE,GAAE,CAAC;CACA,CAAC","sourcesContent":["import uuidv4 from 'uuid/v4';\n\nimport { InstallationIdProvider } from './InstallationIdProvider.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATIONS_KEY = 'EXPO_NOTIFICATIONS_REGISTRATIONS';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuidv4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nfunction getRegistrations() {\n  try {\n    return JSON.parse(localStorage.getItem(REGISTRATIONS_KEY) ?? '{}');\n  } catch (e) {\n    console.warn(\n      'expo-notification',\n      'Error encountered while fetching active registrations from localStorage. Falling back to empty dictionary.',\n      e\n    );\n    return {};\n  }\n}\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  getRegistrationsAsync: async () => getRegistrations(),\n  setRegistrationAsync: async (scope: string, isRegistered: boolean) => {\n    const registrations = getRegistrations();\n    if (isRegistered) {\n      registrations[scope] = true;\n    } else {\n      delete registrations[scope];\n    }\n    localStorage.setItem(REGISTRATIONS_KEY, registrations);\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as InstallationIdProvider;\n"]}