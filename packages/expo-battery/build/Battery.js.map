{"version":3,"file":"Battery.js","sourceRoot":"","sources":["../src/Battery.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgB,MAAM,kBAAkB,CAAC;AAE9D,OAAO,EAEL,YAAY,GAIb,MAAM,iBAAiB,CAAC;AACzB,OAAO,WAAW,MAAM,eAAe,CAAC;AAExC,MAAM,mBAAmB,GAAG,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC;AAE1D,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,CAAC;AAC5E,CAAC;AAED,cAAc;AACd;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB;IACxC,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE;QACrC,OAAO,CAAC,CAAC,CAAC;KACX;IACD,OAAO,MAAM,WAAW,CAAC,oBAAoB,EAAE,CAAC;AAClD,CAAC;AAED,cAAc;AACd;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB;IACxC,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE;QACrC,OAAO,YAAY,CAAC,OAAO,CAAC;KAC7B;IACD,OAAO,MAAM,WAAW,CAAC,oBAAoB,EAAE,CAAC;AAClD,CAAC;AAED,cAAc;AACd;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,KAAK,UAAU,0BAA0B;IAC9C,IAAI,CAAC,WAAW,CAAC,0BAA0B,EAAE;QAC3C,OAAO,KAAK,CAAC;KACd;IACD,OAAO,MAAM,WAAW,CAAC,0BAA0B,EAAE,CAAC;AACxD,CAAC;AAED,cAAc;AACb;;;;;;;;;GASG;AACF,MAAM,CAAC,KAAK,UAAU,iCAAiC;IACrD,IAAI,CAAC,WAAW,CAAC,iCAAiC,EAAE;QAChD,OAAO,KAAK,CAAC;KAChB;IACD,OAAO,MAAM,WAAW,CAAC,iCAAiC,EAAE,CAAC;AACjE,CAAC;AAED;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB;IACtC,MAAM,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACnE,oBAAoB,EAAE;QACtB,oBAAoB,EAAE;QACtB,0BAA0B,EAAE;KAC7B,CAAC,CAAC;IACH,OAAO;QACL,YAAY;QACZ,YAAY;QACZ,YAAY;KACb,CAAC;AACJ,CAAC;AAED,cAAc;AACd;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,uBAAuB,CACrC,QAA4C;IAE5C,OAAO,mBAAmB,CAAC,WAAW,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;AACjF,CAAC;AAED,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,UAAU,uBAAuB,CACrC,QAA4C;IAE5C,OAAO,mBAAmB,CAAC,WAAW,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;AACjF,CAAC;AAED,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,UAAU,uBAAuB,CAAC,QAAyC;IAC/E,OAAO,mBAAmB,CAAC,WAAW,CAAC,yBAAyB,EAAE,QAAQ,CAAC,CAAC;AAC9E,CAAC;AAED,OAAO,EAEL,YAAY,GAKb,CAAC","sourcesContent":["import { EventEmitter, Subscription } from '@unimodules/core';\r\n\r\nimport {\r\n  BatteryLevelEvent,\r\n  BatteryState,\r\n  BatteryStateEvent,\r\n  PowerModeEvent,\r\n  PowerState,\r\n} from './Battery.types';\r\nimport ExpoBattery from './ExpoBattery';\r\n\r\nconst BatteryEventEmitter = new EventEmitter(ExpoBattery);\r\n\r\n// @needsAudit\r\n/**\r\n * Resolves with whether the battery API is available on the current device. The value of this\r\n * property is `true` on Android and physical iOS devices and `false` on iOS simulators. On web,\r\n * it depends on whether the browser supports the web battery API.\r\n */\r\nexport async function isAvailableAsync(): Promise<boolean> {\r\n  return Promise.resolve((ExpoBattery && ExpoBattery.isSupported) || false);\r\n}\r\n\r\n// @needsAudit\r\n/**\r\n * Gets the battery level of the device as a number between `0` and `1`, inclusive. If the device\r\n * does not support retrieving the battery level, this method returns `-1`. On web, this method\r\n * always returns `-1`.\r\n * @return A `Promise` that fulfils with a number between `0` and `1` representing the battery level,\r\n * or `-1` if the device does not provide it.\r\n * # Example\r\n * ```ts\r\n * await Battery.getBatteryLevelAsync();\r\n * // 0.759999\r\n * ```\r\n */\r\nexport async function getBatteryLevelAsync(): Promise<number> {\r\n  if (!ExpoBattery.getBatteryLevelAsync) {\r\n    return -1;\r\n  }\r\n  return await ExpoBattery.getBatteryLevelAsync();\r\n}\r\n\r\n// @needsAudit\r\n/**\r\n * Tells the battery's current state. On web, this always returns `BatteryState.UNKNOWN`.\r\n * @return Returns a `Promise` which fulfills with a [`Battery.BatteryState`](#batterystate) enum\r\n * value for whether the device is any of the four states.\r\n * # Example\r\n * ```ts\r\n * await Battery.getBatteryStateAsync();\r\n * // BatteryState.CHARGING\r\n * ```\r\n */\r\nexport async function getBatteryStateAsync(): Promise<BatteryState> {\r\n  if (!ExpoBattery.getBatteryStateAsync) {\r\n    return BatteryState.UNKNOWN;\r\n  }\r\n  return await ExpoBattery.getBatteryStateAsync();\r\n}\r\n\r\n// @needsAudit\r\n/**\r\n * Gets the current status of Low Power mode on iOS and Power Saver mode on Android. If a platform\r\n * doesn't support Low Power mode reporting (like web, older Android devices), the reported low-power\r\n * state is always `false`, even if the device is actually in low-power mode.\r\n * @return Returns a `Promise` which fulfills with a `boolean` value of either `true` or `false`,\r\n * indicating whether low power mode is enabled or disabled, respectively.\r\n * # Example\r\n * Low Power Mode (iOS) or Power Saver Mode (Android) are enabled.\r\n * ```ts\r\n * await Battery.isLowPowerModeEnabledAsync();\r\n * // true\r\n * ```\r\n */\r\nexport async function isLowPowerModeEnabledAsync(): Promise<boolean> {\r\n  if (!ExpoBattery.isLowPowerModeEnabledAsync) {\r\n    return false;\r\n  }\r\n  return await ExpoBattery.isLowPowerModeEnabledAsync();\r\n}\r\n\r\n// @needsAudit\r\n /**\r\n  * Checks whether the battery optimization is on for the application.\r\n  * @return Returns a `Promise` which fulfills with a `boolean` value of either `true` or `false`,\r\n  * indicating whether the battery optimization is enabled or disabled, respectively. (Android only)\r\n  * # Example\r\n  * ```ts\r\n  * await Battery.isBatteryOptimizationEnabledAsync();\r\n  * // true\r\n  * ```\r\n  */\r\n  export async function isBatteryOptimizationEnabledAsync(): Promise<boolean> {\r\n    if (!ExpoBattery.isBatteryOptimizationEnabledAsync) {\r\n        return false;\r\n    }\r\n    return await ExpoBattery.isBatteryOptimizationEnabledAsync();\r\n}\r\n\r\n/**\r\n * Gets the power state of the device including the battery level, whether it is plugged in, and if\r\n * the system is currently operating in Low Power Mode (iOS) or Power Saver Mode (Android). This\r\n * method re-throws any errors that occur when retrieving any of the power-state information.\r\n * @return Returns a `Promise` which fulfills with [`PowerState`](#powerstate) object.\r\n * # Example\r\n * ```ts\r\n * await Battery.getPowerStateAsync();\r\n * // {\r\n * //   batteryLevel: 0.759999,\r\n * //   batteryState: BatteryState.UNPLUGGED,\r\n * //   lowPowerMode: true,\r\n * // }\r\n * ```\r\n */\r\nexport async function getPowerStateAsync(): Promise<PowerState> {\r\n  const [batteryLevel, batteryState, lowPowerMode] = await Promise.all([\r\n    getBatteryLevelAsync(),\r\n    getBatteryStateAsync(),\r\n    isLowPowerModeEnabledAsync(),\r\n  ]);\r\n  return {\r\n    batteryLevel,\r\n    batteryState,\r\n    lowPowerMode,\r\n  };\r\n}\r\n\r\n// @needsAudit\r\n/**\r\n * Subscribe to the battery level change updates.\r\n *\r\n * On iOS devices, the event fires when the battery level drops one percent or more, but is only\r\n * fired once per minute at maximum.\r\n *\r\n * On Android devices, the event fires only when significant changes happens, which is when the\r\n * battery level drops below [`\"android.intent.action.BATTERY_LOW\"`](https://developer.android.com/reference/android/content/Intent#ACTION_BATTERY_LOW)\r\n * or rises above [`\"android.intent.action.BATTERY_OKAY\"`](https://developer.android.com/reference/android/content/Intent#ACTION_BATTERY_OKAY)\r\n * from a low battery level. See [here](https://developer.android.com/training/monitoring-device-state/battery-monitoring)\r\n * to read more from the Android docs.\r\n *\r\n * On web, the event never fires.\r\n * @param listener A callback that is invoked when battery level changes. The callback is provided a\r\n * single argument that is an object with a `batteryLevel` key.\r\n * @return A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.s\r\n */\r\nexport function addBatteryLevelListener(\r\n  listener: (event: BatteryLevelEvent) => void\r\n): Subscription {\r\n  return BatteryEventEmitter.addListener('Expo.batteryLevelDidChange', listener);\r\n}\r\n\r\n// @needsAudit\r\n/**\r\n * Subscribe to the battery state change updates to receive an object with a [`Battery.BatteryState`](#batterystate)\r\n * enum value for whether the device is any of the four states.\r\n *\r\n * On web, the event never fires.\r\n * @param listener A callback that is invoked when battery state changes. The callback is provided a\r\n * single argument that is an object with a `batteryState` key.\r\n * @return A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.\r\n */\r\nexport function addBatteryStateListener(\r\n  listener: (event: BatteryStateEvent) => void\r\n): Subscription {\r\n  return BatteryEventEmitter.addListener('Expo.batteryStateDidChange', listener);\r\n}\r\n\r\n// @needsAudit\r\n/**\r\n * Subscribe to Low Power Mode (iOS) or Power Saver Mode (Android) updates. The event fires whenever\r\n * the power mode is toggled.\r\n *\r\n * On web, the event never fires.\r\n * @param listener A callback that is invoked when Low Power Mode (iOS) or Power Saver Mode (Android)\r\n * changes. The callback is provided a single argument that is an object with a `lowPowerMode` key.\r\n * @return A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.\r\n */\r\nexport function addLowPowerModeListener(listener: (event: PowerModeEvent) => void): Subscription {\r\n  return BatteryEventEmitter.addListener('Expo.powerModeDidChange', listener);\r\n}\r\n\r\nexport {\r\n  BatteryLevelEvent,\r\n  BatteryState,\r\n  BatteryStateEvent,\r\n  PowerModeEvent,\r\n  PowerState,\r\n  Subscription,\r\n};\r\n"]}