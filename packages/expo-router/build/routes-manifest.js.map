{"version":3,"file":"routes-manifest.js","sourceRoot":"","sources":["../src/routes-manifest.ts"],"names":[],"mappings":";;;AAAA,0CAA0C;AAC1C,sBAAsB;AACtB,iEAA2D;AAC3D,2CAAwC;AAexC,SAAS,uBAAuB,CAAC,MAAgB,EAAE;IACjD,MAAM,aAAa,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,KAAI,CAAC,EAAE,CAAC,CAAC;IAElD,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,EAAE;QAC3C,KAAK,EAAE,GAAG,EAAE,CAAC,GAAG;KACjB,CAAC,CAAC;IAEH,OAAO,aAA+B,CAAC;AACzC,CAAC;AAED,SAAgB,oBAAoB,CAAC,KAAe;IAClD,mCAAmC;IACnC,MAAM,SAAS,GAAG,IAAA,qBAAS,EAAC,uBAAuB,CAAC,KAAK,CAAC,EAAE;QAC1D,iBAAiB,EAAE,IAAI;QACvB,mBAAmB,EAAE,IAAI;KAC1B,CAAC,CAAC;IAEH,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IACD,OAAO,IAAA,wCAAiB,EAAC,SAAS,CAAC,CAAC;AACtC,CAAC;AAXD,oDAWC","sourcesContent":["// This file runs in Node.js environments.\n// no relative imports\nimport { getServerManifest } from './getMatchableManifest';\nimport { getRoutes } from './getRoutes';\nimport { RequireContext } from './types';\n\nexport type RouteInfo<TRegex = string> = {\n  page: string;\n  namedRegex: TRegex;\n  routeKeys: { [named: string]: string };\n};\n\nexport type ExpoRoutesManifestV1<TRegex = string> = {\n  dynamicRoutes: RouteInfo<TRegex>[];\n  staticRoutes: RouteInfo<TRegex>[];\n  notFoundRoutes: RouteInfo<TRegex>[];\n};\n\nfunction createMockContextModule(map: string[] = []) {\n  const contextModule = (key) => ({ default() {} });\n\n  Object.defineProperty(contextModule, 'keys', {\n    value: () => map,\n  });\n\n  return contextModule as RequireContext;\n}\n\nexport function createRoutesManifest(paths: string[]): ExpoRoutesManifestV1 | null {\n  // TODO: Drop this part for Node.js\n  const routeTree = getRoutes(createMockContextModule(paths), {\n    preserveApiRoutes: true,\n    ignoreRequireErrors: true,\n  });\n\n  if (!routeTree) {\n    return null;\n  }\n  return getServerManifest(routeTree);\n}\n"]}