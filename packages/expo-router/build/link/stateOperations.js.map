{"version":3,"file":"stateOperations.js","sourceRoot":"","sources":["../../src/link/stateOperations.ts"],"names":[],"mappings":";;AAyBA,uEAAuE;AACvE,SAAS,qBAAqB,CAAC,KAAkB;IAC/C,IAAI,OAAO,GAAsC,KAAK,CAAC;IACvD,IAAI,QAAQ,GAAsC,KAAK,CAAC;IAExD,OAAO,OAAO,EAAE,MAAM,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,EAAE;QACnE,QAAQ,GAAG,OAAO,CAAC;QACnB,OAAO,GAAG,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;KAC7D;IAED,+FAA+F;IAC/F,8FAA8F;IAC9F,IAAI,QAAQ,IAAI,OAAO,EAAE,MAAM,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC,IAAI,KAAK,OAAO,EAAE;QAC9E,OAAO,QAAQ,CAAC;KACjB;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import {\n  InitialState,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  getActionFromState,\n} from '@react-navigation/native';\n\nimport { ResultState } from '../fork/getStateFromPath';\n\nexport type NavigateAction = Extract<\n  ReturnType<typeof getActionFromState>,\n  { type: 'NAVIGATE' }\n> & {\n  payload: NavigateActionParams;\n};\n\nexport type NavigateActionParams = {\n  params?: NavigateActionParams;\n  path: string;\n  initial: boolean;\n  screen: string;\n  name?: string;\n};\n\n// Get the last state for a given target state (generated from a path).\nfunction findTopStateForTarget(state: ResultState) {\n  let current: Partial<InitialState> | undefined = state;\n  let previous: Partial<InitialState> | undefined = state;\n\n  while (current?.routes?.[current?.routes?.length - 1].state != null) {\n    previous = current;\n    current = current?.routes[current?.routes.length - 1].state;\n  }\n\n  // If the last route in the target state is an index route, return the previous state (parent).\n  // NOTE: This may need to be updated to support initial route name being a non-standard value.\n  if (previous && current?.routes?.[current.routes.length - 1]!.name === 'index') {\n    return previous;\n  }\n\n  return current;\n}\n"]}