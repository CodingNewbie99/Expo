{"version":3,"file":"FontHooks.js","sourceRoot":"","sources":["../src/FontHooks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE5C,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAG7C,SAAS,WAAW,CAAC,GAAwC;IAC3D,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;KACtB;SAAM;QACL,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;KACrE;AACH,CAAC;AAED,SAAS,eAAe,CACtB,GAAG,IAAgE;IAEnE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC;IAE3B,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ;IAClC,kGAAkG;IAClG,mDAAmD;IACnD,WAAW,CAAC,GAAG,CAAC,CACjB,CAAC;IACF,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAe,IAAI,CAAC,CAAC;IAEvD,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,SAAS,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBAC3B,KAAK,CAAC,QAAQ,CAAC,CAAC;SACpB;aAAM;YACL,2GAA2G;YAC3G,SAAS,CAAC,GAAG,EAAE,MAAoB,CAAC;iBACjC,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBAC3B,KAAK,CAAC,QAAQ,CAAC,CAAC;SACpB;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACzB,CAAC;AAED,SAAS,cAAc,CACrB,GAAG,IAAgE;IAEnE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC;IAE3B,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,SAAS,CAAC,GAAG,CAAC,CAAC;KAChB;SAAM;QACL,2GAA2G;QAC3G,SAAS,CAAC,GAAG,EAAE,MAAoB,CAAC,CAAC;KACtC;IAED,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACtB,CAAC;AAED,cAAc;AACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH,MAAM,CAAC,MAAM,QAAQ,GAEU,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,eAAe,CAAC","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { isLoaded, loadAsync } from './Font';\nimport { FontSource } from './Font.types';\n\nfunction isMapLoaded(map: string | Record<string, FontSource>) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every((fontFamily) => isLoaded(fontFamily));\n  }\n}\n\nfunction useRuntimeFonts<T extends string | Record<string, FontSource>>(\n  ...args: T extends string ? [map: T, source: FontSource] : [map: T]\n): [boolean, Error | null] {\n  const [map, source] = args;\n\n  const [loaded, setLoaded] = useState(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map)\n  );\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    if (typeof map === 'object') {\n      loadAsync(map)\n        .then(() => setLoaded(true))\n        .catch(setError);\n    } else {\n      // we can safely cast source because we know that the first argument is a string and the second is required\n      loadAsync(map, source as FontSource)\n        .then(() => setLoaded(true))\n        .catch(setError);\n    }\n  }, []);\n\n  return [loaded, error];\n}\n\nfunction useStaticFonts<T extends string | Record<string, FontSource>>(\n  ...args: T extends string ? [map: T, source: FontSource] : [map: T]\n): [boolean, Error | null] {\n  const [map, source] = args;\n\n  if (typeof map === 'object') {\n    loadAsync(map);\n  } else {\n    // we can safely cast source because we know that the first argument is a string and the second is required\n    loadAsync(map, source as FontSource);\n  }\n\n  return [true, null];\n}\n\n// @needsAudit\n/**\n * Load a map of fonts with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @template T The type of the first argument. If a string is provided, the second argument must be\n * a `FontSource`. If an object is provided, the second argument must be omitted.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s or a `fontFamily` as a string. After loading the font\n * you can use the key in the `fontFamily` style prop of a `Text` element. If the first argument is a string, the second\n * argument is required.\n * @param source The font asset that should be loaded into the `fontFamily` namespace. Provide this argument only if the first\n * first argument is a string.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n *\n * @example\n * Load fonts from a map of `fontFamily`s to [`FontSource`](#fontsource)s:\n * ```tsx\n * const [loaded, error] = useFonts({ ... });\n * ```\n *\n * @example\n * Load a single font by providing a `fontFamily` as a string and a [`FontSource`](#fontsource):\n * ```tsx\n * const [loaded, error] = useFonts(\"Inter_900Black\", require(\"./assets/fonts/Inter-Black.ttf\"));\n * ```\n */\nexport const useFonts: <T extends string | Record<string, FontSource>>(\n  ...args: T extends string ? [map: T, source: FontSource] : [map: T]\n) => [boolean, Error | null] = typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n"]}