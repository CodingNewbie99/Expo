{"version":3,"file":"android.js","sourceRoot":"","sources":["../src/android.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAgB,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AACrF,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAIxB,MAAM,EAAE,kCAAkC,EAAE,GAAG,aAAa,CAAC,eAAe,CAAC;AAE7E,MAAM,CAAC,MAAM,0BAA0B,GAAG,kCAAkC,CAC1E;IACE;QACE,QAAQ,EAAE,2BAA2B;QACrC,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE;KAC3E;IACD;QACE,QAAQ,EAAE,0BAA0B;QACpC,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE;KAC1E;IACD;QACE,QAAQ,EAAE,2BAA2B;QACrC,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB;KAC/D;IACD;QACE,QAAQ,EAAE,uBAAuB;QACjC,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,aAAa;KAC3D;IACD;QACE,QAAQ,EAAE,qCAAqC;QAC/C,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC;KACpF;IACD;QACE,QAAQ,EAAE,mCAAmC;QAC7C,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC;KAClF;IACD;QACE,QAAQ,EAAE,iCAAiC;QAC3C,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC;KAChF;IACD;QACE,QAAQ,EAAE,qCAAqC;QAC/C,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,EAAE,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC;KACrF;CACF,EACD,4BAA4B,CAC7B,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAmC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;IACxF,OAAO,gBAAgB,CAAC,MAAM,EAAE;QAC9B,SAAS;QACT,KAAK,EAAE,MAAM,EAAE,EAAE;YACf,MAAM,kBAAkB,GAAG,KAAK,CAAC,OAAO,EAAE,kBAAkB,CAAC;YAC7D,IAAI,CAAC,kBAAkB,EAAE;gBACvB,OAAO,MAAM,CAAC;aACf;YAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CACjC,MAAM,CAAC,UAAU,CAAC,mBAAmB,EACrC,KAAK,EACL,oBAAoB,CACrB,CAAC;YACF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;YACrE,QAAQ,IAAI,KAAK,kBAAkB,EAAE,CAAC;YACtC,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;YACzD,OAAO,MAAM,CAAC;QAChB,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { AndroidConfig, ConfigPlugin, withDangerousMod } from '@expo/config-plugins';\nimport fs from 'fs';\nimport path from 'path';\n\nimport type { PluginConfigType } from './pluginConfig';\n\nconst { createBuildGradlePropsConfigPlugin } = AndroidConfig.BuildProperties;\n\nexport const withAndroidBuildProperties = createBuildGradlePropsConfigPlugin<PluginConfigType>(\n  [\n    {\n      propName: 'android.compileSdkVersion',\n      propValueGetter: (config) => config.android?.compileSdkVersion?.toString(),\n    },\n    {\n      propName: 'android.targetSdkVersion',\n      propValueGetter: (config) => config.android?.targetSdkVersion?.toString(),\n    },\n    {\n      propName: 'android.buildToolsVersion',\n      propValueGetter: (config) => config.android?.buildToolsVersion,\n    },\n    {\n      propName: 'android.kotlinVersion',\n      propValueGetter: (config) => config.android?.kotlinVersion,\n    },\n    {\n      propName: 'android.packagingOptions.pickFirsts',\n      propValueGetter: (config) => config.android?.packagingOptions?.pickFirst?.join(','),\n    },\n    {\n      propName: 'android.packagingOptions.excludes',\n      propValueGetter: (config) => config.android?.packagingOptions?.exclude?.join(','),\n    },\n    {\n      propName: 'android.packagingOptions.merges',\n      propValueGetter: (config) => config.android?.packagingOptions?.merge?.join(','),\n    },\n    {\n      propName: 'android.packagingOptions.doNotStrip',\n      propValueGetter: (config) => config.android?.packagingOptions?.doNotStrip?.join(','),\n    },\n  ],\n  'withAndroidBuildProperties'\n);\n\n/**\n * Appends `props.android.extraProguardRules` content into `android/app/proguard-rules.pro`\n */\nexport const withAndroidProguardRules: ConfigPlugin<PluginConfigType> = (config, props) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      const extraProguardRules = props.android?.extraProguardRules;\n      if (!extraProguardRules) {\n        return config;\n      }\n\n      const proguardRulesFile = path.join(\n        config.modRequest.platformProjectRoot,\n        'app',\n        'proguard-rules.pro'\n      );\n      let contents = await fs.promises.readFile(proguardRulesFile, 'utf8');\n      contents += `\\n${extraProguardRules}`;\n      await fs.promises.writeFile(proguardRulesFile, contents);\n      return config;\n    },\n  ]);\n};\n"]}