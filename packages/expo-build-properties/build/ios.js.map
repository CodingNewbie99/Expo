{"version":3,"file":"ios.js","sourceRoot":"","sources":["../src/ios.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAgB,gBAAgB,EAAgB,MAAM,sBAAsB,CAAC;AAI/F,MAAM,EAAE,mCAAmC,EAAE,GAAG,SAAS,CAAC,eAAe,CAAC;AAE1E,MAAM,CAAC,MAAM,sBAAsB,GAAG,mCAAmC,CACvE;IACE;QACE,QAAQ,EAAE,mBAAmB;QAC7B,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,aAAa;KACvD;CACF,EACD,wBAAwB,CACzB,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAmC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;IACvF,MAAM,gBAAgB,GAAG,KAAK,CAAC,GAAG,EAAE,gBAAgB,CAAC;IACrD,IAAI,CAAC,gBAAgB,EAAE;QACrB,OAAO,MAAM,CAAC;KACf;IAED,6CAA6C;IAC7C,MAAM,GAAG,mCAAmC,CAAC,MAAM,EAAE,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAE3E,uDAAuD;IACvD,MAAM,GAAG,8BAA8B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAEvD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,mCAAmC,GAA+C,CACtF,MAAM,EACN,KAAK,EACL,EAAE;IACF,OAAO,gBAAgB,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,EAAE;QACzC,MAAM,CAAC,UAAU,GAAG,kCAAkC,CACpD,MAAM,CAAC,UAAU,EACjB,KAAK,CAAC,gBAAgB,CACvB,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,SAAS,kCAAkC,CACzC,OAAqB,EACrB,gBAAwB;IAExB,MAAM,cAAc,GAAwB,OAAO,CAAC,8BAA8B,EAAE,CAAC;IACrF,KAAK,MAAM,EAAE,aAAa,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC,EAAE;QACnE,IAAI,aAAa,EAAE,0BAA0B,EAAE;YAC7C,aAAa,CAAC,0BAA0B,GAAG,gBAAgB,CAAC;SAC7D;KACF;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,8BAA8B,GAAG,mCAAmC,CACxE;IACE;QACE,QAAQ,EAAE,sBAAsB;QAChC,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,gBAAgB;KAC1D;CACF,EACD,gCAAgC,CACjC,CAAC","sourcesContent":["import { IOSConfig, ConfigPlugin, withXcodeProject, XcodeProject } from '@expo/config-plugins';\n\nimport type { PluginConfigType } from './pluginConfig';\n\nconst { createBuildPodfilePropsConfigPlugin } = IOSConfig.BuildProperties;\n\nexport const withIosBuildProperties = createBuildPodfilePropsConfigPlugin<PluginConfigType>(\n  [\n    {\n      propName: 'ios.useFrameworks',\n      propValueGetter: (config) => config.ios?.useFrameworks,\n    },\n  ],\n  'withIosBuildProperties'\n);\n\nexport const withIosDeploymentTarget: ConfigPlugin<PluginConfigType> = (config, props) => {\n  const deploymentTarget = props.ios?.deploymentTarget;\n  if (!deploymentTarget) {\n    return config;\n  }\n\n  // Updates deployment target in app xcodeproj\n  config = withIosDeploymentTargetXcodeProject(config, { deploymentTarget });\n\n  // Updates deployement target in Podfile (Pods project)\n  config = withIosDeploymentTargetPodfile(config, props);\n\n  return config;\n};\n\nconst withIosDeploymentTargetXcodeProject: ConfigPlugin<{ deploymentTarget: string }> = (\n  config,\n  props\n) => {\n  return withXcodeProject(config, (config) => {\n    config.modResults = updateDeploymentTargetXcodeProject(\n      config.modResults,\n      props.deploymentTarget\n    );\n    return config;\n  });\n};\n\nfunction updateDeploymentTargetXcodeProject(\n  project: XcodeProject,\n  deploymentTarget: string\n): XcodeProject {\n  const configurations: Record<string, any> = project.pbxXCBuildConfigurationSection();\n  for (const { buildSettings } of Object.values(configurations ?? {})) {\n    if (buildSettings?.IPHONEOS_DEPLOYMENT_TARGET) {\n      buildSettings.IPHONEOS_DEPLOYMENT_TARGET = deploymentTarget;\n    }\n  }\n  return project;\n}\n\nconst withIosDeploymentTargetPodfile = createBuildPodfilePropsConfigPlugin<PluginConfigType>(\n  [\n    {\n      propName: 'ios.deploymentTarget',\n      propValueGetter: (config) => config.ios?.deploymentTarget,\n    },\n  ],\n  'withIosDeploymentTargetPodfile'\n);\n"]}