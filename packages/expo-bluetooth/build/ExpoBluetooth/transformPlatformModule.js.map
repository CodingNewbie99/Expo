{"version":3,"file":"transformPlatformModule.js","sourceRoot":"","sources":["../../src/ExpoBluetooth/transformPlatformModule.ts"],"names":[],"mappings":"AAAA,OAAO,sBAAsB,MAAM,kCAAkC,CAAC;AACtE,OAAO,gBAAgB,MAAM,4BAA4B,CAAC;AAE1D;;;;GAIG;AACH,MAAM,CAAC,OAAO,UAAU,8BAA8B,CAAC,cAEtD;IACC,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;QAClD,IAAI,OAAO,cAAc,CAAC,QAAQ,CAAC,KAAK,UAAU,EAAE;YAClD,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,EAAE;gBACxC,GAAG;oBACD,OAAO,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAClC,CAAC;aACF,CAAC,CAAC;SACJ;aAAM;YACL,QAAQ,CAAC,QAAQ,CAAC,GAAG,0BAA0B,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC;SACrF;KACF;IACD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACxB,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAS,0BAA0B,CACjC,MAAyC,EACzC,UAAkB;IAElB,uCAAuC;IACvC,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,KAAK,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;IACjD,OAAO,CAAC,GAAG,KAAY,EAAgB,EAAE;QACvC,IAAI;YACF,iDAAiD;YACjD,OAAO,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC;SACzB;QAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,KAAK,EAAE,EAAE;YACpC;;eAEG;YACH,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,EAAE;gBACtC,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1C,MAAM,IAAI,gBAAgB,CAAC;oBACzB,cAAc,EAAE,QAAQ,CAAC,cAAc,CAAC;oBACxC,KAAK;oBACL,aAAa,EAAE,UAAU;iBAC1B,CAAC,CAAC;aACJ;YACD,MAAM,IAAI,sBAAsB,CAAC;gBAC/B,OAAO;gBACP,IAAI;gBACJ,GAAG,KAAK;gBACR,aAAa,EAAE,UAAU;gBACzB,KAAK;aACN,CAAC,CAAC;SACJ;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import BluetoothPlatformError from '../errors/BluetoothPlatformError';\nimport AndroidGATTError from '../errors/AndroidGATTError';\n\n/**\n * Wrap the native method and transform the errors that are returned\n * \n * @param platformModule The BLE Native method\n */\nexport default function platformModuleWithCustomErrors(platformModule: {\n  [property: string]: any;\n}): { [property: string]: any } {\n  const platform = {};\n  for (const property of Object.keys(platformModule)) {\n    if (typeof platformModule[property] !== 'function') {\n      Object.defineProperty(platform, property, {\n        get() {\n          return platformModule[property];\n        },\n      });\n    } else {\n      platform[property] = methodWithTransformedError(platformModule[property], property);\n    }\n  }\n  Object.freeze(platform);\n  return platform;\n}\n\nfunction methodWithTransformedError(\n  method: (...props: any[]) => Promise<any>,\n  methodName: string\n): (...props: any[]) => Promise<any> {\n  /** Stack trace without async layers */\n  const stack = decodeURI(new Error().stack || '');\n  return (...props: any[]): Promise<any> => {\n    try {\n      // console.log(`EXBLE: invoke: ${methodName}()`);\n      return method(...props);\n    } catch ({ message, code, ...props }) {\n      /**\n       * If an error is related to the device GATT then throw a `AndroidGATTError`\n       */\n      if (code.indexOf('ERR_BLE_GATT:') > -1) {\n        const gattStatusCode = code.split(':')[1];\n        throw new AndroidGATTError({\n          gattStatusCode: parseInt(gattStatusCode),\n          stack,\n          invokedMethod: methodName,\n        });\n      }\n      throw new BluetoothPlatformError({\n        message,\n        code,\n        ...props,\n        invokedMethod: methodName,\n        stack,\n      });\n    }\n  };\n}\n"]}