{"version":3,"file":"ThemeProvider2.js","sourceRoot":"","sources":["../src/ThemeProvider2.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAK9C,MAAM,YAAY,GAAG,KAAK,CAAC,aAAa,CAAQ,OAAO,CAAC,CAAC;AACzD,MAAM,CAAC,MAAM,QAAQ,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;AAO7D,MAAM,UAAU,aAAa,CAAC,EAAE,QAAQ,EAAE,eAAe,GAAG,eAAe,EAAsB;IAC/F,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IAErC,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QAC/B,IAAI,eAAe,KAAK,eAAe,EAAE;YACvC,OAAO,eAAe,CAAC;SACxB;QAED,OAAO,WAAW,IAAI,OAAO,CAAC;IAChC,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;IAEtB,OAAO,oBAAC,YAAY,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,IAAG,QAAQ,CAAyB,CAAC;AACjF,CAAC","sourcesContent":["import * as React from 'react';\nimport { useColorScheme } from 'react-native';\n\ntype ThemePreference = 'light' | 'dark' | 'no-preference';\ntype Theme = 'light' | 'dark';\n\nconst ThemeContext = React.createContext<Theme>('light');\nexport const useTheme = () => React.useContext(ThemeContext);\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  themePreference?: ThemePreference;\n};\n\nexport function ThemeProvider({ children, themePreference = 'no-preference' }: ThemeProviderProps) {\n  const systemTheme = useColorScheme();\n\n  const theme = React.useMemo(() => {\n    if (themePreference !== 'no-preference') {\n      return themePreference;\n    }\n\n    return systemTheme ?? 'light';\n  }, [themePreference]);\n\n  return <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>;\n}\n"]}