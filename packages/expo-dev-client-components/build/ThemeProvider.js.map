{"version":3,"file":"ThemeProvider.js","sourceRoot":"","sources":["../src/ThemeProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAI/B,MAAM,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;AAO1D,MAAM,UAAU,uBAAuB,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAsB;IAC7E,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,OAAO,oBAAC,YAAY,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,IAAG,QAAQ,CAAyB,CAAC;AACjF,CAAC;AAID,SAAS,0BAA0B;IACjC,IAAI,SAAS,GAAoC,EAAE,CAAC;IAEpD,IAAI,iBAAiB,GAAoB,eAAe,CAAC;IAEzD,SAAS,iBAAiB,CAAC,QAAuC;QAChE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3B,CAAC;IAED,SAAS,oBAAoB,CAAC,QAAuC;QACnE,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,SAAS,MAAM,CAAC,aAA8B;QAC5C,iBAAiB,GAAG,aAAa,CAAC;QAClC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED,SAAS,aAAa;QACpB,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED,OAAO;QACL,aAAa;QACb,iBAAiB;QACjB,oBAAoB;QACpB,MAAM;KACP,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,kBAAkB;IAChC,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAC1D,gBAAgB,CAAC,aAAa,EAAE,CACjC,CAAC;IAEF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,SAAS,kBAAkB,CAAC,UAA2B;YACrD,kBAAkB,CAAC,UAAU,CAAC,CAAC;QACjC,CAAC;QAED,gBAAgB,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;QAEvD,OAAO,GAAG,EAAE;YACV,gBAAgB,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;QAC5D,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,eAAe,CAAC;AACzB,CAAC;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,0BAA0B,EAAE,CAAC","sourcesContent":["import * as React from 'react';\n\nexport type ThemePreference = 'no-preference' | 'light' | 'dark';\n\nconst ThemeContext = React.createContext('no-preference');\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  theme: ThemePreference;\n};\n\nexport function ThemePreferenceProvider({ children, theme }: ThemeProviderProps) {\n  React.useEffect(() => {\n    ThemePreferences.notify(theme);\n  }, [theme]);\n\n  return <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>;\n}\n\ntype ThemePreferenceChangeListener = (preference: ThemePreference) => void;\n\nfunction createThemePreferenceStore() {\n  let listeners: ThemePreferenceChangeListener[] = [];\n\n  let currentPreference: ThemePreference = 'no-preference';\n\n  function addChangeListener(listener: ThemePreferenceChangeListener) {\n    listeners.push(listener);\n  }\n\n  function removeChangeListener(listener: ThemePreferenceChangeListener) {\n    listeners = listeners.filter((l) => l !== listener);\n  }\n\n  function notify(newPreference: ThemePreference) {\n    currentPreference = newPreference;\n    listeners.forEach((l) => l(newPreference));\n  }\n\n  function getPreference() {\n    return currentPreference;\n  }\n\n  return {\n    getPreference,\n    addChangeListener,\n    removeChangeListener,\n    notify,\n  };\n}\n\nexport function useThemePreference() {\n  const [themePreference, setThemePreference] = React.useState<ThemePreference>(\n    ThemePreferences.getPreference()\n  );\n\n  React.useEffect(() => {\n    function onPreferenceChange(preference: ThemePreference) {\n      setThemePreference(preference);\n    }\n\n    ThemePreferences.addChangeListener(onPreferenceChange);\n\n    return () => {\n      ThemePreferences.removeChangeListener(onPreferenceChange);\n    };\n  }, []);\n\n  return themePreference;\n}\n\nexport const ThemePreferences = createThemePreferenceStore();\n"]}