{"version":3,"sources":["../../../src/logs/RemoteLogging.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport { Platform } from 'expo-modules-core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport invariant from 'invariant';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport getInstallationIdAsync from '../environment/getInstallationIdAsync';\nimport LogSerialization from './LogSerialization';\n\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ntype LogEntry = {\n  count: number;\n  level: LogLevel;\n  body: LogData[];\n  includesStack: boolean;\n  groupDepth?: number;\n} & LogEntryFields;\n\nexport type LogEntryFields = {\n  shouldHide?: boolean;\n  groupDepth?: number;\n  groupCollapsed?: boolean;\n};\n\nexport type LogData = string | LogErrorData;\nexport type LogErrorData = { message: string; stack: string };\n\ntype TransportErrorListener = (event: { error: Error; response?: Response }) => void;\n\nconst _sessionId = uuidv4();\nconst _logQueue: LogEntry[] = [];\nconst _transportEventEmitter = new EventEmitter();\n\nlet _logCounter = 0;\nlet _isSendingLogs = false;\nlet _completionPromise: Promise<void> | null = null;\nlet _resolveCompletion: (() => void) | null = null;\n\nasync function enqueueRemoteLogAsync(\n  level: LogLevel,\n  additionalFields: LogEntryFields,\n  data: unknown[]\n): Promise<void> {\n  if (_isReactNativeWarning(data)) {\n    // Remove the stack trace from the warning message since we'll capture our own\n    if (data.length === 0) {\n      throw new Error(`Warnings must include log arguments`);\n    }\n    const warning = data[0];\n    if (typeof warning !== 'string') {\n      throw new TypeError(`The log argument for a warning must be a string`);\n    }\n    const lines = warning.split('\\n');\n    if (lines.length > 1 && /^\\s+in /.test(lines[1])) {\n      data[0] = lines[0];\n    }\n  }\n\n  const { body, includesStack } = await LogSerialization.serializeLogDataAsync(data, level);\n\n  _logQueue.push({\n    count: _logCounter++,\n    level,\n    body,\n    includesStack,\n    ...additionalFields,\n  });\n\n  // Send the logs asynchronously (system errors are emitted with transport error events) and throw an uncaught error\n  _sendRemoteLogsAsync().catch((error) => {\n    setImmediate(() => {\n      throw error;\n    });\n  });\n}\n\nasync function _sendRemoteLogsAsync(): Promise<void> {\n  if (_isSendingLogs || !_logQueue.length) {\n    return;\n  }\n\n  // Our current transport policy is to send all of the pending log messages in one batch. If we opt\n  // for another policy (ex: throttling) this is where to to implement it.\n  const batch = _logQueue.splice(0);\n\n  const logUrl = Constants.manifest?.logUrl ?? Constants.manifest2?.extra?.expoGo?.logUrl;\n  if (typeof logUrl !== 'string') {\n    throw new Error('The Expo project manifest must specify `logUrl`');\n  }\n\n  _isSendingLogs = true;\n  try {\n    await _sendNextLogBatchAsync(batch, logUrl);\n  } finally {\n    _isSendingLogs = false;\n  }\n\n  if (_logQueue.length) {\n    return _sendRemoteLogsAsync();\n  } else if (_resolveCompletion) {\n    _resolveCompletion();\n  }\n}\n\nasync function _sendNextLogBatchAsync(batch: LogEntry[], logUrl: string): Promise<void> {\n  let response;\n\n  const headers = {\n    'Content-Type': 'application/json',\n    Connection: 'keep-alive',\n    'Proxy-Connection': 'keep-alive',\n    Accept: 'application/json',\n    'Device-Id': await getInstallationIdAsync(),\n    'Session-Id': _sessionId,\n    'Expo-Platform': Platform.OS,\n  };\n  if (Constants.deviceName) {\n    headers['Device-Name'] = Constants.deviceName;\n  }\n  try {\n    response = await fetch(logUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(batch),\n    });\n  } catch (error) {\n    _transportEventEmitter.emit('error', { error });\n    return;\n  }\n\n  const success = response.status >= 200 && response.status < 300;\n  if (!success) {\n    _transportEventEmitter.emit('error', {\n      error: new Error(`An HTTP error occurred when sending remote logs`),\n      response,\n    });\n  }\n}\n\nfunction addTransportErrorListener(listener: TransportErrorListener): EventSubscription {\n  return _transportEventEmitter.addListener('error', listener);\n}\n\nfunction _isReactNativeWarning(data: unknown[]): boolean {\n  // NOTE: RN does the same thing internally for YellowBox\n  const message = data[0];\n  return data.length === 1 && typeof message === 'string' && message.startsWith('Warning: ');\n}\n\nexport default {\n  enqueueRemoteLogAsync,\n  addTransportErrorListener,\n};\n\n/**\n * Returns a promise that resolves when all entries in the log queue have been sent. This method is\n * intended for testing only.\n */\nexport function __waitForEmptyLogQueueAsync(): Promise<void> {\n  if (_completionPromise) {\n    return _completionPromise;\n  }\n\n  if (!_isSendingLogs && !_logQueue.length) {\n    return Promise.resolve();\n  }\n\n  _completionPromise = new Promise((resolve) => {\n    _resolveCompletion = () => {\n      invariant(!_isSendingLogs, `Must not be sending logs at completion`);\n      invariant(!_logQueue.length, `Log queue must be empty at completion`);\n\n      _completionPromise = null;\n      _resolveCompletion = null;\n\n      resolve();\n    };\n  });\n  return _completionPromise;\n}\n"],"names":["Constants","Platform","EventEmitter","invariant","v4","uuidv4","getInstallationIdAsync","LogSerialization","_sessionId","_logQueue","_transportEventEmitter","_logCounter","_isSendingLogs","_completionPromise","_resolveCompletion","enqueueRemoteLogAsync","level","additionalFields","data","_isReactNativeWarning","length","Error","warning","TypeError","lines","split","test","body","includesStack","serializeLogDataAsync","push","count","_sendRemoteLogsAsync","catch","error","setImmediate","batch","splice","logUrl","manifest","manifest2","extra","expoGo","_sendNextLogBatchAsync","response","headers","Connection","Accept","OS","deviceName","fetch","method","JSON","stringify","emit","success","status","addTransportErrorListener","listener","addListener","message","startsWith","__waitForEmptyLogQueueAsync","Promise","resolve"],"mappings":"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"}