{"version":3,"sources":["../../../src/logs/LogSerialization.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport prettyFormat from 'pretty-format';\nimport parseErrorStack, { StackFrame } from 'react-native/Libraries/Core/Devtools/parseErrorStack';\nimport symbolicateStackTrace from 'react-native/Libraries/Core/Devtools/symbolicateStackTrace';\n\nimport { LogData, LogLevel } from './RemoteLogging';\nimport ReactNodeFormatter from './format/ReactNodeFormatter';\n\ntype SerializedData = {\n  body: LogData[];\n  includesStack: boolean;\n};\n\nexport const EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';\n\nasync function serializeLogDataAsync(data: unknown[], level: LogLevel): Promise<SerializedData> {\n  let serializedValues: readonly LogData[];\n  let includesStack = false;\n\n  if (_stackTraceLogsSupported()) {\n    if (_isUnhandledPromiseRejection(data, level)) {\n      const rawStack = data[0] as string;\n      const syntheticError = { stack: rawStack };\n      const stack = await _symbolicateErrorAsync(syntheticError as Error);\n\n      if (!stack.length) {\n        serializedValues = _stringifyLogData(data);\n      } else {\n        // NOTE: This doesn't handle error messages with newlines\n        const errorMessage = rawStack.split('\\n')[1];\n        serializedValues = [\n          {\n            message: `[Unhandled promise rejection: ${errorMessage}]`,\n            stack: _formatStack(stack),\n          },\n        ];\n        includesStack = true;\n      }\n    } else if (data.length === 1 && data[0] instanceof Error) {\n      // When there's only one argument to the log function and that argument is an error, we\n      // include the error's stack. If there's more than one argument then we don't include the\n      // stack because it's not easy to display nicely in our current UI.\n\n      const serializedError = await _serializeErrorAsync(data[0] as Error);\n      serializedValues = [serializedError];\n      includesStack = serializedError.hasOwnProperty('stack');\n    } else if (level === 'warn' || level === 'error') {\n      // For console.warn and console.error it is usually useful to know the stack that leads to the\n      // warning or error, so we provide this information to help out with debugging\n\n      const error = _captureConsoleStackTrace();\n      // [\"hello\", \"world\"] becomes \"hello, world\"\n      const errorMessage = _stringifyLogData(data).join(', ');\n\n      const serializedError = await _serializeErrorAsync(error, errorMessage);\n      serializedValues = [serializedError];\n      includesStack = serializedError.hasOwnProperty('stack');\n    } else {\n      serializedValues = _stringifyLogData(data);\n    }\n  } else {\n    serializedValues = _stringifyLogData(data);\n  }\n\n  return {\n    body: [...serializedValues],\n    includesStack,\n  };\n}\n\nfunction _stringifyLogData(data: unknown[]): string[] {\n  return data.map((item) => {\n    // define the max length for log msg to be first 10000 characters\n    const LOG_MESSAGE_MAX_LENGTH = 10000;\n    const result =\n      typeof item === 'string' ? item : prettyFormat(item, { plugins: [ReactNodeFormatter] });\n    // check the size of string returned\n    if (result.length > LOG_MESSAGE_MAX_LENGTH) {\n      let truncatedResult = result.substring(0, LOG_MESSAGE_MAX_LENGTH);\n      // truncate the result string to the max length\n      truncatedResult += `...(truncated to the first ${LOG_MESSAGE_MAX_LENGTH} characters)`;\n      return truncatedResult;\n    } else {\n      return result;\n    }\n  });\n}\n\nasync function _serializeErrorAsync(error: Error, message?: string): Promise<LogData> {\n  if (message == null) {\n    message = error.message;\n  }\n\n  if (!error.stack || !error.stack.length) {\n    return prettyFormat(error);\n  }\n\n  const stack = await _symbolicateErrorAsync(error);\n  const formattedStack = _formatStack(stack);\n\n  return { message, stack: formattedStack };\n}\n\nasync function _symbolicateErrorAsync(error: Error): Promise<StackFrame[]> {\n  // @ts-ignore: parseErrorStack accepts nullable string after RN 0.64 but @types/react-native does not updated yet.\n  const parsedStack = parseErrorStack(error?.stack);\n  let symbolicatedStack: StackFrame[] | null;\n  try {\n    // @ts-ignore: symbolicateStackTrace has different real/Flow declaration\n    // than the one in DefinitelyTyped.\n    symbolicatedStack = (await symbolicateStackTrace(parsedStack))?.stack ?? null;\n  } catch (error) {\n    return parsedStack;\n  }\n\n  // In this context an unsymbolicated stack is better than no stack\n  if (!symbolicatedStack) {\n    return parsedStack;\n  }\n\n  // Clean the stack trace\n  return symbolicatedStack.map(_removeProjectRoot);\n}\n\nfunction _formatStack(stack: StackFrame[]): string {\n  return stack\n    .map((frame) => {\n      let line = `${frame.file}:${frame.lineNumber}`;\n      if (frame.column != null) {\n        line += `:${frame.column}`;\n      }\n      line += ` in ${frame.methodName}`;\n      return line;\n    })\n    .join('\\n');\n}\n\nfunction _removeProjectRoot(frame: StackFrame): StackFrame {\n  let filename = frame.file;\n  if (filename == null) {\n    return frame;\n  }\n\n  const projectRoot = _getProjectRoot();\n  if (projectRoot == null) {\n    return frame;\n  }\n\n  if (filename.startsWith(projectRoot)) {\n    filename = filename.substring(projectRoot.length);\n    if (filename[0] === '/' || filename[0] === '\\\\') {\n      filename = filename.substring(1);\n    }\n    frame.file = filename;\n  }\n\n  return frame;\n}\n\n/**\n * Returns whether the development server that served this project supports logs with a stack trace.\n * Specifically, the version of Expo CLI that includes `projectRoot` in the manifest also accepts\n * payloads of the form:\n *\n * {\n *   includesStack: boolean, body: [{ message: string, stack: string }],\n * }\n */\nfunction _stackTraceLogsSupported(): boolean {\n  return !!(__DEV__ && _getProjectRoot());\n}\n\nfunction _isUnhandledPromiseRejection(data: unknown[], level: LogLevel): boolean {\n  return (\n    level === 'warn' &&\n    typeof data[0] === 'string' &&\n    /^Possible Unhandled Promise Rejection/.test(data[0] as string)\n  );\n}\n\nfunction _captureConsoleStackTrace(): Error {\n  try {\n    throw new Error();\n  } catch (error) {\n    let stackLines = error.stack.split('\\n');\n    const consoleMethodIndex = stackLines.findIndex((frame) =>\n      frame.includes(EXPO_CONSOLE_METHOD_NAME)\n    );\n    if (consoleMethodIndex !== -1) {\n      stackLines = stackLines.slice(consoleMethodIndex + 1);\n      error.stack = stackLines.join('\\n');\n    }\n    return error;\n  }\n}\n\nfunction _getProjectRoot(): string | null {\n  return (\n    Constants.manifest?.developer?.projectRoot ??\n    Constants.manifest2?.extra?.expoGo?.developer?.projectRoot ??\n    null\n  );\n}\n\nexport default {\n  serializeLogDataAsync,\n};\n"],"names":["Constants","prettyFormat","parseErrorStack","symbolicateStackTrace","ReactNodeFormatter","EXPO_CONSOLE_METHOD_NAME","serializeLogDataAsync","data","level","serializedValues","includesStack","_stackTraceLogsSupported","_isUnhandledPromiseRejection","rawStack","syntheticError","stack","_symbolicateErrorAsync","length","_stringifyLogData","errorMessage","split","message","_formatStack","Error","serializedError","_serializeErrorAsync","hasOwnProperty","error","_captureConsoleStackTrace","join","body","map","item","LOG_MESSAGE_MAX_LENGTH","result","plugins","truncatedResult","substring","formattedStack","parsedStack","symbolicatedStack","_removeProjectRoot","frame","line","file","lineNumber","column","methodName","filename","projectRoot","_getProjectRoot","startsWith","__DEV__","test","stackLines","consoleMethodIndex","findIndex","includes","slice","manifest","developer","manifest2","extra","expoGo"],"mappings":"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"}