{"version":3,"file":"getStaticSafeArea.native.js","sourceRoot":"","sources":["../../src/environment/getStaticSafeArea.native.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAEnD,MAAM,iBAAiB,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;AAEnE;;;GAGG;AACH,MAAM,UAAU,iBAAiB;IAC/B,IAAI;QACF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAEzE,kFAAkF;QAClF,MAAM,oBAAoB,GAAG,kBAAkB,EAAE,YAAY,EAAE,EAAE,oBAAoB,CAAC;QAEtF,OAAO,oBAAoB,EAAE,MAAM,IAAI,iBAAiB,CAAC;KAC1D;IAAC,MAAM,GAAE;IACV,OAAO,iBAAiB,CAAC;AAC3B,CAAC","sourcesContent":["import { TurboModuleRegistry } from 'react-native';\n\nconst DEFAULT_SAFE_AREA = { top: 0, bottom: 0, left: 0, right: 0 };\n\n/**\n * Get the best estimate safe area before native modules have fully loaded.\n * This is a hack to get the safe area insets without explicitly depending on react-native-safe-area-context.\n */\nexport function getStaticSafeArea(): { top: number; bottom: number; left: number; right: number } {\n  try {\n    const RNCSafeAreaContext = TurboModuleRegistry.get('RNCSafeAreaContext');\n\n    // @ts-ignore: we're not using the spec so the return type of getConstants() is {}\n    const initialWindowMetrics = RNCSafeAreaContext?.getConstants()?.initialWindowMetrics;\n\n    return initialWindowMetrics?.insets ?? DEFAULT_SAFE_AREA;\n  } catch {}\n  return DEFAULT_SAFE_AREA;\n}\n"]}