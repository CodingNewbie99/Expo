{"version":3,"file":"registerRootComponent.js","sourceRoot":"","sources":["../../src/launch/registerRootComponent.tsx"],"names":[],"mappings":"AAAA,OAAO,oBAAoB,CAAC;AAE5B,OAAO,SAAS,EAAE,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AAEjE,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAE3C,MAAM,uBAAuB,GAAG,SAAS,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,UAAU,IAAI,SAAS,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,WAAW,CAAC;AAE1K,IAAI,OAAO,EAAE;IACX,8CAA8C;IAC9C,IAAI;QACF,MAAM,EAAE,iBAAiB,EAAE,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAA;QACxD,iBAAiB,EAAE,CAAC;KACrB;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,uBAAuB,EAAE;YAC3B,MAAM,KAAK,CAAC;SACb;QACD,wDAAwD;KACzD;CACF;AAED,MAAM,CAAC,OAAO,UAAU,qBAAqB,CAAI,SAAiC;IAEhF,2GAA2G;IAC3G,iCAAiC;IACjC,IAAI;QACF,MAAM,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC/C,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;KACtE;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,uBAAuB;YAAE,MAAM,KAAK,CAAC;KAC1C;IACD,WAAW;IACX,4DAA4D;IAC5D,IAAI;AACN,CAAC","sourcesContent":["import 'expo/build/Expo.fx';\n\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as React from 'react';\nimport { AppRegistry } from 'react-native';\n\nconst isLegacyManagedWorkflow = Constants.executionEnvironment === ExecutionEnvironment.Standalone || Constants.executionEnvironment === ExecutionEnvironment.StoreClient;\n\nif (__DEV__) {\n  // In dev mode, attempt to keep the screen on.\n  try {\n    const { activateKeepAwake } = require('expo-keep-awake') \n    activateKeepAwake();\n  } catch (error) {\n    if (isLegacyManagedWorkflow) {\n      throw error;\n    }\n    // expo-keep-awake may not be installed in all projects.\n  }\n}\n\nexport default function registerRootComponent<P>(component: React.ComponentType<P>): void {\n\n  // TODO: Is this right? Are there cases when notifications shouldn't be passed to the app as initial props?\n  // if (isLegacyManagedWorkflow) {\n  try {\n    const withExpoRoot = require('./withExpoRoot');\n    AppRegistry.registerComponent('main', () => withExpoRoot(component));\n  } catch (error) {\n    if (isLegacyManagedWorkflow) throw error;\n  }\n  // } else {\n  //   AppRegistry.registerComponent('main', () => component);\n  // }\n}\n"]}