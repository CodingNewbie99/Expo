#!/usr/bin/env node
"use strict";
var _arg = _interopRequireDefault(require("arg"));
var _chalk = _interopRequireDefault(require("chalk"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
[
    'react',
    'react-native'
].forEach((dependency)=>{
    try {
        // When 'npm link' is used it checks the clone location. Not the project.
        require.resolve(dependency);
    } catch (err) {
        console.warn(`The module '${dependency}' was not found. Expo requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install ${dependency}'`);
    }
});
const defaultCommand = 'config';
const commands = {
    config: ()=>Promise.resolve().then(function() {
            return _interopRequireWildcard(require('../cli/config'));
        }).then((i)=>i.expoConfig
        )
};
const args = (0, _arg).default({
    // Types
    '--version': Boolean,
    '--help': Boolean,
    // Aliases
    '-v': '--version',
    '-h': '--help'
}, {
    permissive: true
});
// Version is inlined into the file using taskr build pipeline
if (args['--version']) {
    console.log(`expo v${"44.0.0-beta.1"}`);
    process.exit(0);
}
// Check if we are running `expo <subcommand>` or `expo`
const foundCommand = Boolean(commands[args._[0]]);
// Makes sure the `expo --help` case is covered
// This help message is only showed for `expo --help`
// `expo <subcommand> --help` falls through to be handled later
if (!foundCommand && args['--help']) {
    console.log(_chalk.default`
    {bold Usage}
      {bold $} npx expo <command>

    {bold Available commands}
      ${Object.keys(commands).join(', ')}

    {bold Options}
      --version, -v   Version number
      --help, -h      Displays this message

    For more information run a command with the --help flag
      {bold $} expo start --help
  `);
    process.exit(0);
}
const command = foundCommand ? args._[0] : defaultCommand;
const forwardedArgs = foundCommand ? args._.slice(1) : args._;
// Make sure the `expo <subcommand> --help` case is covered
if (args['--help']) {
    forwardedArgs.push('--help');
}
// Make sure commands gracefully respect termination signals (e.g. from Docker)
process.on('SIGTERM', ()=>process.exit(0)
);
process.on('SIGINT', ()=>process.exit(0)
);
commands[command]().then((exec)=>exec(forwardedArgs)
);

//# sourceMappingURL=cli.map