{"version":3,"file":"Expo.fx.js","sourceRoot":"","sources":["../src/Expo.fx.tsx"],"names":[],"mappings":"AAAA,wEAAwE;AACxE,OAAO,2BAA2B,CAAC;AACnC,OAAO,0BAA0B,CAAC;AAClC,OAAO,oCAAoC,CAAC;AAC5C,mFAAmF;AACnF,OAAO,YAAY,CAAC;AAEpB,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAChE,OAAO,SAAS,EAAE,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAKvD,OAAO,eAAe,MAAM,+BAA+B,CAAC;AAE5D,IACE,SAAS,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,UAAU;IAClE,SAAS,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,WAAW,EACnE;IACA,qDAAqD;IACrD,IAAI,OAAO,EAAE;QACX,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;YACzB,aAAa;YACb,WAAW,CAAC,2BAA2B,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,CAAC;YAE/D,aAAa;YACb,MAAM,mCAAmC,GAAG,WAAW,CAAC,2BAA2B,CAAC;YAEpF,aAAa;YACb,WAAW,CAAC,2BAA2B,GAAG,QAAQ,CAAC,EAAE;gBACnD,SAAS,wBAAwB,CAAC,KAAU;oBAC1C,MAAM,iBAAiB,GAAG,QAAQ,EAAE,CAAC;oBAErC,OAAO,CACL,oBAAC,eAAe;wBACd,oBAAC,iBAAiB,oBAAK,KAAK,EAAI,CAChB,CACnB,CAAC;gBACJ,CAAC;gBAED,mCAAmC,CAAC,GAAG,EAAE,CAAC,wBAAwB,CAAC,CAAC;YACtE,CAAC,CAAC;SACH;KACF;IAED,IAAI,UAAU,CAAC,6BAA6B,EAAE;QAC5C,IAAI,IAAI,CAAC;QACT,IAAI;YACF,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;SAC7B;QAAC,MAAM;SAEP;QACD,UAAU,CAAC,6BAA6B,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;KAChF;IAED,IAAI;QACF,MAAM,EAAE,6BAA6B,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;QACnE,iCAAiC;QACjC,6BAA6B,EAAE,CAAC;KACjC;IAAC,MAAM,GAAE;IAEV,IAAI,MAAM,IAAI,MAAM,EAAE,OAAO,EAAE;QAC7B,IAAI,MAAM,EAAE;YACV,IAAI;gBACF,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;gBAErC,aAAa;gBACb,MAAM,CAAC,UAAU,GAAG,OAAO,CAAC;gBAC5B,aAAa;gBACb,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC;gBACxB,aAAa;gBACb,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;aACvB;YAAC,MAAM;gBACN,wDAAwD;aACzD;SACF;KACF;CACF;KAAM;IACL,IAAI,kBAAkB,CAAC,WAAW,EAAE,uBAAuB,EAAE;QAC3D,MAAM,OAAO,GACX,+EAA+E;YAC/E,0DAA0D;YAC1D,QAAQ,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;YACtE,yCAAyC,CAAC;QAC5C,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1B;KACF;CACF","sourcesContent":["// load remote logging for compatibility with custom development clients\nimport './environment/validate.fx';\nimport './environment/logging.fx';\nimport './environment/react-native-logs.fx';\n// load expo-asset immediately to set a custom `source` transformer in React Native\nimport 'expo-asset';\n\nimport React from 'react';\nimport { NativeModulesProxy, Platform } from '@unimodules/core';\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport { AppRegistry, StyleSheet } from 'react-native';\n\n// install globals\ndeclare let module: any;\n\nimport DevAppContainer from './environment/DevAppContainer';\n\nif (\n  Constants.executionEnvironment === ExecutionEnvironment.Standalone ||\n  Constants.executionEnvironment === ExecutionEnvironment.StoreClient\n) {\n  // add the dev app container wrapper component on ios\n  if (__DEV__) {\n    if (Platform.OS === 'ios') {\n      // @ts-ignore\n      AppRegistry.setWrapperComponentProvider(() => DevAppContainer);\n\n      // @ts-ignore\n      const originalSetWrapperComponentProvider = AppRegistry.setWrapperComponentProvider;\n\n      // @ts-ignore\n      AppRegistry.setWrapperComponentProvider = provider => {\n        function PatchedProviderComponent(props: any) {\n          const ProviderComponent = provider();\n\n          return (\n            <DevAppContainer>\n              <ProviderComponent {...props} />\n            </DevAppContainer>\n          );\n        }\n\n        originalSetWrapperComponentProvider(() => PatchedProviderComponent);\n      };\n    }\n  }\n\n  if (StyleSheet.setStyleAttributePreprocessor) {\n    let Font;\n    try {\n      Font = require('expo-font');\n    } catch {\n\n    }\n    StyleSheet.setStyleAttributePreprocessor('fontFamily', Font.processFontFamily);\n  }\n\n  try {\n    const { installWebGeolocationPolyfill } = require('expo-location');\n    // polyfill navigator.geolocation\n    installWebGeolocationPolyfill();\n  } catch {}\n\n  if (module && module?.exports) {\n    if (global) {\n      try {\n        const globals = require('./globals');\n  \n        // @ts-ignore\n        global.__exponent = globals;\n        // @ts-ignore\n        global.__expo = globals;\n        // @ts-ignore\n        global.Expo = globals;\n      } catch {\n        // In case some imports aren't present in bare workflow.\n      }\n    }\n  }\n} else {\n  if (NativeModulesProxy.ExpoUpdates?.isMissingRuntimeVersion) {\n    const message =\n      'expo-updates is installed but there is no runtime or SDK version configured. ' +\n      \"You'll need to configure one of these two properties in \" +\n      Platform.select({ ios: 'Expo.plist', android: 'AndroidManifest.xml' }) +\n      ' before OTA updates will work properly.';\n    if (__DEV__) {\n      console.warn(message);\n    } else {\n      throw new Error(message);\n    }\n  }\n}\n"]}