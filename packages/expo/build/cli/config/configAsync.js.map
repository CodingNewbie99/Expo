{"version":3,"sources":["../../../cli/config/configAsync.ts"],"sourcesContent":["import { ExpoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport { compileModsAsync } from '@expo/config-plugins/build/plugins/mod-compiler';\nimport { getPrebuildConfigAsync } from '@expo/prebuild-config';\nimport assert from 'assert';\nimport util from 'util';\n\nimport * as Log from '../Log';\nimport { CommandError } from '../utils/errors';\nimport { profile } from '../utils/profile';\n\ntype Options = {\n  type?: string;\n  full: boolean;\n  json?: boolean;\n};\n\nexport function logConfig(config: ExpoConfig | ProjectConfig) {\n  const isObjStr = (str: string): boolean => /^\\w+: {/g.test(str);\n  Log.log(\n    util.inspect(config, {\n      colors: true,\n      compact: false,\n      // Sort objects to the end so that smaller values aren't hidden between large objects.\n      sorted(a: string, b: string) {\n        if (isObjStr(a)) return 1;\n        if (isObjStr(b)) return -1;\n        return 0;\n      },\n      showHidden: false,\n      depth: null,\n    })\n  );\n}\n\nexport async function configAsync(projectRoot: string, options: Options) {\n  if (options.type) {\n    assert.match(options.type, /public|prebuild|introspect/);\n  }\n\n  let config: ProjectConfig;\n\n  if (options.type === 'prebuild') {\n    config = await profile(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n  } else if (options.type === 'introspect') {\n    config = await profile(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n\n    await compileModsAsync(config.exp, {\n      projectRoot,\n      introspect: true,\n      platforms: ['ios', 'android'],\n      assertMissingModProviders: false,\n    });\n    // @ts-ignore\n    delete config.modRequest;\n    // @ts-ignore\n    delete config.modResults;\n  } else if (options.type === 'public') {\n    config = profile(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n      isPublicConfig: true,\n    });\n  } else if (options.type) {\n    throw new CommandError(\n      `Invalid option: --type ${options.type}. Valid options are: public, prebuild`\n    );\n  } else {\n    config = profile(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n  }\n\n  const configOutput = options.full ? config : config.exp;\n\n  if (!options.json) {\n    Log.log();\n    logConfig(configOutput);\n    Log.log();\n  } else {\n    Log.log(JSON.stringify(configOutput));\n  }\n}\n"],"names":["logConfig","configAsync","Log","config","isObjStr","str","test","log","inspect","colors","compact","sorted","a","b","showHidden","depth","projectRoot","options","type","match","platforms","exp","introspect","assertMissingModProviders","modRequest","modResults","skipSDKVersionRequirement","isPublicConfig","configOutput","full","json","JSON","stringify"],"mappings":"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"}