{"version":3,"file":"url.js","sourceRoot":"","sources":["../../src/winter/url.ts"],"names":[],"mappings":"AAAA,gFAAgF;AAEhF,OAAO,EAAE,GAAG,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAElD,IAAI,KAAK,GAAG,KAAK,CAAC;AAClB,IAAI,eAAe,GAAkB,IAAI,CAAC;AAE1C,SAAS,gBAAgB;IACvB,IAAI,KAAK;QAAE,OAAO,eAAe,CAAC;IAClC,KAAK,GAAG,IAAI,CAAC;IACb,wCAAwC;IAExC,uDAAuD;IACvD,MAAM,UAAU,GACd,MAAM,CAAC,aAAa,KAAK,IAAI;QAC3B,CAAC,CAAC,2BAA2B;YAC3B,MAAM,CAAC,iBAAiB,CAAC,YAAY,CAAC;QACxC,CAAC,CAAC,0BAA0B;YAC1B,MAAM,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;IAE9C,MAAM,SAAS,GAAG,iBAAiB,IAAI,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;IAE3F,IAAI,SAAS,IAAI,OAAO,SAAS,CAAC,eAAe,KAAK,QAAQ,EAAE;QAC9D,eAAe,GAAG,SAAS,CAAC,eAAe,GAAG,GAAG,CAAC;QAClD,IAAI,OAAO,SAAS,CAAC,aAAa,KAAK,QAAQ,EAAE;YAC/C,eAAe,IAAI,KAAK,SAAS,CAAC,aAAa,GAAG,CAAC;SACpD;KACF;IACD,OAAO,eAAe,CAAC;AACzB,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,GAAG,CAAC,eAAe,GAAG,SAAS,eAAe,CAAC,IAAI;IACjD,IAAI,gBAAgB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;KAC/C;IACD,OAAO,GAAG,gBAAgB,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,WAAW,IAAI,CAAC,IAAI,CAAC,MAAM,SAAS,IAAI,CAAC,IAAI,EAAE,CAAC;AACjG,CAAC,CAAC;AAEF,GAAG,CAAC,eAAe,GAAG,SAAS,eAAe,CAAC,GAAG;IAChD,cAAc;AAChB,CAAC,CAAC;AAEF,OAAO,EAAE,GAAG,EAAE,eAAe,EAAE,CAAC","sourcesContent":["// This file should not import `react-native` in order to remain self-contained.\n\nimport { URL, URLSearchParams } from 'whatwg-url';\n\nlet setup = false;\nlet BLOB_URL_PREFIX: string | null = null;\n\nfunction getBlobUrlPrefix() {\n  if (setup) return BLOB_URL_PREFIX;\n  setup = true;\n  // if iOS: let BLOB_URL_PREFIX = 'blob:'\n\n  // Pull the blob module without importing React Native.\n  const BlobModule =\n    global.RN$Bridgeless !== true\n      ? // Legacy RN implementation\n        global.nativeModuleProxy['BlobModule']\n      : // Newer RN implementation\n        global.__turboModuleProxy('BlobModule');\n\n  const constants = 'BLOB_URI_SCHEME' in BlobModule ? BlobModule : BlobModule.getConstants();\n\n  if (constants && typeof constants.BLOB_URI_SCHEME === 'string') {\n    BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';\n    if (typeof constants.BLOB_URI_HOST === 'string') {\n      BLOB_URL_PREFIX += `//${constants.BLOB_URI_HOST}/`;\n    }\n  }\n  return BLOB_URL_PREFIX;\n}\n\n/**\n * To allow Blobs be accessed via `content://` URIs,\n * you need to register `BlobProvider` as a ContentProvider in your app's `AndroidManifest.xml`:\n *\n * ```xml\n * <manifest>\n *   <application>\n *     <provider\n *       android:name=\"com.facebook.react.modules.blob.BlobProvider\"\n *       android:authorities=\"@string/blob_provider_authority\"\n *       android:exported=\"false\"\n *     />\n *   </application>\n * </manifest>\n * ```\n * And then define the `blob_provider_authority` string in `res/values/strings.xml`.\n * Use a dotted name that's entirely unique to your app:\n *\n * ```xml\n * <resources>\n *   <string name=\"blob_provider_authority\">your.app.package.blobs</string>\n * </resources>\n * ```\n */\nURL.createObjectURL = function createObjectURL(blob) {\n  if (getBlobUrlPrefix() === null) {\n    throw new Error('Cannot create URL for blob');\n  }\n  return `${getBlobUrlPrefix()}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.size}`;\n};\n\nURL.revokeObjectURL = function revokeObjectURL(url) {\n  // Do nothing.\n};\n\nexport { URL, URLSearchParams };\n"]}