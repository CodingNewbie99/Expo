{"version":3,"file":"MailComposer.js","sourceRoot":"","sources":["../src/MailComposer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAElD,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAE3D;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,UAA6B,EAAE;IACnE,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,MAAM,kBAAkB,CAAC,OAAO,CAAC,CAAC;KAC1C;IACD,OAAO,MAAM,gBAAgB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AACzD,CAAC;AAED,cAAc;AACd;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,OAA4B;IAC7D,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AACtD,CAAC;AAED,cAAc;AACd;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO,MAAM,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;AACnD,CAAC;AAED,cAAc,sBAAsB,CAAC","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport ExpoMailComposer from './ExpoMailComposer';\nimport { MailClientOptions, MailComposerOptions, MailComposerResult } from './MailComposer.types';\nimport { openClientAsyncIos } from './openClientAsync.ios';\n\n/**\n * Opens an email client on the device.\n * This is particularly useful for scenarios like sending a login link (akin to Slack's \"Magic Link\" functionality) or\n * for verifying the user's email address during registration.\n *\n * If only one email client is installed and detected, it will be automatically opened.\n * If multiple clients are available, a pop-up will prompt the user to choose from the available options.\n * If no email client is found, the promise resolves without triggering any action.\n * @param options Configuration options for the mail client selector.\n * @returns A promise that resolves once an email client is opened or the operation is cancelled.\n * @platform android ios\n */\nexport async function openClientAsync(options: MailClientOptions = {}): Promise<void> {\n  if (Platform.OS === 'ios') {\n    return await openClientAsyncIos(options);\n  }\n  return await ExpoMailComposer.openClientAsync(options);\n}\n\n// @needsAudit\n/**\n * Opens a mail modal for iOS and a mail app intent for Android and fills the fields with provided\n * data. On iOS you will need to be signed into the Mail app.\n * @return A promise fulfilled with an object containing a `status` field that specifies whether an\n * email was sent, saved, or cancelled. Android does not provide this info, so the status is always\n * set as if the email were sent.\n */\nexport async function composeAsync(options: MailComposerOptions): Promise<MailComposerResult> {\n  return await ExpoMailComposer.composeAsync(options);\n}\n\n// @needsAudit\n/**\n * Determine if the `MailComposer` API can be used in this app.\n * @return A promise resolves to `true` if the API can be used, and `false` otherwise.\n * - Returns `true` on iOS when the device has a default email setup for sending mail.\n * - Can return `false` on iOS if an MDM profile is setup to block outgoing mail. If this is the\n * case, you may want to use the Linking API instead.\n * - Always returns `true` in the browser and on Android.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await ExpoMailComposer.isAvailableAsync();\n}\n\nexport * from './MailComposer.types';\n"]}