{"version":3,"file":"MailComposer.js","sourceRoot":"","sources":["../src/MailComposer.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAGlD;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,OAA4B;IAC7D,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AACtD,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO,MAAM,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;AACnD,CAAC;AAED,cAAc,sBAAsB,CAAC","sourcesContent":["import ExpoMailComposer from './ExpoMailComposer';\nimport { MailComposerOptions, MailComposerResult } from './MailComposer.types';\n\n/**\n * Opens a mail modal for iOS and a mail app intent for Android and fills the fields with provided data. On iOS you will need to be signed into the Mail app.\n * @return Resolves to a promise with object containing status field that could be either sent, saved or cancelled. Android does not provide such info so it always resolves to sent.\n */\nexport async function composeAsync(options: MailComposerOptions): Promise<MailComposerResult> {\n  return await ExpoMailComposer.composeAsync(options);\n}\n\n/**\n * Determine if the `MailComposer` API can be used in this app.\n * @return A promise resolves to `true` if the API can be used, and `false` otherwise.\n * - Returns `true` on iOS when the device has a default email setup for sending mail.\n * - Can return `false` on iOS if an MDM profile is setup to block outgoing mail. If this is the case, you may want to use the Linking API instead.\n * - Always returns `true` in the browser and on Android.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await ExpoMailComposer.isAvailableAsync();\n}\n\nexport * from './MailComposer.types';\n"]}