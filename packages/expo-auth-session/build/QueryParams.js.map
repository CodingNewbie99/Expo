{"version":3,"file":"QueryParams.js","sourceRoot":"","sources":["../src/QueryParams.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,WAAW,CAAC;AAElC,MAAM,UAAU,cAAc,CAAC,GAAW;IAIxC,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7B,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACtB,MAAM,gBAAgB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7C,MAAM,WAAW,GAAG,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAElE,kCAAkC;IAClC,MAAM,YAAY,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC;IAEtD,+BAA+B;IAC/B,MAAM,SAAS,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,IAAI,CAAkB,CAAC;IAC3E,SAAS,CACP,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,KAAK,IAAI,EACnD,yDAAyD,CAC1D,CAAC;IACF,YAAY,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAEjC,wBAAwB;IACxB,MAAM,MAAM,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;IACnC,0BAA0B;IAC1B,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;QACZ,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACtB,CAAC,CAAC,CAAC;KACJ;IAED,OAAO;QACL,SAAS;QACT,MAAM;KACP,CAAC;AACJ,CAAC;AAED,SAAS,KAAK,CAAC,YAA6B;IAC1C,MAAM,GAAG,GAA2B,EAAE,CAAC;IACvC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAClC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACnB,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import invariant from 'invariant';\n\nexport function getQueryParams(url: string): {\n  errorCode: string | null;\n  params: { [key: string]: string };\n} {\n  const parts = url.split('#');\n  const hash = parts[1];\n  const partsWithoutHash = parts[0].split('?');\n  const queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  const parsedSearch = new URLSearchParams(queryString);\n\n  // Pull errorCode off of params\n  const errorCode = (parsedSearch.get('errorCode') ?? null) as string | null;\n  invariant(\n    typeof errorCode === 'string' || errorCode === null,\n    `The \"errorCode\" parameter must be a string if specified`\n  );\n  parsedSearch.delete('errorCode');\n\n  // Merge search and hash\n  const params = toObj(parsedSearch);\n  // Get hash (#abc=example)\n  if (parts[1]) {\n    new URLSearchParams(hash).forEach((value, key) => {\n      params[key] = value;\n    });\n  }\n\n  return {\n    errorCode,\n    params,\n  };\n}\n\nfunction toObj(searchParams: URLSearchParams) {\n  const obj: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n}\n"]}