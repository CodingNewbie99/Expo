{"version":3,"file":"NativeViewManagerAdapter.js","sourceRoot":"","sources":["../src/NativeViewManagerAdapter.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,IAAI,MAAM,aAAa,CAAC;AAC/B,OAAO,IAAI,MAAM,aAAa,CAAC;AAC/B,OAAO,SAAS,MAAM,YAAY,CAAC;AACnC,OAAO,EAAE,sBAAsB,EAAE,aAAa,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE/F,uDAAuD;AACvD,iEAAiE;AACjE,oEAAoE;AACpE,2EAA2E;AAC3E,2EAA2E;AAC3E,2EAA2E;AAC3E,sEAAsE;AACtE,sEAAsE;AACtE,iEAAiE;AACjE,8CAA8C;AAC9C,iDAAiD;AAEjD,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAErD,MAAM,oCAAoC,GAAG,IAAI,CAAC,EAAE,CAAC,sBAAsB,IAAI,EAAE,CAAC;AAElF,MAAM,0BAA0B,GAAG,IAAI,CAAC,EAAE;IACxC,MAAM,eAAgB,SAAQ,KAAK,CAAC,SAAS;QAG3C,MAAM;YACJ,OAAO,CAAC,yBAAyB,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,EAAG,CAAC;QACvD,CAAC;;IAJM,2BAAW,GAAG,IAAI,CAAC;IACnB,yBAAS,GAAG,EAAE,GAAG,aAAa,EAAE,iBAAiB,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC;IAM/E,MAAM,mBAAmB,GAAG,oCAAoC,CAAC,IAAI,CAAC,CAAC;IAEvE,MAAM,yBAAyB,GAAG,sBAAsB,CAAC,mBAAmB,EAAE,eAAe,EAAE;QAC7F,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CACxE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,EACvC,EAAE,CACH;KACF,CAAC,CAAC;IAEH,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE;;IAC1D,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACzE,OAAO,CAAC,IAAI,CACV,yEAAyE;YACvE,4EAA4E;YAC5E,0DAA0D;YAC1D,aAAa,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;YAChE,wBAAwB,IAAI,IAAI,CACnC,CAAC;KACH;IAED,MAAM,eAAe,GAAG,0BAA0B,CAAC,IAAI,CAAC,CAAC;IACzD,MAAM,aAAa,GAAG;QACpB,UAAU;QACV,GAAG,iBAAiB;QACpB,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,oCAAoC,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;QACjF,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,oCAAoC,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC;KACvF,CAAC;IACF,YAAO,MAAM,sBAAuB,SAAQ,KAAK,CAAC,SAAS;YAEzD,MAAM;gBACJ,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;gBACpD,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;gBACrD,OAAO,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,CAAC,IAAI,WAAW,CAAC,EAAG,CAAC;YAC/E,CAAC;SACF;QANQ,cAAW,GAAG,eAAe,IAAI,GAAI;WAM7C;AACH,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport omit from 'lodash.omit';\nimport pick from 'lodash.pick';\nimport PropTypes from 'prop-types';\nimport { requireNativeComponent, ViewPropTypes, UIManager, NativeModules } from 'react-native';\n\n// We'd like to make the transition from react-native's\n// requireNativeComponent to expo-core's requireNativeViewManager\n// as easy as possible, so an obvious requirement will be to be able\n// to just replace the requireNativeComponent with requireNativeViewManager\n// call. If that's so, we have to wrap a native component in two middleware\n// components - the bottom one, near the requireNativeComponent call has to\n// define a propType for proxiedProperties (so that doesn't complain),\n// and the \"top\" one has to accept all the properties, split them into\n// props passed to react-native's View (like style, testID, etc.)\n// and custom view properties. For that we use\n// {omit,pick}(props, Object.keys(ViewPropTypes))\n\nconst ViewPropTypesKeys = Object.keys(ViewPropTypes);\n\nconst getViewManagerAdapterNameForViewName = name => `ViewManagerAdapter_${name}`;\n\nconst createNativeComponentClass = name => {\n  class NativeComponent extends React.Component {\n    static displayName = name;\n    static propTypes = { ...ViewPropTypes, proxiedProperties: PropTypes.object };\n    render() {\n      return <UnderlyingNativeComponent {...this.props} />;\n    }\n  }\n\n  const nativeComponentName = getViewManagerAdapterNameForViewName(name);\n\n  const UnderlyingNativeComponent = requireNativeComponent(nativeComponentName, NativeComponent, {\n    nativeOnly: Object.keys(UIManager[nativeComponentName].NativeProps).reduce(\n      (acc, key) => ({ ...acc, [key]: true }),\n      {}\n    ),\n  });\n\n  return NativeComponent;\n};\n\nexport const requireNativeViewManager = (name, component) => {\n  if (!NativeModules.ExpoNativeModuleProxy.viewManagersNames.includes(name)) {\n    console.warn(\n      \"It seems the native view manager which you're trying to require by name\" +\n        \"from NativeViewManagerAdapter isn't exported by expo-react-native-adapter.\" +\n        ' Things may not work properly. Exported view managers: [' +\n        NativeModules.ExpoNativeModuleProxy.viewManagersNames.join(', ') +\n        `], and you required \"${name}\".`\n    );\n  }\n\n  const NativeComponent = createNativeComponentClass(name);\n  const PropTypesKeys = [\n    'children',\n    ...ViewPropTypesKeys,\n    ...Object.keys(UIManager[getViewManagerAdapterNameForViewName(name)].NativeProps),\n    ...Object.keys(UIManager[getViewManagerAdapterNameForViewName(name)].directEventTypes),\n  ];\n  return class NativeComponentWrapper extends React.Component {\n    static displayName = `ViewWrapper<${name}>`;\n    render() {\n      const nativeProps = pick(this.props, PropTypesKeys);\n      const proxiedProps = omit(this.props, PropTypesKeys);\n      return <NativeComponent proxiedProperties={proxiedProps} {...nativeProps} />;\n    }\n  }\n};\n"]}