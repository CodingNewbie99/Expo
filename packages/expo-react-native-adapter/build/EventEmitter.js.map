{"version":3,"file":"EventEmitter.js","sourceRoot":"","sources":["../src/EventEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC;;;GAGG;AACH,OAAO,kBAAkB,MAAM,wDAAwD,CAAC;AAWxF,MAAM,CAAC,OAAO,OAAO,YAAY;IAK/B,YAAY,YAA0B;QAJtC,oBAAe,GAAG,CAAC,CAAC;QAKlB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,IAAI,kBAAkB,CAAC,YAAY,CAAC,CAAC;IAC5D,CAAC;IAED,WAAW,CAAI,SAAiB,EAAE,QAA4B;QAC5D,IAAI,CAAC,eAAe,IAAI,CAAC,CAAC;QAC1B,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE;YAClE,IAAI,IAAI,CAAC,eAAe,KAAK,CAAC,EAAE;gBAC9B,sCAAsC;gBACtC,6BAA6B;gBAC7B,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;aACrC;SACF;QACD,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAED,kBAAkB,CAAC,SAAiB;QAClC,MAAM,sBAAsB,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;QAC9E,MAAM,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,GAAG,sBAAsB,CAAC,CAAC;QAErF,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,IAAI,iBAAiB,KAAK,CAAC,EAAE;YAC5F,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;SACpC;QAED,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,iBAAiB,CAAC;IAC3C,CAAC;IAED,kBAAkB,CAAC,YAA0B;QAC3C,IAAI,CAAC,eAAe,IAAI,CAAC,CAAC;QAE1B,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE;YACjE,IAAI,IAAI,CAAC,eAAe,KAAK,CAAC,EAAE;gBAC9B,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;aACpC;SACF;QAED,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;IACtD,CAAC;IAED,IAAI,CAAC,SAAiB,EAAE,GAAG,MAAa;QACtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,MAAM,CAAC,CAAC;IAChD,CAAC;CACF","sourcesContent":["import { Platform } from 'react-native';\n/* \n * Importing this directly will circumvent the webpack alias `react-native$`\n * This will enable us to use NativeEventEmitter from React Native and not from RNWeb.\n */\nimport NativeEventEmitter from 'react-native/Libraries/EventEmitter/NativeEventEmitter';\n\ntype NativeModule = {\n  startObserving?: () => void,\n  stopObserving?: () => void,\n};\n\ntype Subscription = {\n  remove: () => void,\n};\n\nexport default class EventEmitter {\n  _listenersCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    this._listenersCount += 1;\n    if (Platform.OS === 'android' && this._nativeModule.startObserving) {\n      if (this._listenersCount === 1) {\n        // We're not awaiting start of updates\n        // they should start shortly.\n        this._nativeModule.startObserving();\n      }\n    }\n    return this._eventEmitter.addListener(eventName, listener);\n  }\n\n  removeAllListeners(eventName: string): void {\n    const listenersToRemoveCount = this._eventEmitter.listeners(eventName).length;\n    const newListenersCount = Math.max(0, this._listenersCount - listenersToRemoveCount);\n\n    if (Platform.OS === 'android' && this._nativeModule.stopObserving && newListenersCount === 0) {\n      this._nativeModule.stopObserving();\n    }\n\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenersCount = newListenersCount;\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    this._listenersCount -= 1;\n\n    if (Platform.OS === 'android' && this._nativeModule.stopObserving) {\n      if (this._listenersCount === 0) {\n        this._nativeModule.stopObserving();\n      }\n    }\n\n    this._eventEmitter.removeSubscription(subscription);\n  }\n\n  emit(eventType: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventType, ...params);\n  }\n}\n"]}