{"version":3,"file":"AdSettings.js","sourceRoot":"","sources":["../src/AdSettings.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;AAC/C,OAAO,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAElD,IAAI,EAAE,oBAAoB,EAAE,GAAG,kBAAkB,CAAC;AAElD,oBAAoB,GAAG,oBAAoB,IAAI,EAAE,CAAC;AAIlD,8BAA8B;AAC9B,eAAe;IACb;;OAEG;IACH,IAAI,iBAAiB;QACnB,OAAO,oBAAoB,CAAC,CAAC,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9E,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,UAAkB;QAC9B,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE;YACvC,MAAM,IAAI,mBAAmB,CAAC,sBAAsB,EAAE,eAAe,CAAC,CAAC;SACxE;QACD,oBAAoB,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IACjD,CAAC;IACD;;OAEG;IACH,gBAAgB;QACd,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,EAAE;YAC1C,MAAM,IAAI,mBAAmB,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;SAC3E;QACD,oBAAoB,CAAC,gBAAgB,EAAE,CAAC;IAC1C,CAAC;IACD;;OAEG;IACH,WAAW,CAAC,QAAoB;QAC9B,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE;YACrC,MAAM,IAAI,mBAAmB,CAAC,sBAAsB,EAAE,aAAa,CAAC,CAAC;SACtE;QACD,oBAAoB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IACD;;OAEG;IACH,kBAAkB,CAAC,UAAmB;QACpC,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,EAAE;YAC5C,MAAM,IAAI,mBAAmB,CAAC,sBAAsB,EAAE,oBAAoB,CAAC,CAAC;SAC7E;QACD,oBAAoB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACtD,CAAC;IACD;;OAEG;IACH,mBAAmB,CAAC,gBAAwB;QAC1C,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,EAAE;YAC7C,MAAM,IAAI,mBAAmB,CAAC,sBAAsB,EAAE,qBAAqB,CAAC,CAAC;SAC9E;QACD,oBAAoB,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC7D,CAAC;IACD;;OAEG;IACH,YAAY,CAAC,SAAiB;QAC5B,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE;YACtC,MAAM,IAAI,mBAAmB,CAAC,sBAAsB,EAAE,cAAc,CAAC,CAAC;SACvE;QACD,oBAAoB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;CACF,CAAC","sourcesContent":["import { NativeModulesProxy } from 'expo-core';\nimport { UnavailabilityError } from 'expo-errors';\n\nlet { CTKAdSettingsManager } = NativeModulesProxy;\n\nCTKAdSettingsManager = CTKAdSettingsManager || {};\n\nexport type AdLogLevel = 'none' | 'debug' | 'verbose' | 'warning' | 'error' | 'notification';\n\n// TODO: rewrite the docblocks\nexport default {\n  /**\n   * Contains hash of the device id\n   */\n  get currentDeviceHash(): string | null {\n    return CTKAdSettingsManager ? CTKAdSettingsManager.currentDeviceHash : null;\n  },\n\n  /**\n   * Registers given device with `deviceHash` to receive test Facebook ads.\n   */\n  addTestDevice(deviceHash: string): void {\n    if (!CTKAdSettingsManager.addTestDevice) {\n      throw new UnavailabilityError('CTKAdSettingsManager', 'addTestDevice');\n    }\n    CTKAdSettingsManager.addTestDevice(deviceHash);\n  },\n  /**\n   * Clears previously set test devices\n   */\n  clearTestDevices(): void {\n    if (!CTKAdSettingsManager.clearTestDevices) {\n      throw new UnavailabilityError('CTKAdSettingsManager', 'clearTestDevices');\n    }\n    CTKAdSettingsManager.clearTestDevices();\n  },\n  /**\n   * Sets current SDK log level\n   */\n  setLogLevel(logLevel: AdLogLevel): void {\n    if (!CTKAdSettingsManager.setLogLevel) {\n      throw new UnavailabilityError('CTKAdSettingsManager', 'setLogLevel');\n    }\n    CTKAdSettingsManager.setLogLevel(logLevel);\n  },\n  /**\n   * Specifies whether ads are treated as child-directed\n   */\n  setIsChildDirected(isDirected: boolean): void {\n    if (!CTKAdSettingsManager.setIsChildDirected) {\n      throw new UnavailabilityError('CTKAdSettingsManager', 'setIsChildDirected');\n    }\n    CTKAdSettingsManager.setIsChildDirected(isDirected);\n  },\n  /**\n   * Sets mediation service name\n   */\n  setMediationService(mediationService: string): void {\n    if (!CTKAdSettingsManager.setMediationService) {\n      throw new UnavailabilityError('CTKAdSettingsManager', 'setMediationService');\n    }\n    CTKAdSettingsManager.setMediationService(mediationService);\n  },\n  /**\n   * Sets URL prefix\n   */\n  setUrlPrefix(urlPrefix: string): void {\n    if (!CTKAdSettingsManager.setUrlPrefix) {\n      throw new UnavailabilityError('CTKAdSettingsManager', 'setUrlPrefix');\n    }\n    CTKAdSettingsManager.setUrlPrefix(urlPrefix);\n  },\n};\n"]}