{"version":3,"file":"Platform.js","sourceRoot":"","sources":["../src/Platform.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,IAAI,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAE/D,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAiBvD,MAAM,QAAQ,GAAG;IACf;;;OAGG;IACH,EAAE,EAAE,mBAAmB,CAAC,EAAE;IAC1B;;;;;;;OAOG;IACH,MAAM,EAAE,mBAAmB,CAAC,MAAwB;IACpD;;;OAGG;IACH,cAAc;CACf,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import { Platform as ReactNativePlatform } from 'react-native';\n\nimport { isDOMAvailable } from './environment/browser';\n\nexport type PlatformOSType =\n  | 'ios'\n  | 'android'\n  | 'web'\n  | 'native'\n  | 'macos'\n  | 'windows'\n  | 'electron';\n\nexport type PlatformSelect = <T>(\n  specifics:\n    | ({ [platform in PlatformOSType]?: T } & { default: T })\n    | { [platform in PlatformOSType]: T }\n) => T;\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: ReactNativePlatform.select as PlatformSelect,\n  /**\n   * Used for delegating node actions when browser APIs aren't available\n   * like in SSR websites. DOM is not available in native React runtimes.\n   */\n  isDOMAvailable,\n};\n\nexport default Platform;\n"]}