{"version":3,"file":"Camera.types.js","sourceRoot":"","sources":["../src/Camera.types.ts"],"names":[],"mappings":"AACA,OAAO,EAEL,gBAAgB,GAEjB,MAAM,kCAAkC,CAAC;AAE1C,MAAM,CAAN,IAAY,UASX;AATD,WAAY,UAAU;IACpB;;OAEG;IACH,6BAAe,CAAA;IACf;;OAEG;IACH,2BAAa,CAAA;AACf,CAAC,EATW,UAAU,KAAV,UAAU,QASrB;AAED,MAAM,CAAN,IAAY,SAiBX;AAjBD,WAAY,SAAS;IACnB;;OAEG;IACH,sBAAS,CAAA;IACT;;OAEG;IACH,wBAAW,CAAA;IACX;;OAEG;IACH,0BAAa,CAAA;IACb;;OAEG;IACH,4BAAe,CAAA;AACjB,CAAC,EAjBW,SAAS,KAAT,SAAS,QAiBpB;AAED,MAAM,CAAN,IAAY,SAiBX;AAjBD,WAAY,SAAS;IACnB;;OAEG;IACH,sBAAS,CAAA;IACT;;OAEG;IACH,wBAAW,CAAA;IACX;;OAEG;IACH,0BAAa,CAAA;IACb;;OAEG;IACH,sCAAyB,CAAA;AAC3B,CAAC,EAjBW,SAAS,KAAT,SAAS,QAiBpB;AAED,MAAM,CAAN,IAAY,YAiCX;AAjCD,WAAY,YAAY;IACtB;;OAEG;IACH,6BAAa,CAAA;IACb;;OAEG;IACH,+BAAe,CAAA;IACf;;OAEG;IACH,iCAAiB,CAAA;IACjB;;OAEG;IACH,iCAAiB,CAAA;IACjB;;OAEG;IACH,6CAA6B,CAAA;IAC7B;;OAEG;IACH,2CAA2B,CAAA;IAC3B;;OAEG;IACH,yCAAyB,CAAA;IACzB;;OAEG;IACH,iCAAiB,CAAA;AACnB,CAAC,EAjCW,YAAY,KAAZ,YAAY,QAiCvB;AAED,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,wBAAW,CAAA;IACX,wBAAW,CAAA;AACb,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB;AAwLD,OAAO,EAAsB,gBAAgB,EAAwB,CAAC","sourcesContent":["import { ViewProps } from 'react-native';\r\nimport {\r\n  PermissionResponse,\r\n  PermissionStatus,\r\n  PermissionExpiration,\r\n} from 'unimodules-permissions-interface';\r\n\r\nexport enum CameraType {\r\n  /**\r\n   * @platforms ios, android, web\r\n   */\r\n  front = 'front',\r\n  /**\r\n   * @platforms ios, android, web\r\n   */\r\n  back = 'back',\r\n}\r\n\r\nexport enum FlashMode {\r\n  /**\r\n   * @platforms ios, android, web\r\n   */\r\n  on = 'on',\r\n  /**\r\n   * @platforms ios, android, web\r\n   */\r\n  off = 'off',\r\n  /**\r\n   * @platforms ios, android, web\r\n   */\r\n  auto = 'auto',\r\n  /**\r\n   * @platforms ios, android, web\r\n   */\r\n  torch = 'torch',\r\n}\r\n\r\nexport enum AutoFocus {\r\n  /**\r\n   * @platforms ios, android, web\r\n   */\r\n  on = 'on',\r\n  /**\r\n   * @platforms ios, android, web\r\n   */\r\n  off = 'off',\r\n  /**\r\n   * @platforms web\r\n   */\r\n  auto = 'auto',\r\n  /**\r\n   * @platforms web\r\n   */\r\n  singleShot = 'singleShot',\r\n}\r\n\r\nexport enum WhiteBalance {\r\n  /**\r\n   * @platforms ios, android, web\r\n   */\r\n  auto = 'auto',\r\n  /**\r\n   * @platforms ios, android\r\n   */\r\n  sunny = 'sunny',\r\n  /**\r\n   * @platforms ios, android\r\n   */\r\n  cloudy = 'cloudy',\r\n  /**\r\n   * @platforms ios, android\r\n   */\r\n  shadow = 'shadow',\r\n  /**\r\n   * @platforms ios, android\r\n   */\r\n  incandescent = 'incandescent',\r\n  /**\r\n   * @platforms ios, android\r\n   */\r\n  fluorescent = 'fluorescent',\r\n  /**\r\n   * @platforms web\r\n   */\r\n  continuous = 'continuous',\r\n  /**\r\n   * @platforms web\r\n   */\r\n  manual = 'manual',\r\n}\r\n\r\nexport enum ImageType {\r\n  png = 'png',\r\n  jpg = 'jpg',\r\n}\r\n\r\nexport type ImageParameters = {\r\n  imageType: ImageType;\r\n  quality: number | null;\r\n};\r\n\r\nexport type ImageSize = {\r\n  width: number;\r\n  height: number;\r\n};\r\n\r\nexport type WebCameraSettings = Partial<{\r\n  autoFocus: string;\r\n  flashMode: string;\r\n  whiteBalance: string;\r\n  exposureCompensation: number;\r\n  colorTemperature: number;\r\n  iso: number;\r\n  brightness: number;\r\n  contrast: number;\r\n  saturation: number;\r\n  sharpness: number;\r\n  focusDistance: number;\r\n  zoom: number;\r\n}>;\r\n\r\nexport type CapturedPicture = {\r\n  width: number;\r\n  height: number;\r\n  uri: string;\r\n  base64?: string;\r\n  // note(bacon): The types are currently only defined for web.\r\n  exif?: Partial<MediaTrackSettings>;\r\n};\r\n\r\nexport type CameraPictureOptions = {\r\n  quality?: number;\r\n  base64?: boolean;\r\n  exif?: boolean;\r\n  onPictureSaved?: (picture: CameraCapturedPicture) => void;\r\n  // TODO(Bacon): Is it possible to implement this in the browser?\r\n  skipProcessing?: boolean;\r\n  // Web-only\r\n  scale?: number;\r\n  imageType?: ImageType;\r\n  isImageMirror?: boolean;\r\n  // internal\r\n  id?: number;\r\n  fastMode?: boolean;\r\n};\r\n\r\nexport type CameraRecordingOptions = {\r\n  maxDuration?: number;\r\n  maxFileSize?: number;\r\n  quality?: number | string;\r\n  mute?: boolean;\r\n  mirror?: boolean;\r\n  // Android\r\n  videoBitrate?: number;\r\n};\r\n\r\nexport type CameraCapturedPicture = {\r\n  width: number;\r\n  height: number;\r\n  uri: string;\r\n  base64?: string;\r\n  exif?: any;\r\n};\r\n\r\nexport type PictureSavedListener = (event: {\r\n  nativeEvent: { data: CapturedPicture; id: number };\r\n}) => void;\r\n\r\nexport type CameraReadyListener = () => void;\r\n\r\nexport type MountErrorListener = (event: { nativeEvent: CameraMountError }) => void;\r\n\r\nexport type CameraMountError = { message: string };\r\n\r\ntype Point = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\nexport type BarCodePoint = Point;\r\n\r\nexport type BarCodeScanningResult = {\r\n  type: string;\r\n  data: string;\r\n  /** @platform web */\r\n  cornerPoints?: BarCodePoint[];\r\n};\r\n\r\nexport type Face = {\r\n  faceID: number;\r\n  bounds: {\r\n    origin: Point;\r\n    size: {\r\n      height: number;\r\n      width: number;\r\n    };\r\n  };\r\n  rollAngle: number;\r\n  yawAngle: number;\r\n  smilingProbability: number;\r\n  leftEarPosition: Point;\r\n  rightEarPosition: Point;\r\n  leftEyePosition: Point;\r\n  leftEyeOpenProbability: number;\r\n  rightEyePosition: Point;\r\n  rightEyeOpenProbability: number;\r\n  leftCheekPosition: Point;\r\n  rightCheekPosition: Point;\r\n  mouthPosition: Point;\r\n  leftMouthPosition: Point;\r\n  rightMouthPosition: Point;\r\n  noseBasePosition: Point;\r\n};\r\n\r\nexport type FaceDetectionResult = { faces: Face[] };\r\n\r\nexport type ConstantsType = {\r\n  Type: typeof CameraType;\r\n  FlashMode: typeof FlashMode;\r\n  AutoFocus: typeof AutoFocus;\r\n  WhiteBalance: typeof WhiteBalance;\r\n  VideoQuality: any;\r\n  VideoStabilization: any;\r\n};\r\n\r\nexport type CameraProps = ViewProps & {\r\n  type?: number | keyof typeof CameraType;\r\n  flashMode?: number | keyof typeof FlashMode;\r\n  whiteBalance?: number | keyof typeof WhiteBalance;\r\n  autoFocus?: boolean | number | keyof typeof AutoFocus;\r\n  zoom?: number;\r\n  ratio?: string;\r\n  focusDepth?: number;\r\n  onCameraReady?: Function;\r\n  useCamera2Api?: boolean;\r\n  pictureSize?: string;\r\n  videoStabilizationMode?: number;\r\n  onMountError?: (event: CameraMountError) => void;\r\n  barCodeScannerSettings?: object;\r\n  onBarCodeScanned?: (scanningResult: BarCodeScanningResult) => void;\r\n  faceDetectorSettings?: object;\r\n  onFacesDetected?: (faces: FaceDetectionResult) => void;\r\n  poster?: string;\r\n};\r\n\r\nexport type CameraNativeProps = {\r\n  pointerEvents?: any;\r\n  style?: any;\r\n  ref?: Function;\r\n  onCameraReady?: CameraReadyListener;\r\n  onMountError?: MountErrorListener;\r\n  onBarCodeScanned?: (event: { nativeEvent: BarCodeScanningResult }) => void;\r\n  onFacesDetected?: (event: { nativeEvent: FaceDetectionResult }) => void;\r\n  onFaceDetectionError?: (event: { nativeEvent: Error }) => void;\r\n  onPictureSaved?: PictureSavedListener;\r\n  type?: number | string;\r\n  flashMode?: number | string;\r\n  autoFocus?: string | boolean | number;\r\n  focusDepth?: number;\r\n  zoom?: number;\r\n  whiteBalance?: number | string;\r\n  pictureSize?: string;\r\n  barCodeScannerSettings?: BarCodeSettings;\r\n  faceDetectorSettings?: object;\r\n  barCodeScannerEnabled?: boolean;\r\n  faceDetectorEnabled?: boolean;\r\n  // Android\r\n  ratio?: string;\r\n  useCamera2Api?: boolean;\r\n  // Web\r\n  poster?: string;\r\n};\r\n\r\nexport type BarCodeSettings = {\r\n  barCodeTypes: string[];\r\n  interval?: number;\r\n};\r\n\r\nexport { PermissionResponse, PermissionStatus, PermissionExpiration };\r\n"]}