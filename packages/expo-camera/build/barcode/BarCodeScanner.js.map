{"version":3,"file":"BarCodeScanner.js","sourceRoot":"","sources":["../../src/barcode/BarCodeScanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { CameraPictureOptions, BarCodeSettings } from '../Camera.types';\nimport * as Utils from '../WebCameraUtils';\nimport BarcodeScannerWorker from './BarCodeScannerWorker';\nimport { WebWorker } from './WorkerUtils';\n\nexport default class BarCodeScanner {\n  canvas?: HTMLCanvasElement;\n  drawBarcodeOptions: any;\n  private webWorker?: WebWorker;\n  private barcodeLoop?: number;\n  public isImageMirrored: boolean = false;\n\n  constructor(private videoElement: HTMLVideoElement) {}\n\n  private scanForBarcodes(types: string[], config: CameraPictureOptions = {}) {\n    if (!this.webWorker) {\n      throw new Error('Cannot process a barcode before the worker has been created.');\n    }\n    const image = Utils.captureImageData(this.videoElement, config);\n    this.invokeWorker({ image, types, options: { inversionAttempts: 'dontInvert' } });\n  }\n\n  private invokeWorker(payload: any) {\n    if (!this.webWorker || !payload) return;\n    this.webWorker.postMessage({ module: 'expo-barcode-scanner', payload });\n  }\n\n  startScanner(settings: BarCodeSettings, callback: (results: any) => void) {\n    if (this.webWorker) {\n      this.stopScanner();\n    }\n    // Initiate web worker execute handler according to mode.\n    this.webWorker = new WebWorker(BarcodeScannerWorker);\n\n    this.webWorker.onmessage = event => {\n      if (callback && this.webWorker) {\n        if (event && Array.isArray(event.data)) {\n          let context: CanvasRenderingContext2D | undefined;\n          if (settings.shouldRenderIndicator && this.canvas) {\n            const { videoWidth, videoHeight } = this.videoElement;\n            const elementWidth: number = this.videoElement.offsetWidth;\n            const elementHeight: number = this.videoElement.offsetHeight;\n\n            const videoRatio = scaleAspectFill(\n              videoWidth,\n              videoHeight,\n              elementWidth,\n              elementHeight\n            );\n\n            this.canvas.width = elementWidth;\n            this.canvas.height = elementHeight;\n\n            const dW = videoWidth * videoRatio;\n            const dH = videoHeight * videoRatio;\n\n            const diffW = elementWidth - dW;\n            const diffH = elementHeight - dH;\n            const xScale = (elementWidth - diffW) / videoWidth;\n            const yScale = (elementHeight - diffH) / videoHeight;\n\n            const xOffset = diffW * 0.5;\n            const yOffset = diffH * 0.5;\n\n            context = this.canvas.getContext('2d')!;\n            context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n            context.save();\n            if (this.isImageMirrored) {\n              context.setTransform(-1, 0, 0, 1, this.canvas.width, 0);\n            }\n\n            // DEBUG: Screen bounds\n            // context.strokeStyle = 'rgba(200, 0, 0, 1)';\n            // context.strokeRect(20, 20, this.canvas.width - 40, this.canvas.height - 40);\n\n            context.save();\n            context.translate(xOffset, yOffset);\n            context.scale(xScale, yScale);\n\n            // DEBUG: If this doesn't match the edges, something is wrong\n            // context.strokeStyle = 'rgba(0, 200, 0, 1)';\n            // context.strokeRect(0, 0, videoWidth, videoHeight);\n          }\n          for (const result of event.data) {\n            if (context) {\n              Utils.drawBarcodeBounds(context, result.location, this.drawBarcodeOptions);\n            }\n            callback(result);\n          }\n\n          if (context) {\n            // Restore the transform\n            context.restore();\n          }\n        }\n        // If interval is 0 then only scan once.\n        if (settings.interval) {\n          if (settings.interval < 0) {\n            this.scanForBarcodes(settings.barCodeTypes);\n          } else {\n            // @ts-ignore: Type 'Timeout' is not assignable to type 'number'.\n            this.barcodeLoop = setTimeout(() => {\n              this.scanForBarcodes(settings.barCodeTypes);\n            }, settings.interval);\n          }\n        }\n        return;\n      }\n\n      this.stopScanner();\n    };\n\n    // Invoke the initial scan\n    this.scanForBarcodes(settings.barCodeTypes);\n  }\n\n  stopScanner() {\n    clearTimeout(this.barcodeLoop);\n\n    // Stop web-worker and clear the component\n    if (this.webWorker) {\n      this.webWorker.terminate();\n      this.webWorker = undefined;\n    }\n    // Clear drawn bounds\n    if (this.canvas) {\n      const context = this.canvas.getContext('2d')!;\n      context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n}\n\nfunction scaleAspectFill(imgW: number, imgH: number, maxW: number, maxH: number): number {\n  return Math.max(maxW / imgW, maxH / imgH);\n}\n"]}