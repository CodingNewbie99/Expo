{"version":3,"file":"BarCodeScannerWorker.js","sourceRoot":"","sources":["../../src/barcode/BarCodeScannerWorker.ts"],"names":[],"mappings":"AAAA,uBAAuB;AAIvB,eAAe,GAAG,EAAE;IAClB,aAAa;IACb,IAAI,CAAC,aAAa,CAAC,2CAA2C,CAAC,CAAC;IAEhE,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAS,CAAC;QACzC,IAAI,CAAC,CAAC;YAAE,OAAO;QACf,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,sBAAsB,EAAE;YACtD,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC;YAEhC,MAAM,OAAO,GAAU,EAAE,CAAC;YAC1B,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;YAC1C,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACnC,aAAa;gBACb,WAAW,CAAC,OAAO,CAAC,CAAC;gBACrB,OAAO;aACR;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACrC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,QAAQ,IAAI,EAAE;oBACZ,0BAA0B;oBAC1B,KAAK,IAAI;wBACP;4BACE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;4BACrE,IAAI,OAAO,EAAE;gCACX,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;gCACpB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;6BACvB;yBACF;wBACD,MAAM;oBACR;wBACE,wDAAwD;wBACxD,MAAM;iBACT;aACF;YACD,aAAa;YACb,WAAW,CAAC,OAAO,CAAC,CAAC;SACtB;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["/* eslint-env worker */\n\ndeclare var jsQR: Function;\n\nexport default () => {\n  // @ts-ignore\n  self.importScripts('https://unpkg.com/jsqr@1.2.0/dist/jsQR.js');\n\n  self.addEventListener('message', function(e) {\n    if (!e) return;\n    if (e.data && e.data.module === 'expo-barcode-scanner') {\n      const { payload = {} } = e.data;\n\n      const results: any[] = [];\n      const { image, types, options } = payload;\n      if (!image || !Array.isArray(types)) {\n        // @ts-ignore\n        postMessage(results);\n        return;\n      }\n\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        switch (type) {\n          // TODO: Bacon: Add pdf417\n          case 'qr':\n            {\n              const decoded = jsQR(image.data, image.width, image.height, options);\n              if (decoded) {\n                decoded.type = type;\n                results.push(decoded);\n              }\n            }\n            break;\n          default:\n            // throw new Error('Unsupported barcode type: ' + type);\n            break;\n        }\n      }\n      // @ts-ignore\n      postMessage(results);\n    }\n  });\n};\n"]}