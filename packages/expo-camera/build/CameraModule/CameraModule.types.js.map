{"version":3,"file":"CameraModule.types.js","sourceRoot":"","sources":["../../src/CameraModule/CameraModule.types.ts"],"names":[],"mappings":"AAAA,MAAM,CAAN,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,6BAAe,CAAA;IACf,2BAAa,CAAA;AACf,CAAC,EAHW,UAAU,KAAV,UAAU,QAGrB;AAED,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,wBAAW,CAAA;IACX,wBAAW,CAAA;AACb,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB","sourcesContent":["export enum CameraType {\n  front = 'front',\n  back = 'back',\n}\n\nexport enum ImageType {\n  png = 'png',\n  jpg = 'jpg',\n}\n\nexport type ImageParameters = {\n  imageType: ImageType;\n  quality: number | null;\n};\n\nexport type ImageSize = {\n  width: number;\n  height: number;\n};\n\nexport type CaptureOptions = {\n  quality?: number;\n  exif?: boolean;\n  onPictureSaved?: Function;\n  // TODO(Bacon): Is it possible to implement this in the browser?\n  skipProcessing?: boolean;\n  // Web-only\n  scale: number;\n  imageType: ImageType;\n  isImageMirror: boolean;\n};\n\nexport type CapturedPicture = {\n  width: number;\n  height: number;\n  uri: string;\n  base64?: string;\n  exif?: Partial<MediaTrackSettings>;\n};\n\nexport type WebCameraSettings = Partial<{\n  autoFocus: string;\n  flashMode: string;\n  whiteBalance: string;\n  exposureCompensation: number;\n  colorTemperature: number;\n  iso: number;\n  brightness: number;\n  contrast: number;\n  saturation: number;\n  sharpness: number;\n  focusDistance: number;\n  zoom: number;\n}>;\n\nexport interface ConstrainLongRange {\n  max?: number;\n  min?: number;\n  exact?: number;\n  ideal?: number;\n}\n"]}