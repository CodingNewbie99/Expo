{"version":3,"file":"CameraModule.js","sourceRoot":"","sources":["../../src/CameraModule/CameraModule.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,WAAW,CAAC;AAGlC,OAAO,EAAE,UAAU,EAAmC,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAC9F,OAAO,KAAK,KAAK,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,sBAAsB,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AACnE,OAAO,KAAK,eAAe,MAAM,mBAAmB,CAAC;AAErD,OAAO,EAAE,SAAS,EAAE,UAAU,EAAkB,CAAC;AAkBjD,MAAM,YAAY;IA8FhB,YAAY,YAA8B;QA5F1C,WAAM,GAAuB,IAAI,CAAC;QAClC,aAAQ,GAA8B,IAAI,CAAC;QAC3C,kBAAa,GAA0B,GAAG,EAAE,GAAE,CAAC,CAAC;QAChD,iBAAY,GAAyB,GAAG,EAAE,GAAE,CAAC,CAAC;QAE9C,sBAAiB,GAAG,KAAK,CAAC;QAE1B,eAAU,GAAW,YAAY,CAAC;QAYlC,eAAU,GAAW,KAAK,CAAC;QAY3B,kBAAa,GAAW,YAAY,CAAC;QAcrC,gBAAW,GAAe,UAAU,CAAC,KAAK,CAAC;QAc3C,UAAK,GAAW,CAAC,CAAC;QAqKlB,oDAAoD;QACpD,6BAAwB,GAAG,KAAK,EAAE,KAAa,EAAqB,EAAE;YACpE,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC;QAEF,YAAO,GAAG,GAAG,EAAE;YACb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC;QA3IA,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,GAAG,EAAE;gBACxD,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAChC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IA3FD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,KAAK,CAAC,iBAAiB,CAAC,KAAa;QACnC,IAAI,KAAK,KAAK,IAAI,CAAC,SAAS,EAAE;YAC5B,OAAO;SACR;QACD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;IACtC,CAAC;IAGD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,KAAK,CAAC,iBAAiB,CAAC,KAAa;QACnC,IAAI,KAAK,KAAK,IAAI,CAAC,SAAS,EAAE;YAC5B,OAAO;SACR;QACD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;IACtC,CAAC;IAID,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,KAAa;QACtC,IAAI,KAAK,KAAK,IAAI,CAAC,YAAY,EAAE;YAC/B,OAAO;SACR;QACD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;IACtC,CAAC;IAID,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,KAAiB;QAClC,IAAI,KAAK,KAAK,IAAI,CAAC,WAAW,EAAE;YAC9B,OAAO;SACR;QACD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAID,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,KAAa;QAC9B,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,EAAE;YACvB,OAAO;SACR;QACD,yCAAyC;QACzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;IACtC,CAAC;IAED,cAAc,CAAC,KAAa;QAC1B,IAAI,KAAK,KAAK,IAAI,CAAC,YAAY,EAAE;YAC/B,OAAO;SACR;QACD,SAAS,CACP,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAC5B,qEAAqE,KAAK,sBAAsB,YAAY,CAAC,IAAI,CAC/G,IAAI,CACL,EAAE,CACJ,CAAC;QAEF,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACzC,kBAAkB;QAClB,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;QAE3D,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC5B,CAAC;IAWD,KAAK,CAAC,mBAAmB,CAAC,KAAuB;QAC/C,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,EAAS,CAAC;QAEpD,uGAAuG;QACvG,MAAM,WAAW,GAKb,EAAE,CAAC;QAEP,IAAI,YAAY,CAAC,IAAI,EAAE;YACrB,4FAA4F;YAC5F,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,YAAY,CAAC,IAAI,CAAC;YACvC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SAC7D;QACD,IAAI,YAAY,CAAC,SAAS,EAAE;YAC1B,WAAW,CAAC,SAAS,GAAG,eAAe,CAAC,4BAA4B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACtF;QACD,IAAI,YAAY,CAAC,KAAK,EAAE;YACtB,WAAW,CAAC,KAAK,GAAG,eAAe,CAAC,4BAA4B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAClF;QACD,IAAI,YAAY,CAAC,YAAY,EAAE;YAC7B,WAAW,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;SAC9C;QAED,MAAM,KAAK,CAAC,gBAAgB,CAAC,EAAE,QAAQ,EAAE,CAAC,WAAW,CAAQ,EAAE,CAAC,CAAC;IACnE,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAC1F;IACH,CAAC;IAED,cAAc,CAAC,MAA+C;QAC5D,IAAI,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE;YACpC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,MAAM,CAAC;SACtC;aAAM;YACL,+BAA+B;YAC9B,IAAI,CAAC,YAAY,CAAC,KAAK,CAAS,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;SACxE;IACH,CAAC;IAED,WAAW,CAAC,MAA0B;QACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE;YACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;SAC1D;IACH,CAAC;IAED,SAAS,CAAC,MAA0B;QAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACzB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAED,mBAAmB;QACjB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,gGAAgG;YAChG,MAAM,EAAE,UAAU,GAAG,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9C,OAAO,sBAAsB,CAAC,UAAU,CAAC,CAAC;SAC3C;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,0BAA0B;QAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;SAC5B;IACH,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,OAAO,IAAI,CAAC;SACb;QACD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,IAAI;YACF,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACvB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,YAAY,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC;SAC3C;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,WAAW,CAAC,MAAsB;QAChC,MAAM,MAAM,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAE7D,MAAM,eAAe,GAAoB;YACvC,GAAG,EAAE,MAAM;YACX,MAAM;YACN,KAAK,EAAE,CAAC;YACR,MAAM,EAAE,CAAC;SACV,CAAC;QAEF,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YAChD,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;YAC9B,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;YAChC,0CAA0C;YAC1C,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;SACtC;QAED,IAAI,MAAM,CAAC,cAAc,EAAE;YACzB,MAAM,CAAC,cAAc,CAAC,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;SAClF;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,YAAY;QACV,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO;SACR;QACD,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;CAWF;AAED,eAAe,YAAY,CAAC","sourcesContent":["import invariant from 'invariant';\r\n\r\nimport { PictureOptions } from '../Camera.types';\r\nimport { CameraType, CapturedPicture, CaptureOptions, ImageType } from './CameraModule.types';\r\nimport * as Utils from './CameraUtils';\r\nimport { FacingModeToCameraType, PictureSizes } from './constants';\r\nimport * as CapabilityUtils from './CapabilityUtils';\r\n\r\nexport { ImageType, CameraType, CaptureOptions };\r\n\r\n/*\r\n * TODO: Bacon: Add more props for Android\r\n *\r\n * aspectRatio: { min (0.00033), max (4032) }\r\n * colorTemperature: MediaSettingsRange  (max: 7000, min: 2850, step: 50)\r\n * exposureCompensation: MediaSettingsRange (max: 2, min: -2, step: 0.1666666716337204)\r\n * exposureMode: 'continuous' | 'manual'\r\n * frameRate: { min: (1), max: (60) }\r\n * iso: MediaSettingsRange (max: 3200, min: 50, step: 1)\r\n * width: { min: 1, max}\r\n * height: { min: 1, max}\r\n */\r\n\r\ntype OnCameraReadyListener = () => void;\r\ntype OnMountErrorListener = ({ nativeEvent: Error }) => void;\r\n\r\nclass CameraModule {\r\n  videoElement: HTMLVideoElement;\r\n  stream: MediaStream | null = null;\r\n  settings: MediaTrackSettings | null = null;\r\n  onCameraReady: OnCameraReadyListener = () => {};\r\n  onMountError: OnMountErrorListener = () => {};\r\n  _pictureSize?: string;\r\n  _isStartingCamera = false;\r\n\r\n  _autoFocus: string = 'continuous';\r\n  get autoFocus(): string {\r\n    return this._autoFocus;\r\n  }\r\n  async setAutoFocusAsync(value: string): Promise<void> {\r\n    if (value === this.autoFocus) {\r\n      return;\r\n    }\r\n    this._autoFocus = value;\r\n    await this._syncTrackCapabilities();\r\n  }\r\n\r\n  _flashMode: string = 'off';\r\n  get flashMode(): string {\r\n    return this._flashMode;\r\n  }\r\n  async setFlashModeAsync(value: string): Promise<void> {\r\n    if (value === this.flashMode) {\r\n      return;\r\n    }\r\n    this._flashMode = value;\r\n    await this._syncTrackCapabilities();\r\n  }\r\n\r\n  _whiteBalance: string = 'continuous';\r\n\r\n  get whiteBalance(): string {\r\n    return this._whiteBalance;\r\n  }\r\n\r\n  async setWhiteBalanceAsync(value: string): Promise<void> {\r\n    if (value === this.whiteBalance) {\r\n      return;\r\n    }\r\n    this._whiteBalance = value;\r\n    await this._syncTrackCapabilities();\r\n  }\r\n\r\n  _cameraType: CameraType = CameraType.front;\r\n\r\n  get type(): CameraType {\r\n    return this._cameraType;\r\n  }\r\n\r\n  async setTypeAsync(value: CameraType) {\r\n    if (value === this._cameraType) {\r\n      return;\r\n    }\r\n    this._cameraType = value;\r\n    await this.resumePreview();\r\n  }\r\n\r\n  _zoom: number = 1;\r\n\r\n  get zoom(): number {\r\n    return this._zoom;\r\n  }\r\n\r\n  async setZoomAsync(value: number): Promise<void> {\r\n    if (value === this.zoom) {\r\n      return;\r\n    }\r\n    //TODO: Bacon: IMP on non-android devices\r\n    this._zoom = value;\r\n    await this._syncTrackCapabilities();\r\n  }\r\n\r\n  setPictureSize(value: string) {\r\n    if (value === this._pictureSize) {\r\n      return;\r\n    }\r\n    invariant(\r\n      PictureSizes.includes(value),\r\n      `expo-camera: CameraModule.setPictureSize(): invalid size supplied ${value}, expected one of: ${PictureSizes.join(\r\n        ', '\r\n      )}`\r\n    );\r\n\r\n    const [width, height] = value.split('x');\r\n    //TODO: Bacon: IMP\r\n    const aspectRatio = parseFloat(width) / parseFloat(height);\r\n\r\n    this._pictureSize = value;\r\n  }\r\n\r\n  constructor(videoElement: HTMLVideoElement) {\r\n    this.videoElement = videoElement;\r\n    if (this.videoElement) {\r\n      this.videoElement.addEventListener('loadedmetadata', () => {\r\n        this._syncTrackCapabilities();\r\n      });\r\n    }\r\n  }\r\n\r\n  async onCapabilitiesReady(track: MediaStreamTrack): Promise<void> {\r\n    const capabilities = track.getCapabilities() as any;\r\n\r\n    // Create an empty object because if you set a constraint that isn't available an error will be thrown.\r\n    const constraints: {\r\n      zoom?: number;\r\n      torch?: boolean;\r\n      whiteBalance?: string;\r\n      focusMode?: string;\r\n    } = {};\r\n\r\n    if (capabilities.zoom) {\r\n      // TODO: Bacon: We should have some async method for getting the (min, max, step) externally\r\n      const { min, max } = capabilities.zoom;\r\n      constraints.zoom = Math.min(max, Math.max(min, this._zoom));\r\n    }\r\n    if (capabilities.focusMode) {\r\n      constraints.focusMode = CapabilityUtils.convertAutoFocusJSONToNative(this.autoFocus);\r\n    }\r\n    if (capabilities.torch) {\r\n      constraints.torch = CapabilityUtils.convertFlashModeJSONToNative(this.flashMode);\r\n    }\r\n    if (capabilities.whiteBalance) {\r\n      constraints.whiteBalance = this.whiteBalance;\r\n    }\r\n\r\n    await track.applyConstraints({ advanced: [constraints] as any });\r\n  }\r\n\r\n  async _syncTrackCapabilities(): Promise<void> {\r\n    if (this.stream) {\r\n      await Promise.all(this.stream.getTracks().map(track => this.onCapabilitiesReady(track)));\r\n    }\r\n  }\r\n\r\n  setVideoSource(stream: MediaStream | MediaSource | Blob | null): void {\r\n    if ('srcObject' in this.videoElement) {\r\n      this.videoElement.srcObject = stream;\r\n    } else {\r\n      // TODO: Bacon: Check if needed\r\n      (this.videoElement['src'] as any) = window.URL.createObjectURL(stream);\r\n    }\r\n  }\r\n\r\n  setSettings(stream: MediaStream | null): void {\r\n    this.settings = null;\r\n    if (stream && this.stream) {\r\n      this.settings = this.stream.getTracks()[0].getSettings();\r\n    }\r\n  }\r\n\r\n  setStream(stream: MediaStream | null): void {\r\n    this.stream = stream;\r\n    this.setSettings(stream);\r\n    this.setVideoSource(stream);\r\n  }\r\n\r\n  getActualCameraType(): CameraType | null {\r\n    if (this.settings) {\r\n      // On desktop no value will be returned, in this case we should assume the cameraType is 'front'\r\n      const { facingMode = 'user' } = this.settings;\r\n      return FacingModeToCameraType[facingMode];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async ensureCameraIsRunningAsync(): Promise<void> {\r\n    if (!this.stream) {\r\n      await this.resumePreview();\r\n    }\r\n  }\r\n\r\n  async resumePreview(): Promise<MediaStream | null> {\r\n    if (this._isStartingCamera) {\r\n      return null;\r\n    }\r\n    this._isStartingCamera = true;\r\n    try {\r\n      this.pausePreview();\r\n      const stream = await Utils.getStreamDevice(this.type);\r\n      this.setStream(stream);\r\n      this._isStartingCamera = false;\r\n      this.onCameraReady();\r\n      return stream;\r\n    } catch (error) {\r\n      this._isStartingCamera = false;\r\n      this.onMountError({ nativeEvent: error });\r\n    }\r\n    return null;\r\n  }\r\n\r\n  takePicture(config: PictureOptions): CapturedPicture {\r\n    const base64 = Utils.captureImage(this.videoElement, config);\r\n\r\n    const capturedPicture: CapturedPicture = {\r\n      uri: base64,\r\n      base64,\r\n      width: 0,\r\n      height: 0,\r\n    };\r\n\r\n    if (this.settings) {\r\n      const { width = 0, height = 0 } = this.settings;\r\n      capturedPicture.width = width;\r\n      capturedPicture.height = height;\r\n      // TODO: Bacon: verify/enforce exif shape.\r\n      capturedPicture.exif = this.settings;\r\n    }\r\n\r\n    if (config.onPictureSaved) {\r\n      config.onPictureSaved({ nativeEvent: { data: capturedPicture, id: config.id } });\r\n    }\r\n    return capturedPicture;\r\n  }\r\n\r\n  pausePreview(): void {\r\n    if (!this.stream) {\r\n      return;\r\n    }\r\n    this.stream.getTracks().forEach(track => track.stop());\r\n    this.setStream(null);\r\n  }\r\n\r\n  // TODO: Bacon: we don't even use ratio in native...\r\n  getAvailablePictureSizes = async (ratio: string): Promise<string[]> => {\r\n    return PictureSizes;\r\n  };\r\n\r\n  unmount = () => {\r\n    this.settings = null;\r\n    this.stream = null;\r\n  };\r\n}\r\n\r\nexport default CameraModule;\r\n"]}