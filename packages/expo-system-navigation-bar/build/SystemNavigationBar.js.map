{"version":3,"file":"SystemNavigationBar.js","sourceRoot":"","sources":["../src/SystemNavigationBar.ts"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { EventEmitter, Platform, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { ColorValue, processColor } from 'react-native';\n\nimport ExpoSystemNavigationBar from './ExpoSystemNavigationBar';\nimport { Appearance, Visibility, Behavior, Position } from './SystemNavigationBar.types';\n\nconst emitter = new EventEmitter(ExpoSystemNavigationBar);\n\ntype VisibilityEvent = {\n  state: number;\n  visibility: 'visible' | 'hidden';\n};\n\nexport function addVisibilityListener(listener: (event: VisibilityEvent) => void): Subscription {\n  return emitter.addListener('ExpoSystemNavigationBar.didChange', listener);\n}\n\nconst assertIsOnPlatform = (functionName: string, onlyAvailableOn: typeof Platform['OS'][]) => {\n  if (!onlyAvailableOn.includes(Platform.OS)) {\n    throw new UnavailabilityError('ExpoSystemNavigationBar', functionName);\n  }\n};\n\n/**\n * Changes the navigation bar's background color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.setBackgroundColorAsync(\"white\");\n * ```\n */\nexport function setBackgroundColorAsync(color: ColorValue): Promise<void> {\n  assertIsOnPlatform('setBackgroundColorAsync', ['android']);\n  const colorNumber = processColor(color);\n  return ExpoSystemNavigationBar.setBackgroundColorAsync(colorNumber);\n}\n/**\n * Gets the navigation bar's background color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const color = await NavigationBar.getBackgroundColorAsync();\n * ```\n */\nexport function getBackgroundColorAsync(): Promise<ColorValue> {\n  assertIsOnPlatform('getBackgroundColorAsync', ['android']);\n  return ExpoSystemNavigationBar.getBackgroundColorAsync();\n}\n\n/**\n * Changes the navigation bar's border color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.setBorderColorAsync(\"red\");\n * ```\n */\nexport function setBorderColorAsync(color: ColorValue): Promise<void> {\n  assertIsOnPlatform('setBorderColorAsync', ['android']);\n  const colorNumber = processColor(color);\n  return ExpoSystemNavigationBar.setBorderColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's border color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const color = await NavigationBar.getBorderColorAsync();\n * ```\n */\nexport function getBorderColorAsync(): Promise<ColorValue | null> {\n  assertIsOnPlatform('getBorderColorAsync', ['android']);\n  return ExpoSystemNavigationBar.getBorderColorAsync();\n}\n\n/**\n * Set the navigation bar's visibility.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.setVisibilityAsync(\"hidden\");\n * ```\n */\nexport function setVisibilityAsync(visibility: Visibility): Promise<void> {\n  assertIsOnPlatform('setVisibilityAsync', ['android']);\n  return ExpoSystemNavigationBar.setVisibilityAsync(visibility);\n}\n\n/**\n * Get the navigation bar's visibility.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.setVisibilityAsync(\"hidden\");\n * ```\n */\nexport function getVisibilityAsync(): Promise<Visibility> {\n  assertIsOnPlatform('getVisibilityAsync', ['android']);\n  return ExpoSystemNavigationBar.getVisibilityAsync();\n}\n\n/**\n * Changes the navigation bar's foreground style between white and a dark gray color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * NavigationBar.setAppearanceAsync(\"light\");\n * ```\n */\nexport function setAppearanceAsync(style: Appearance): Promise<void> {\n  assertIsOnPlatform('setAppearanceAsync', ['android']);\n  return ExpoSystemNavigationBar.setAppearanceAsync(style);\n}\n/**\n * Gets the navigation bar's foreground style.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const style = await NavigationBar.getAppearanceAsync();\n * ```\n */\nexport function getAppearanceAsync(): Promise<Appearance> {\n  assertIsOnPlatform('getAppearanceAsync', ['android']);\n  return ExpoSystemNavigationBar.getAppearanceAsync();\n}\n\n/**\n * Sets positioning method used for the navigation bar (and status bar).\n * Setting position `absolute` will float the navigation bar above the content,\n * whereas position `relative` will shrink the screen to inline the navigation bar.\n *\n * When drawing behind the status and navigation bars, ensure the safe area insets are adjusted accordingly.\n *\n * @platform android\n *\n * @example\n * ```ts\n * // enables edge-to-edge mode\n * NavigationBar.setPositionAsync('absolute')\n * // transparent backgrounds to see through\n * NavigationBar.setBackgroundColorAsync('#ffffff00')\n * ```\n */\nexport function setPositionAsync(position: Position): Promise<void> {\n  assertIsOnPlatform('setPositionAsync', ['android']);\n  return ExpoSystemNavigationBar.setPositionAsync(position);\n}\n\n/**\n * Whether the navigation and status bars float above the app (absolute) or sit inline with it (relative).\n *\n * @platform android\n */\nexport function getPositionAsync(): Promise<Position> {\n  assertIsOnPlatform('getPositionAsync', ['android']);\n  return ExpoSystemNavigationBar.getPositionAsync();\n}\n\n/**\n * Sets the behavior of the status bar and navigation bar when they are hidden and the user wants to reveal them.\n *\n * For example, if the navigation bar is hidden (`setVisibilityAsync(false)`) and the behavior\n * is `'overlay-swipe'`, the user can swipe from the bottom of the screen to temporarily reveal the navigation bar.\n *\n * * `'overlay-swipe'`: Temporarily reveals the System UI after a swipe gesture (bottom or top) without insetting your App's content.\n * * `'inset-swipe'`: Reveals the System UI after a swipe gesture (bottom or top) and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n * * `'inset-touch'`: Reveals the System UI after a touch anywhere on the screen and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n *\n * @platform android\n */\nexport function setBehaviorAsync(behavior: Behavior): Promise<void> {\n  assertIsOnPlatform('getBehaviorAsync', ['android']);\n  return ExpoSystemNavigationBar.setBehaviorAsync(behavior);\n}\n\n/**\n * Gets the behavior of the status and navigation bars when the user swipes or touches the screen.\n *\n * @platform android\n */\nexport function getBehaviorAsync(): Promise<Behavior> {\n  assertIsOnPlatform('getBehaviorAsync', ['android']);\n  return ExpoSystemNavigationBar.getBehaviorAsync();\n}\n\nexport * from './SystemNavigationBar.types';\n\nexport function useVisibility() {\n  const [visibility, setVisible] = useState<Visibility | null>(null);\n\n  React.useEffect(() => {\n    let isMounted = true;\n    getVisibilityAsync().then((visibility) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    const listener = addVisibilityListener(({ visibility }) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    return () => {\n      listener.remove();\n      isMounted = false;\n    };\n  }, []);\n\n  return visibility;\n}\n"]}