{"version":3,"file":"Platform.js","sourceRoot":"","sources":["../src/Platform.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,QAAQ,IAAI,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAE/E,OAAO,EACL,cAAc,EACd,oBAAoB,EACpB,cAAc,EACd,gBAAgB,GACjB,MAAM,uBAAuB,CAAC;AAM/B,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,WAAW,EAAE;IACzD,OAAO,CAAC,IAAI,CACV,mHAAmH,CACpH,CAAC;CACH;AAED,MAAM,YAAY,GAChB,OAAO,MAAM,KAAK,WAAW;IAC3B,CAAC,CAAC,mBAAmB,CAAC,MAAM;IAC5B,CAAC,CAAC,uHAAuH;QACvH,8IAA8I;QAC9I,SAAS,MAAM,CAAI,SAAqD;YACtE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO;gBAAE,OAAO,SAAS,CAAC;YAC3C,IAAI,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBACjD,OAAO,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC;aACxC;iBAAM,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,KAAK,IAAI,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAC9E,OAAO,SAAS,CAAC,MAAO,CAAC;aAC1B;iBAAM,IAAI,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;gBAC9C,OAAO,SAAS,CAAC,OAAQ,CAAC;aAC3B;YACD,gBAAgB;YAChB,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC;AAER,MAAM,QAAQ,GAAG;IACf;;;OAGG;IACH,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,mBAAmB,CAAC,EAAE;IACjD;;;;;;;OAOG;IACH,MAAM,EAAE,YAA8B;IACtC;;;OAGG;IACH,cAAc;IACd;;;;OAIG;IACH,oBAAoB;IACpB;;;;OAIG;IACH,cAAc;IACd;;;OAGG;IACH,gBAAgB;CACjB,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import { PlatformOSType, Platform as ReactNativePlatform } from 'react-native';\n\nimport {\n  isDOMAvailable,\n  canUseEventListeners,\n  canUseViewport,\n  isAsyncDebugging,\n} from './environment/browser';\n\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\n\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\n\nif (__DEV__ && typeof process.env.EXPO_OS === 'undefined') {\n  console.warn(\n    `The global process.env.EXPO_OS is not defined. This should be inlined by babel-preset-expo during transformation.`\n  );\n}\n\nconst nativeSelect =\n  typeof window !== 'undefined'\n    ? ReactNativePlatform.select\n    : // process.env.EXPO_OS is injected by `babel-preset-expo` and available in both client and `react-server` environments.\n      // Opt to use the env var when possible, and fallback to the React Native Platform module when it's not (arbitrary bundlers and transformers).\n      function select<T>(specifics: { [platform in PlatformSelectOSType]?: T }): T | undefined {\n        if (!process.env.EXPO_OS) return undefined;\n        if (specifics.hasOwnProperty(process.env.EXPO_OS)) {\n          return specifics[process.env.EXPO_OS]!;\n        } else if (process.env.EXPO_OS !== 'web' && specifics.hasOwnProperty('native')) {\n          return specifics.native!;\n        } else if (specifics.hasOwnProperty('default')) {\n          return specifics.default!;\n        }\n        // do nothing...\n        return undefined;\n      };\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: process.env.EXPO_OS || ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: nativeSelect as PlatformSelect,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n  /**\n   * Denotes if the current environment can attach event listeners\n   * to the window. This will return false in native React\n   * runtimes and Node.js.\n   */\n  canUseEventListeners,\n  /**\n   * Denotes if the current environment can inspect properties of the\n   * screen on which the current window is being rendered. This will\n   * return false in native React runtimes and Node.js.\n   */\n  canUseViewport,\n  /**\n   * If the JavaScript is being executed in a remote JavaScript environment.\n   * When `true`, synchronous native invocations cannot be executed.\n   */\n  isAsyncDebugging,\n};\n\nexport default Platform;\n"]}