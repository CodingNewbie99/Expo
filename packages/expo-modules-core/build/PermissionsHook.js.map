{"version":3,"file":"PermissionsHook.js","sourceRoot":"","sources":["../src/PermissionsHook.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAsBjE;;;;GAIG;AACH,SAAS,aAAa,CACpB,OAAgE;IAEhE,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAW,IAAI,CAAC,CAAC;IACrD,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG,GAAG,IAAI,EAAE,OAAO,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC;IAE1E,MAAM,aAAa,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;QAC3C,IAAI,CAAC,SAAS;YAAE,OAAO,IAAI,CAAC;QAC5B,MAAM,QAAQ,GAAG,MAAM,SAAS,EAAE,CAAC;QACnC,IAAI,SAAS,CAAC,OAAO;YAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC3C,OAAO,QAAQ,CAAC;IAClB,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,MAAM,iBAAiB,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;QAC/C,IAAI,CAAC,aAAa;YAAE,OAAO,IAAI,CAAC;QAChC,MAAM,QAAQ,GAAG,MAAM,aAAa,EAAE,CAAC;QACvC,IAAI,SAAS,CAAC,OAAO;YAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC3C,OAAO,QAAQ,CAAC;IAClB,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAEpB,SAAS,CACP,SAAS,UAAU;QACjB,IAAI,OAAO;YAAE,iBAAiB,EAAE,CAAC;QACjC,IAAI,CAAC,OAAO,IAAI,GAAG;YAAE,aAAa,EAAE,CAAC;IACvC,CAAC,EACD,CAAC,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,CAAC,CACzC,CAAC;IAEF,+DAA+D;IAC/D,SAAS,CAAC,SAAS,QAAQ;QACzB,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;QACzB,OAAO,GAAG,EAAE;YACV,SAAS,CAAC,OAAO,GAAG,KAAK,CAAC;QAC5B,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,MAAM,EAAE,iBAAiB,EAAE,aAAa,CAAC,CAAC;AACpD,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,oBAAoB,CAClC,cAA+C;IAE/C,OAAO,CAAC,UAAiC,EAAE,EAAE,EAAE,CAC7C,aAAa,CAAI,EAAE,GAAG,cAAc,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;AACxD,CAAC","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { PermissionResponse } from './PermissionsInterface';\n\ninterface PermissionHookFactoryOptions<T extends PermissionResponse> {\n  /** The permission method that requests the user to grant permission. */\n  requestMethod?: () => Promise<T>;\n  /** The permission method that only fetches the current permission status. */\n  getMethod?: () => Promise<T>;\n}\n\nexport interface PermissionHookOptions {\n  /** If the hook should automatically fetch the current permission status, without asking the user. */\n  get?: boolean;\n  /** If the hook should automatically request the user to grant permission. */\n  request?: boolean;\n}\n\n// These types are identical, but improves the readability for suggestions in editors\ntype RequestPermissionMethod<T extends PermissionResponse> = () => Promise<T | null>;\ntype GetPermissionMethod<T extends PermissionResponse> = () => Promise<T | null>;\n\n/**\n * Get or request permission for protected functionality within the app.\n * It uses separate permission requesters to interact with a single permission.\n * By default, the hook will only retrieve the permission status.\n */\nfunction usePermission<T extends PermissionResponse>(\n  options: PermissionHookOptions & PermissionHookFactoryOptions<T>\n): [T | null, RequestPermissionMethod<T>, GetPermissionMethod<T>] {\n  const isMounted = useRef(true);\n  const [status, setStatus] = useState<T | null>(null);\n  const { getMethod, requestMethod, get = true, request = false } = options;\n\n  const getPermission = useCallback(async () => {\n    if (!getMethod) return null;\n    const response = await getMethod();\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [getMethod]);\n\n  const requestPermission = useCallback(async () => {\n    if (!requestMethod) return null;\n    const response = await requestMethod();\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [requestMethod]);\n\n  useEffect(\n    function runMethods() {\n      if (request) requestPermission();\n      if (!request && get) getPermission();\n    },\n    [get, request, getMethod, requestMethod]\n  );\n\n  // Workaround for unmounting components receiving state updates\n  useEffect(function didMount() {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [status, requestPermission, getPermission];\n}\n\n/**\n * Create a new permission hook with the permission methods built-in.\n * This can be used to quickly create specific permission hooks in every module.\n */\nexport function createPermissionHook<T extends PermissionResponse>(\n  factoryOptions: PermissionHookFactoryOptions<T>\n) {\n  return (options: PermissionHookOptions = {}) =>\n    usePermission<T>({ ...factoryOptions, ...options });\n}\n"]}