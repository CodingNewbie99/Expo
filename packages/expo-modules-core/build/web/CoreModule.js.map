{"version":3,"file":"CoreModule.js","sourceRoot":"","sources":["../../src/web/CoreModule.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAC/D,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAC/D,OAAO,IAAI,MAAM,SAAS,CAAC;AAE3B,MAAM,eAAe;IACX,SAAS,CAA0B;IAE3C;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED,cAAc,CACZ,SAAoB,EACpB,QAA+B;QAE/B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;IACD,kBAAkB,CAAqC,SAAoB;QACzE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC;IACzC,CAAC;IACD,IAAI,CACF,SAAoB,EACpB,GAAG,IAAuC;QAE1C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAC1E,CAAC;IACD,WAAW,CACT,SAAoB,EACpB,QAA+B;QAE/B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAClC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;SAC1C;QACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;CACF;AAED,MAAM,UAAU;IACd,OAAO,CAAsB;IAC7B,YAAY,CAAyB;IACrC,YAAY,CAAsB;IAClC,YAAY,CAAsB;IAClC;QACE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,eAAe,CAAC;IACtC,CAAC;IAED,aAAa,CAAC,QAAgB;QAI5B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,MAAM;QACJ,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC;IACnB,CAAC;IACD,MAAM,CAAC,IAAY,EAAE,SAA4B;QAC/C,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAClC,CAAC;CACF;AAED,UAAU,CAAC,IAAI,GAAG,IAAI,UAAU,EAAE,CAAC;AAEnC,eAAe,UAAU,CAAC","sourcesContent":["import { ExpoGlobal } from '..';\nimport { EventEmitter } from '../ts-declarations/EventEmitter';\nimport { NativeModule } from '../ts-declarations/NativeModule';\nimport { SharedObject } from '../ts-declarations/SharedObject';\nimport uuid from '../uuid';\n\nclass WebEventEmitter<TEventsMap extends Record<never, never>> implements EventEmitter {\n  private listeners: Map<any, Set<Function>>;\n\n  constructor() {\n    this.listeners = new Map();\n  }\n\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    this.listeners.get(eventName)?.delete(listener);\n  }\n  removeAllListeners<EventName extends keyof TEventsMap>(eventName: EventName): void {\n    this.listeners.get(eventName)?.clear();\n  }\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void {\n    this.listeners.get(eventName)?.forEach((listener) => listener(...args));\n  }\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, new Set());\n    }\n    this.listeners.get(eventName)?.add(listener);\n  }\n}\n\nclass CoreObject implements ExpoGlobal {\n  modules: Record<string, any>;\n  EventEmitter: typeof WebEventEmitter;\n  SharedObject: typeof SharedObject;\n  NativeModule: typeof NativeModule;\n  constructor() {\n    this.modules = {};\n    this.SharedObject = SharedObject;\n    this.NativeModule = NativeModule;\n    this.EventEmitter = WebEventEmitter;\n  }\n\n  getViewConfig(viewName: string): {\n    validAttributes: Record<string, any>;\n    directEventTypes: Record<string, { registrationName: string }>;\n  } | null {\n    throw new Error('Method not implemented.');\n  }\n  uuidv4() {\n    return uuid.v4();\n  }\n  uuidv5(name: string, namespace: string | number[]) {\n    return uuid.v5(name, namespace);\n  }\n}\n\nglobalThis.expo = new CoreObject();\n\nexport default CoreObject;\n"]}