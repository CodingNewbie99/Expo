{"version":3,"file":"global.js","sourceRoot":"","sources":["../../src/ts-declarations/global.ts"],"names":[],"mappings":"","sourcesContent":["import type { EventEmitter } from './EventEmitter';\nimport type { NativeModule } from './NativeModule';\nimport type { SharedObject } from './SharedObject';\n\ndeclare global {\n  /**\n   * Type definitions for the native modules that are installed in Apple runtime environments.\n   *\n   * ---\n   * **TypeScript types**: The TypeScript types for the Apple native module.\n   * ```ts\n   * declare global {\n   *   namespace AppleRuntime {\n   *     interface NativeAppIcon {\n   *       // Constants\n   *       isSupported: boolean;\n   *\n   *       // Methods\n   *       setAlternateIcon: (iconName: string | null) => Promise<string | null>;\n   *     }\n   *   }\n   * }\n   * ```\n   * ---\n   * **Swift module**: The module definition for the native module.\n   * ```swift\n   * import ExpoModulesCore\n   *\n   * public class NativeAppIconModule: Module {\n   *     public func definition() -> ModuleDefinition {\n   *         // Sets the name of the module in the global `expo.modules` object\n   *         Name(\"NativeAppIcon\")\n   *\n   *        // Constants\n   *         Constants([\n   *             \"isSupported\": UIApplication.shared.supportsAlternateIcons\n   *         ])\n   *\n   *         // Methods\n   *         AsyncFunction(\"setAlternateIcon\") { (name: String?, promise: Promise) in\n   *             // ...\n   *         }\n   *     }\n   * }\n   * ```\n   */\n  namespace AppleRuntime {}\n\n  /**\n   * Type definitions for the native modules that are installed in Android runtime environments.\n   *\n   * ---\n   * **TypeScript types**: The TypeScript types for the Android native module.\n   * ```ts\n   * declare global {\n   *   namespace AndroidRuntime {\n   *     interface NativeAppIcon {\n   *       // Constants\n   *       isSupported: boolean;\n   *\n   *       // Methods\n   *       setAlternateIcon: (iconName: string | null) => Promise<string | null>;\n   *     }\n   *   }\n   * }\n   * ```\n   * ---\n   * **Kotlin module**: The module definition for the native module.\n   * ```kotlin\n   * package expo.modules.haptics\n   *\n   * class NativeAppIconModule : Module() {\n   *\n   *   override fun definition() = ModuleDefinition {\n   *     Name(\"NativeAppIcon\")\n   *\n   *     Constants(\"isSupported\" to true)\n   *\n   *     AsyncFunction(\"setAlternateIcon\") { name: String ->\n   *       // ...\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  namespace AndroidRuntime {}\n\n  /**\n   * Interface for defining cross-platform native modules that are available on the global `expo.modules` object in custom native runtimes (iOS, Android clients).\n   * Third-party packages can extend this interface to add their own native modules to the global `expo.modules` object.\n   *\n   * Create a native module with:\n   * **`npx create-expo-module@latest --local`**\n   *\n   * Learn more: [creating a native module](https://docs.expo.dev/modules/get-started/).\n   *\n   *\n   * @example\n   * ```ts\n   * declare global {\n   *   namespace AppleRuntime {\n   *     interface NativeAppIcon {\n   *       setAlternateIcon: (iconName: string | null) => Promise<string | null>;\n   *     }\n   *   }\n   *\n   *   namespace AndroidRuntime {\n   *     interface NativeAppIcon {\n   *       setAlternateIcon: (iconName: string | null) => Promise<string | null>;\n   *     }\n   *   }\n   *\n   *   interface ExpoNativeModules {\n   *     NativeAppIcon: AndroidRuntime.NativeAppIcon | AppleRuntime.NativeAppIcon;\n   *   }\n   * }\n   * ```\n   */\n  interface ExpoNativeModules {}\n}\n\nexport interface ExpoGlobal {\n  /**\n   * Host object that is used to access native Expo modules.\n   */\n  modules: ExpoNativeModules;\n\n  // Natively defined JS classes\n\n  /**\n   * @see EventEmitter\n   */\n  EventEmitter: typeof EventEmitter;\n\n  /**\n   * @see SharedObject\n   */\n  SharedObject: typeof SharedObject;\n\n  /**\n   * @see NativeModule\n   */\n  NativeModule: typeof NativeModule;\n\n  // Utils\n\n  /**\n   * Generates a random UUID v4 string.\n   */\n  uuidv4(): string;\n\n  /**\n   * Generates a UUID v5 string representation of the value in the specified namespace.\n   */\n  uuidv5(name: string, namespace: string): string;\n\n  /**\n   * Returns a static view config of the native view with the given name\n   * or `null` if the view has not been registered.\n   */\n  getViewConfig(viewName: string): ViewConfig | null;\n}\n\ntype ViewConfig = {\n  validAttributes: Record<string, any>;\n  directEventTypes: Record<string, { registrationName: string }>;\n};\n\n/* eslint-disable no-var */\n\ndeclare global {\n  /**\n   * Global object containing all the native bindings installed by Expo.\n   * This object is not available in projects without the `expo` package installed.\n   */\n  var expo: ExpoGlobal;\n}\n"]}