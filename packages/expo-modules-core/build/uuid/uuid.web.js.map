{"version":3,"file":"uuid.web.js","sourceRoot":"","sources":["../../src/uuid/uuid.web.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,YAAY,CAAC;AAC9B,OAAO,GAAG,MAAM,WAAW,CAAC;AAC5B,OAAO,EAAQ,eAAe,EAAE,MAAM,cAAc,CAAC;AAErD,SAAS,MAAM;IACb;IACE,iDAAiD;IACjD,OAAO,MAAM,KAAK,WAAW;QAC7B,oDAAoD;QACpD,OAAO,MAAM,KAAK,WAAW,EAC7B;QACA,4FAA4F;QAC5F,gGAAgG;QAChG,0FAA0F;QAC1F,2EAA2E;QAC3E,mCAAmC;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,CAAC,UAAU,EAAE,CAAC;KACpD;IAED,OAAO,MAAM,CAAC,UAAU,EAAE,CAAC;AAC7B,CAAC;AAED,MAAM,IAAI,GAAS;IACjB,EAAE,EAAE,MAAM;IACV,EAAE,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACzB,SAAS,EAAE,eAAe;CAC3B,CAAC;AAEF,eAAe,IAAI,CAAC","sourcesContent":["import sha1 from './lib/sha1';\nimport v35 from './lib/v35';\nimport { UUID, Uuidv5Namespace } from './uuid.types';\n\nfunction uuidv4(): string {\n  if (\n    // Node.js has supported global crypto since v15.\n    typeof crypto === 'undefined' &&\n    // Only use abstract imports in server environments.\n    typeof window === 'undefined'\n  ) {\n    // NOTE: Metro statically extracts all `require` statements to resolve them for environments\n    // that don't support `require` natively. Here we check if we're running in a server environment\n    // by using the standard `typeof window` check, then running `eval` to skip Metro's static\n    // analysis and keep the `require` statement intact for runtime evaluation.\n    // eslint-disable-next-line no-eval\n    return eval('require')('node:crypto').randomUUID();\n  }\n\n  return crypto.randomUUID();\n}\n\nconst uuid: UUID = {\n  v4: uuidv4,\n  v5: v35('v5', 0x50, sha1),\n  namespace: Uuidv5Namespace,\n};\n\nexport default uuid;\n"]}