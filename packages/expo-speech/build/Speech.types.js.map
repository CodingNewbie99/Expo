{"version":3,"file":"Speech.types.js","sourceRoot":"","sources":["../src/Speech/Speech.types.ts"],"names":[],"mappings":"AA8CA,eAAe;AACf,MAAM,CAAN,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,mCAAmB,CAAA;IACnB,qCAAqB,CAAA;AACvB,CAAC,EAHW,YAAY,KAAZ,YAAY,QAGvB","sourcesContent":["export type SpeechEventCallback = (this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any;\n\n// @needsAudit @docsMissing\nexport type SpeechOptions = {\n  /**\n   * The code of a language that should be used to read the `text`, check out IETF BCP 47 to see\n   * valid codes.\n   */\n  language?: string;\n  /**\n   * Pitch of the voice to speak `text`. `1.0` is the normal pitch.\n   */\n  pitch?: number;\n  /**\n   * Rate of the voice to speak `text`. `1.0` is the normal rate.\n   */\n  rate?: number;\n  /**\n   * A callback that is invoked when speaking starts.\n   */\n  onStart?: () => void | SpeechEventCallback;\n  /**\n   * A callback that is invoked when speaking is stopped by calling `Speech.stop()`.\n   */\n  onStopped?: () => void | SpeechEventCallback;\n  /**\n   * A callback that is invoked when speaking finishes.\n   */\n  onDone?: () => void | SpeechEventCallback;\n  /**\n   * __(Android only).__ A callback that is invoked when an error occurred while speaking.\n   * @param error\n   */\n  onError?: (error: Error) => void | SpeechEventCallback;\n  volume?: number;\n  /**\n   * Voice identifier.\n   */\n  voice?: string;\n  _voiceIndex?: number;\n  onBoundary?: SpeechEventCallback | null;\n  onMark?: SpeechEventCallback | null;\n  onPause?: SpeechEventCallback | null;\n  onResume?: SpeechEventCallback | null;\n};\n\n// @docsMissing\nexport enum VoiceQuality {\n  Default = 'Default',\n  Enhanced = 'Enhanced',\n}\n\n// @docsMissing\nexport type Voice = {\n  identifier: string;\n  name: string;\n  quality: VoiceQuality;\n  language: string;\n};\n\n// @docsMissing\nexport type WebVoice = Voice & {\n  isDefault: boolean;\n  localService: boolean;\n  name: string;\n  voiceURI: string;\n};\n"]}