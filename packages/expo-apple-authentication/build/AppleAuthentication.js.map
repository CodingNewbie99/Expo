{"version":3,"file":"AppleAuthentication.js","sourceRoot":"","sources":["../src/AppleAuthentication.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgB,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACnF,OAAO,uBAAuB,MAAM,2BAA2B,CAAC;AAEhE,OAAO,EAML,4BAA4B,GAE7B,MAAM,6BAA6B,CAAC;AAErC;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,EAAE;QACzE,OAAO,KAAK,CAAC;KACd;IACD,OAAO,uBAAuB,CAAC,gBAAgB,EAAE,CAAC;AACpD,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,OAAwC;IACvE,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE;QACrE,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,YAAY,CAAC,CAAC;KAC1E;IACD,MAAM,cAAc,GAAG;QACrB,GAAG,OAAO;QACV,kBAAkB,EAAE,4BAA4B,CAAC,KAAK;KACvD,CAAC;IACF,OAAO,uBAAuB,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,OAA0C;IAC3E,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE;QACrE,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,cAAc,CAAC,CAAC;KAC5E;IACD,MAAM,cAAc,GAAG;QACrB,GAAG,OAAO;QACV,kBAAkB,EAAE,4BAA4B,CAAC,OAAO;KACzD,CAAC;IACF,OAAO,uBAAuB,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,OAAyC;IACzE,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE;QACrE,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,aAAa,CAAC,CAAC;KAC3E;IACD,MAAM,cAAc,GAAG;QACrB,GAAG,OAAO;QACV,kBAAkB,EAAE,4BAA4B,CAAC,MAAM;KACxD,CAAC;IACF,OAAO,uBAAuB,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;AAC9D,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,MAAc;IAC1D,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,CAAC,uBAAuB,EAAE;QAChF,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,yBAAyB,CAAC,CAAC;KACvF;IACD,OAAO,uBAAuB,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;AACjE,CAAC;AAED,MAAM,mCAAmC,GAAG,IAAI,YAAY,CAAC,uBAAuB,CAAC,CAAC;AAEtF;;;GAGG;AACH,MAAM,UAAU,iBAAiB,CAAC,QAA2C;IAC3E,OAAO,mCAAmC,CAAC,WAAW,CAAC,+BAA+B,EAAE,QAAQ,CAAC,CAAC;AACpG,CAAC","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from '@unimodules/core';\nimport ExpoAppleAuthentication from './ExpoAppleAuthentication';\n\nimport {\n  AppleAuthenticationLoginOptions,\n  AppleAuthenticationRefreshOptions,\n  AppleAuthenticationLogoutOptions,\n  AppleAuthenticationCredential,\n  AppleAuthenticationCredentialState,\n  AppleAuthenticationOperation,\n  AppleAuthenticationRevokeListener,\n} from './AppleAuthentication.types';\n\n/**\n * A method which returns a Promise which resolves to a boolean if you are able to perform a Sign In with Apple.\n * Generally users need to be on iOS 13+.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.isAvailableAsync) {\n    return false;\n  }\n  return ExpoAppleAuthentication.isAvailableAsync();\n}\n\n/**\n * Perform a Sign In with Apple request with the given `AppleAuthenticationLoginOptions`.\n * The method will return a Promise which will resolve to a `AppleAuthenticationCredential` on success.\n * You should make sure you include error handling.\n */\nexport async function loginAsync(options: AppleAuthenticationLoginOptions): Promise<AppleAuthenticationCredential> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.requestAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'loginAsync');\n  }\n  const requestOptions = {\n    ...options,\n    requestedOperation: AppleAuthenticationOperation.LOGIN,\n  };\n  return ExpoAppleAuthentication.requestAsync(requestOptions);\n}\n\nexport async function refreshAsync(options: AppleAuthenticationRefreshOptions): Promise<AppleAuthenticationCredential> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.requestAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'refreshAsync');\n  }\n  const requestOptions = {\n    ...options,\n    requestedOperation: AppleAuthenticationOperation.REFRESH,\n  };\n  return ExpoAppleAuthentication.requestAsync(requestOptions);\n}\n\nexport async function logoutAsync(options: AppleAuthenticationLogoutOptions): Promise<AppleAuthenticationCredential> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.requestAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'logoutAsync');\n  }\n  const requestOptions = {\n    ...options,\n    requestedOperation: AppleAuthenticationOperation.LOGOUT,\n  };\n  return ExpoAppleAuthentication.requestAsync(requestOptions);\n}\n\n/**\n * You can query the current state of a user ID.\n * It will tell you if the token is still valid or if it has been revoked by the user.\n *\n * @see [Apple Documention](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidprovider/3175423-getcredentialstateforuserid) for more details.\n */\nexport async function getCredentialStateAsync(userId: string): Promise<AppleAuthenticationCredentialState> {\n  if (!ExpoAppleAuthentication || !ExpoAppleAuthentication.getCredentialStateAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'getCredentialStateAsync');\n  }\n  return ExpoAppleAuthentication.getCredentialStateAsync(userId);\n}\n\nconst ExpoAppleAuthenticationEventEmitter = new EventEmitter(ExpoAppleAuthentication);\n\n/**\n * Adds a listener for when a token has been revoked.\n * This means that the user has signed out and you should update your UI to reflect this\n */\nexport function addRevokeListener(listener: AppleAuthenticationRevokeListener): Subscription {\n  return ExpoAppleAuthenticationEventEmitter.addListener('Expo.appleIdCredentialRevoked', listener);\n}\n"]}