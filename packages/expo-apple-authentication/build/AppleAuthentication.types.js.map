{"version":3,"file":"AppleAuthentication.types.js","sourceRoot":"","sources":["../src/AppleAuthentication.types.ts"],"names":[],"mappings":"AAsKA;;;;;;;;;;;GAWG;AACH,MAAM,CAAN,IAAY,wBAGX;AAHD,WAAY,wBAAwB;IAClC,iFAAa,CAAA;IACb,yEAAS,CAAA;AACX,CAAC,EAHW,wBAAwB,KAAxB,wBAAwB,QAGnC;AAED,MAAM,CAAN,IAAY,4BAQX;AARD,WAAY,4BAA4B;IACtC;;OAEG;IACH,uFAAY,CAAA;IACZ,iFAAS,CAAA;IACT,qFAAW,CAAA;IACX,mFAAU,CAAA;AACZ,CAAC,EARW,4BAA4B,KAA5B,4BAA4B,QAQvC;AAED;;;;;;;GAOG;AACH,MAAM,CAAN,IAAY,kCAKX;AALD,WAAY,kCAAkC;IAC5C,iGAAW,CAAA;IACX,uGAAc,CAAA;IACd,qGAAa,CAAA;IACb,yGAAe,CAAA;AACjB,CAAC,EALW,kCAAkC,KAAlC,kCAAkC,QAK7C;AAED;;;;;;;;GAQG;AACH,MAAM,CAAN,IAAY,sCAIX;AAJD,WAAY,sCAAsC;IAChD,iHAAe,CAAA;IACf,yGAAW,CAAA;IACX,iHAAe,CAAA;AACjB,CAAC,EAJW,sCAAsC,KAAtC,sCAAsC,QAIjD;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,6BAIX;AAJD,WAAY,6BAA6B;IACvC,uFAAW,CAAA;IACX,yFAAY,CAAA;IACZ,uFAAW,CAAA;AACb,CAAC,EAJW,6BAA6B,KAA7B,6BAA6B,QAIxC;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,8BAIX;AAJD,WAAY,8BAA8B;IACxC,qFAAS,CAAA;IACT,qGAAiB,CAAA;IACjB,qFAAS,CAAA;AACX,CAAC,EAJW,8BAA8B,KAA9B,8BAA8B,QAIzC;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,yBAGX;AAHD,WAAY,yBAAyB;IACnC,gDAAmB,CAAA;IACnB,8CAAiB,CAAA;AACnB,CAAC,EAHW,yBAAyB,KAAzB,yBAAyB,QAGpC","sourcesContent":["import { StyleProp, ViewStyle } from 'react-native';\n\nexport type AppleAuthenticationButtonProps = {\n  onPress: () => void;\n  buttonType: AppleAuthenticationButtonType;\n  buttonStyle: AppleAuthenticationButtonStyle;\n  cornerRadius?: number;\n  style?: StyleProp<ViewStyle>;\n}\n\n/**\n * The options you can supply when making a call to\n * `AppleAuthentication.loginAsync()`. None of these options are required.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest)\n * for more details.\n */\nexport type AppleAuthenticationLoginOptions = {\n  /**\n   * The scope of personal information to which your app is requesting access.\n   * The user can choose to deny your app access to any scope at the time of\n   * logging in.\n   * @defaults `[]` (no scopes).\n   */\n  requestedScopes?: AppleAuthenticationScope[];\n\n  /**\n   * Data that’s returned to you unmodified in the corresponding credential\n   * after a successful authentication. Used to verify that the response was\n   * from the request you made. Can be used to avoid replay attacks.\n   */\n  state?: string;\n}\n\n/**\n * The options you can supply when making a call to\n * `AppleAuthentication.refreshAsync()`. You must include the ID string of the\n * user whose credentials you'd like to refresh.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest)\n * for more details.\n */\nexport type AppleAuthenticationRefreshOptions = {\n  user: string;\n\n  /**\n   * The scope of personal information to which your app is requesting access.\n   * The user can choose to deny your app access to any scope at the time of\n   * refreshing.\n   * @defaults `[]` (no scopes).\n   */\n  requestedScopes?: AppleAuthenticationScope[];\n\n  /**\n   * Data that’s returned to you unmodified in the corresponding credential\n   * after a successful authentication. Used to verify that the response was\n   * from the request you made. Can be used to avoid replay attacks.\n   */\n  state?: string;\n}\n\n/**\n * The options you can supply when making a call to\n * `AppleAuthentication.logout()`. You must include the ID string of the user to\n * sign out.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest)\n * for more details.\n */\nexport type AppleAuthenticationLogoutOptions = {\n  user: string;\n\n  /**\n   * Data that’s returned to you unmodified in the corresponding credential\n   * after a successful authentication. Used to verify that the response was\n   * from the request you made. Can be used to avoid replay attacks.\n   */\n  state?: string;\n}\n\n/**\n * The user credentials returned from a successful call to\n * `AppleAuthentication.loginAsync()`, `AppleAuthentication.refreshAsync()`, or\n * `AppleAuthentication.logoutAsync()`.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidcredential)\n * for more details.\n */\nexport type AppleAuthenticationCredential = {\n  /**\n   * A value indicating the status type of the requested credential. `SUCCESS`\n   * if the credential was retrieved successfully, or `CANCEL` if the user\n   * canceled the operation before signing in.\n   */\n  type: AppleAuthenticationStatus;\n\n  /**\n   * An identifier associated with the authenticated user. You can use this to\n   * check if the user is still authenticated later. This is stable and can be\n   * shared across apps released under the same development team. The same user\n   * will have a different identifier for apps released by other developers.\n   */\n  user?: string;\n\n  /**\n   * An arbitrary string that your app provided as `state` in the request that\n   * generated the credential. Used to verify that the response was from the\n   * request you made. Can be used to avoid replay attacks.\n   */\n  state?: string;\n\n  /**\n   * The user’s name. May be null if you didn't request the `FULL_NAME` scope or\n   * if the user denied access. May also be null if this is not the first time\n   * the user has signed into your app.\n   */\n  fullName?: AppleAuthenticationFullName;\n\n  /**\n   * The user’s email address. Might not be present if you didn't request the\n   * `EMAIL` scope. May also be null if this is not the first time the user has\n   * signed into your app. If the user chose to withhold their email address,\n   * this field will instead contain an obscured email address with an Apple\n   * domain.\n   */\n  email?: string;\n\n  /**\n   * A value that indicates whether the user appears to the system to be a real\n   * person.\n   */\n  realUserStatus?: AppleAuthenticationUserDetectionStatus;\n\n  /**\n   * A JSON Web Token (JWT) that securely communicates information about the\n   * user to your app. Returns null except when a user logs in for the first\n   * time on web.\n   */\n  identityToken?: string;\n\n  /**\n   * A short-lived token used by your app for proof of authorization when\n   * interacting with the app’s server counterpart. Returns null except when a\n   * user logs in for the first time on web.\n   */\n  authorizationCode?: string;\n}\n\n/**\n * An object representing the tokenized portions of the user's full name.\n */\nexport type AppleAuthenticationFullName = {\n  namePrefix?: string;\n  givenName?: string;\n  middleName?: string;\n  familyName?: string;\n  nameSuffix?: string;\n  nickname?: string;\n}\n\nexport type AppleAuthenticationRevokeListener = () => void;\n\n/**\n * Scopes you can request when calling `AppleAuthentication.loginAsync()` or\n * `AppleAuthentication.refreshAsync()`.\n *\n * @note Note that it is possible that you will not be granted all of the scopes\n * which you request. You will still need to handle null values for any fields\n * you request.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationscope)\n * for more details.\n */\nexport enum AppleAuthenticationScope {\n  FULL_NAME = 0,\n  EMAIL = 1,\n}\n\nexport enum AppleAuthenticationOperation {\n  /**\n   * An operation that depends on the particular kind of credential provider.\n   */\n  IMPLICIT = 0,\n  LOGIN = 1,\n  REFRESH = 2,\n  LOGOUT = 3,\n}\n\n/**\n * The state of the credential when checked with\n * `AppleAuthentication.getCredentialStateAsync()`.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidprovidercredentialstate)\n * for more details.\n */\nexport enum AppleAuthenticationCredentialState {\n  REVOKED = 0,\n  AUTHORIZED = 1,\n  NOT_FOUND = 2,\n  TRANSFERRED = 3,\n}\n\n/**\n * A value that indicates whether the user appears to be a real person. You get\n * this in the realUserStatus property of a `Credential` object. It can be used\n * as one metric to help prevent fraud.\n *\n * @see [Apple\n * Documentation](https://developer.apple.com/documentation/authenticationservices/asuserdetectionstatus)\n * for more details.\n */\nexport enum AppleAuthenticationUserDetectionStatus {\n  UNSUPPORTED = 0,\n  UNKNOWN = 1,\n  LIKELY_REAL = 2,\n}\n\n/**\n * Controls the predefined text shown on the authentication button.\n */\nexport enum AppleAuthenticationButtonType {\n  SIGN_IN = 0,\n  CONTINUE = 1,\n  DEFAULT = 2,\n}\n\n/**\n * Controls the predefined style of the authenticating button.\n */\nexport enum AppleAuthenticationButtonStyle {\n  WHITE = 0,\n  WHITE_OUTLINE = 1,\n  BLACK = 2,\n}\n\n/**\n * Indicates the status of the attempt to retrieve the requested credential.\n */\nexport enum AppleAuthenticationStatus {\n  SUCCESS = 'success',\n  CANCEL = 'cancel',\n}\n"]}