{"version":3,"file":"Config.js","names":["reduceExpoObject","config","undefined","mods","expo","getSupportedPlatforms","projectRoot","platforms","resolveFrom","silent","push","getConfig","options","paths","getConfigFilePaths","rawStaticConfig","staticConfigPath","getStaticConfig","rootConfig","staticConfig","packageJson","packageJsonPath","getPackageJsonAndPath","fillAndReturnConfig","dynamicConfigObjectType","configWithDefaultValues","ensureConfigHasDefaultValues","exp","pkg","skipSDKVersionRequirement","dynamicConfigPath","isModdedConfig","withConfigPlugins","skipPlugins","isPublicConfig","_internal","hooks","ios","android","currentFullName","getFullName","originalFullName","updates","codeSigningCertificate","codeSigningMetadata","getContextConfig","exportedObjectType","rawDynamicConfig","getDynamicConfig","dynamicConfig","getPackageJson","getRootPackageJsonPath","JsonFile","read","getDynamicConfigFilePath","getStaticConfigFilePath","fileName","configPath","path","join","fs","existsSync","modifyConfigAsync","modifications","readOptions","writeOptions","type","message","relative","outputConfig","dryRun","writeAsync","json5","withInternal","pkgName","name","basename","pkgVersion","version","pkgWithDefaults","slug","slugify","toLowerCase","description","expWithDefaults","sdkVersion","getExpoSDKVersion","error","DEFAULT_BUILD_PATH","getWebOutputPath","process","env","WEBPACK_BUILD_OUTPUT_PATH","web","build","output","getNameFromConfig","appManifest","appName","displayName","webName","getDefaultTarget","semver","lt","isBareWorkflowProject","dependencies","expokit","xcodeprojFiles","globSync","absolute","cwd","length","gradleFiles","getProjectConfigDescription","getProjectConfigDescriptionWithPaths","projectConfig","relativeDynamicConfigPath"],"sources":["../src/Config.ts"],"sourcesContent":["import { ModConfig } from '@expo/config-plugins';\nimport JsonFile, { JSONObject } from '@expo/json-file';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\nimport slugify from 'slugify';\n\nimport {\n  AppJSONConfig,\n  ConfigFilePaths,\n  ExpoConfig,\n  GetConfigOptions,\n  PackageJSONConfig,\n  Platform,\n  ProjectConfig,\n  ProjectTarget,\n  WriteConfigOptions,\n} from './Config.types';\nimport { getDynamicConfig, getStaticConfig } from './getConfig';\nimport { getExpoSDKVersion } from './getExpoSDKVersion';\nimport { getFullName } from './getFullName';\nimport { withConfigPlugins } from './plugins/withConfigPlugins';\nimport { withInternal } from './plugins/withInternal';\nimport { getRootPackageJsonPath } from './resolvePackageJson';\n\ntype SplitConfigs = { expo: ExpoConfig; mods: ModConfig };\n\n/**\n * If a config has an `expo` object then that will be used as the config.\n * This method reduces out other top level values if an `expo` object exists.\n *\n * @param config Input config object to reduce\n */\nfunction reduceExpoObject(config?: any): SplitConfigs {\n  if (!config) return config === undefined ? null : config;\n\n  const { mods, ...expo } = config.expo ?? config;\n\n  return {\n    expo,\n    mods,\n  };\n}\n\n/**\n * Get all platforms that a project is currently capable of running.\n *\n * @param projectRoot\n * @param exp\n */\nfunction getSupportedPlatforms(projectRoot: string): Platform[] {\n  const platforms: Platform[] = [];\n  if (resolveFrom.silent(projectRoot, 'react-native')) {\n    platforms.push('ios', 'android');\n  }\n  if (resolveFrom.silent(projectRoot, 'react-native-web')) {\n    platforms.push('web');\n  }\n  return platforms;\n}\n\n/**\n * Evaluate the config for an Expo project.\n * If a function is exported from the `app.config.js` then a partial config will be passed as an argument.\n * The partial config is composed from any existing app.json, and certain fields from the `package.json` like name and description.\n *\n * If options.isPublicConfig is true, the Expo config will include only public-facing options (omitting private keys).\n * The resulting config should be suitable for hosting or embedding in a publicly readable location.\n *\n * **Example**\n * ```js\n * module.exports = function({ config }) {\n *   // mutate the config before returning it.\n *   config.slug = 'new slug'\n *   return { expo: config };\n * }\n * ```\n *\n * **Supports**\n * - `app.config.ts`\n * - `app.config.js`\n * - `app.config.json`\n * - `app.json`\n *\n * @param projectRoot the root folder containing all of your application code\n * @param options enforce criteria for a project config\n */\nexport function getConfig(projectRoot: string, options: GetConfigOptions = {}): ProjectConfig {\n  const paths = getConfigFilePaths(projectRoot);\n\n  const rawStaticConfig = paths.staticConfigPath ? getStaticConfig(paths.staticConfigPath) : null;\n  // For legacy reasons, always return an object.\n  const rootConfig = (rawStaticConfig || {}) as AppJSONConfig;\n  const staticConfig = reduceExpoObject(rawStaticConfig) || {};\n\n  // Can only change the package.json location if an app.json or app.config.json exists\n  const [packageJson, packageJsonPath] = getPackageJsonAndPath(projectRoot);\n\n  function fillAndReturnConfig(config: SplitConfigs, dynamicConfigObjectType: string | null) {\n    const configWithDefaultValues = {\n      ...ensureConfigHasDefaultValues({\n        projectRoot,\n        exp: config.expo,\n        pkg: packageJson,\n        skipSDKVersionRequirement: options.skipSDKVersionRequirement,\n        paths,\n        packageJsonPath,\n      }),\n      mods: config.mods,\n      dynamicConfigObjectType,\n      rootConfig,\n      dynamicConfigPath: paths.dynamicConfigPath,\n      staticConfigPath: paths.staticConfigPath,\n    };\n\n    if (options.isModdedConfig) {\n      // @ts-ignore: Add the mods back to the object.\n      configWithDefaultValues.exp.mods = config.mods ?? null;\n    }\n\n    // Apply static json plugins, should be done after _internal\n    configWithDefaultValues.exp = withConfigPlugins(\n      configWithDefaultValues.exp,\n      !!options.skipPlugins\n    );\n\n    if (!options.isModdedConfig) {\n      // @ts-ignore: Delete mods added by static plugins when they won't have a chance to be evaluated\n      delete configWithDefaultValues.exp.mods;\n    }\n\n    if (options.isPublicConfig) {\n      // TODD(EvanBacon): Drop plugins array after it's been resolved.\n\n      // Remove internal values with references to user's file paths from the public config.\n      delete configWithDefaultValues.exp._internal;\n\n      if (configWithDefaultValues.exp.hooks) {\n        delete configWithDefaultValues.exp.hooks;\n      }\n      if (configWithDefaultValues.exp.ios?.config) {\n        delete configWithDefaultValues.exp.ios.config;\n      }\n      if (configWithDefaultValues.exp.android?.config) {\n        delete configWithDefaultValues.exp.android.config;\n      }\n\n      // These value will be overwritten when the manifest is being served from the host (i.e. not completely accurate).\n      // @ts-ignore: currentFullName not on type yet.\n      configWithDefaultValues.exp.currentFullName = getFullName(configWithDefaultValues.exp);\n      // @ts-ignore: originalFullName not on type yet.\n      configWithDefaultValues.exp.originalFullName = getFullName(configWithDefaultValues.exp);\n\n      delete configWithDefaultValues.exp.updates?.codeSigningCertificate;\n      delete configWithDefaultValues.exp.updates?.codeSigningMetadata;\n    }\n\n    return configWithDefaultValues;\n  }\n\n  // Fill in the static config\n  function getContextConfig(config: SplitConfigs) {\n    return ensureConfigHasDefaultValues({\n      projectRoot,\n      exp: config.expo,\n      pkg: packageJson,\n      skipSDKVersionRequirement: true,\n      paths,\n      packageJsonPath,\n    }).exp;\n  }\n\n  if (paths.dynamicConfigPath) {\n    // No app.config.json or app.json but app.config.js\n    const { exportedObjectType, config: rawDynamicConfig } = getDynamicConfig(\n      paths.dynamicConfigPath,\n      {\n        projectRoot,\n        staticConfigPath: paths.staticConfigPath,\n        packageJsonPath,\n        config: getContextConfig(staticConfig),\n      }\n    );\n    // Allow for the app.config.js to `export default null;`\n    // Use `dynamicConfigPath` to detect if a dynamic config exists.\n    const dynamicConfig = reduceExpoObject(rawDynamicConfig) || {};\n    return fillAndReturnConfig(dynamicConfig, exportedObjectType);\n  }\n\n  // No app.config.js but json or no config\n  return fillAndReturnConfig(staticConfig || {}, null);\n}\n\nexport function getPackageJson(projectRoot: string): PackageJSONConfig {\n  const [pkg] = getPackageJsonAndPath(projectRoot);\n  return pkg;\n}\n\nfunction getPackageJsonAndPath(projectRoot: string): [PackageJSONConfig, string] {\n  const packageJsonPath = getRootPackageJsonPath(projectRoot);\n  return [JsonFile.read(packageJsonPath), packageJsonPath];\n}\n\n/**\n * Get the static and dynamic config paths for a project. Also accounts for custom paths.\n *\n * @param projectRoot\n */\nexport function getConfigFilePaths(projectRoot: string): ConfigFilePaths {\n  return {\n    dynamicConfigPath: getDynamicConfigFilePath(projectRoot),\n    staticConfigPath: getStaticConfigFilePath(projectRoot),\n  };\n}\n\nfunction getDynamicConfigFilePath(projectRoot: string): string | null {\n  for (const fileName of ['app.config.ts', 'app.config.js']) {\n    const configPath = path.join(projectRoot, fileName);\n    if (fs.existsSync(configPath)) {\n      return configPath;\n    }\n  }\n  return null;\n}\n\nfunction getStaticConfigFilePath(projectRoot: string): string | null {\n  for (const fileName of ['app.config.json', 'app.json']) {\n    const configPath = path.join(projectRoot, fileName);\n    if (fs.existsSync(configPath)) {\n      return configPath;\n    }\n  }\n  return null;\n}\n\n/**\n * Attempt to modify an Expo project config.\n * This will only fully work if the project is using static configs only.\n * Otherwise 'warn' | 'fail' will return with a message about why the config couldn't be updated.\n * The potentially modified config object will be returned for testing purposes.\n *\n * @param projectRoot\n * @param modifications modifications to make to an existing config\n * @param readOptions options for reading the current config file\n * @param writeOptions If true, the static config file will not be rewritten\n */\nexport async function modifyConfigAsync(\n  projectRoot: string,\n  modifications: Partial<ExpoConfig>,\n  readOptions: GetConfigOptions = {},\n  writeOptions: WriteConfigOptions = {}\n): Promise<{\n  type: 'success' | 'warn' | 'fail';\n  message?: string;\n  config: AppJSONConfig | null;\n}> {\n  const config = getConfig(projectRoot, readOptions);\n  if (config.dynamicConfigPath) {\n    // We cannot automatically write to a dynamic config.\n    /* Currently we should just use the safest approach possible, informing the user that they'll need to manually modify their dynamic config.\n\n    if (config.staticConfigPath) {\n      // Both a dynamic and a static config exist.\n      if (config.dynamicConfigObjectType === 'function') {\n        // The dynamic config exports a function, this means it possibly extends the static config.\n      } else {\n        // Dynamic config ignores the static config, there isn't a reason to automatically write to it.\n        // Instead we should warn the user to add values to their dynamic config.\n      }\n    }\n    */\n    return {\n      type: 'warn',\n      message: `Cannot automatically write to dynamic config at: ${path.relative(\n        projectRoot,\n        config.dynamicConfigPath\n      )}`,\n      config: null,\n    };\n  } else if (config.staticConfigPath) {\n    // Static with no dynamic config, this means we can append to the config automatically.\n    let outputConfig: AppJSONConfig;\n    // If the config has an expo object (app.json) then append the options to that object.\n    if (config.rootConfig.expo) {\n      outputConfig = {\n        ...config.rootConfig,\n        expo: { ...config.rootConfig.expo, ...modifications },\n      };\n    } else {\n      // Otherwise (app.config.json) just add the config modification to the top most level.\n      outputConfig = { ...config.rootConfig, ...modifications };\n    }\n    if (!writeOptions.dryRun) {\n      await JsonFile.writeAsync(config.staticConfigPath, outputConfig, { json5: false });\n    }\n    return { type: 'success', config: outputConfig };\n  }\n\n  return { type: 'fail', message: 'No config exists', config: null };\n}\n\nfunction ensureConfigHasDefaultValues({\n  projectRoot,\n  exp,\n  pkg,\n  paths,\n  packageJsonPath,\n  skipSDKVersionRequirement = false,\n}: {\n  projectRoot: string;\n  exp: Partial<ExpoConfig> | null;\n  pkg: JSONObject;\n  skipSDKVersionRequirement?: boolean;\n  paths?: ConfigFilePaths;\n  packageJsonPath?: string;\n}): { exp: ExpoConfig; pkg: PackageJSONConfig } {\n  if (!exp) {\n    exp = {};\n  }\n  exp = withInternal(exp as any, {\n    projectRoot,\n    ...(paths ?? {}),\n    packageJsonPath,\n  });\n  // Defaults for package.json fields\n  const pkgName = typeof pkg.name === 'string' ? pkg.name : path.basename(projectRoot);\n  const pkgVersion = typeof pkg.version === 'string' ? pkg.version : '1.0.0';\n\n  const pkgWithDefaults = { ...pkg, name: pkgName, version: pkgVersion };\n\n  // Defaults for app.json/app.config.js fields\n  const name = exp.name ?? pkgName;\n  const slug = exp.slug ?? slugify(name.toLowerCase());\n  const version = exp.version ?? pkgVersion;\n  let description = exp.description;\n  if (!description && typeof pkg.description === 'string') {\n    description = pkg.description;\n  }\n\n  const expWithDefaults = { ...exp, name, slug, version, description };\n\n  let sdkVersion;\n  try {\n    sdkVersion = getExpoSDKVersion(projectRoot, expWithDefaults);\n  } catch (error) {\n    if (!skipSDKVersionRequirement) throw error;\n  }\n\n  let platforms = exp.platforms;\n  if (!platforms) {\n    platforms = getSupportedPlatforms(projectRoot);\n  }\n\n  return {\n    exp: { ...expWithDefaults, sdkVersion, platforms },\n    pkg: pkgWithDefaults,\n  };\n}\n\nconst DEFAULT_BUILD_PATH = `web-build`;\n\nexport function getWebOutputPath(config: { [key: string]: any } = {}): string {\n  if (process.env.WEBPACK_BUILD_OUTPUT_PATH) {\n    return process.env.WEBPACK_BUILD_OUTPUT_PATH;\n  }\n  const expo = config.expo || config || {};\n  return expo?.web?.build?.output || DEFAULT_BUILD_PATH;\n}\n\nexport function getNameFromConfig(exp: Record<string, any> = {}): {\n  appName?: string;\n  webName?: string;\n} {\n  // For RN CLI support\n  const appManifest = exp.expo || exp;\n  const { web = {} } = appManifest;\n\n  // rn-cli apps use a displayName value as well.\n  const appName = exp.displayName || appManifest.displayName || appManifest.name;\n  const webName = web.name || appName;\n\n  return {\n    appName,\n    webName,\n  };\n}\n\nexport function getDefaultTarget(\n  projectRoot: string,\n  exp?: Pick<ExpoConfig, 'sdkVersion'>\n): ProjectTarget {\n  exp ??= getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp;\n\n  // before SDK 37, always default to managed to preserve previous behavior\n  if (exp.sdkVersion && exp.sdkVersion !== 'UNVERSIONED' && semver.lt(exp.sdkVersion, '37.0.0')) {\n    return 'managed';\n  }\n  return isBareWorkflowProject(projectRoot) ? 'bare' : 'managed';\n}\n\nfunction isBareWorkflowProject(projectRoot: string): boolean {\n  const [pkg] = getPackageJsonAndPath(projectRoot);\n\n  // TODO: Drop this\n  if (pkg.dependencies && pkg.dependencies.expokit) {\n    return false;\n  }\n\n  const xcodeprojFiles = globSync('ios/**/*.xcodeproj', {\n    absolute: true,\n    cwd: projectRoot,\n  });\n  if (xcodeprojFiles.length) {\n    return true;\n  }\n  const gradleFiles = globSync('android/**/*.gradle', {\n    absolute: true,\n    cwd: projectRoot,\n  });\n  if (gradleFiles.length) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Return a useful name describing the project config.\n * - dynamic: app.config.js\n * - static: app.json\n * - custom path app config relative to root folder\n * - both: app.config.js or app.json\n */\nexport function getProjectConfigDescription(projectRoot: string): string {\n  const paths = getConfigFilePaths(projectRoot);\n  return getProjectConfigDescriptionWithPaths(projectRoot, paths);\n}\n\n/**\n * Returns a string describing the configurations used for the given project root.\n * Will return null if no config is found.\n *\n * @param projectRoot\n * @param projectConfig\n */\nexport function getProjectConfigDescriptionWithPaths(\n  projectRoot: string,\n  projectConfig: ConfigFilePaths\n): string {\n  if (projectConfig.dynamicConfigPath) {\n    const relativeDynamicConfigPath = path.relative(projectRoot, projectConfig.dynamicConfigPath);\n    if (projectConfig.staticConfigPath) {\n      return `${relativeDynamicConfigPath} or ${path.relative(\n        projectRoot,\n        projectConfig.staticConfigPath\n      )}`;\n    }\n    return relativeDynamicConfigPath;\n  } else if (projectConfig.staticConfigPath) {\n    return path.relative(projectRoot, projectConfig.staticConfigPath);\n  }\n  // If a config doesn't exist, our tooling will generate a static app.json\n  return 'app.json';\n}\n\nexport * from './Config.types';\n"],"mappings":"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"}