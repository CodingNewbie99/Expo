{"version":3,"file":"JsInspector-test.js","sourceRoot":"","sources":["../../src/__tests__/JsInspector-test.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcess } from 'child_process';\nimport fetch from 'node-fetch';\nimport open from 'open';\n\nimport {\n  openJsInspector,\n  queryAllInspectorAppsAsync,\n  queryInspectorAppAsync,\n} from '../JsInspector';\nimport { METRO_INSPECTOR_RESPONSE_FIXTURE } from '../__tests__/fixtures/metroInspectorResponse';\n\njest.mock('fs-extra');\njest.mock('node-fetch');\njest.mock('open');\njest.mock('rimraf');\njest.mock('temp-dir', () => '/tmp');\n\nconst { Response } = jest.requireActual('node-fetch');\n\ndescribe(openJsInspector, () => {\n  it('should open browser for PUT request with given app', async () => {\n    const mockOpen = open.openApp as jest.MockedFunction<typeof open.openApp>;\n    mockOpen.mockImplementation(\n      (): Promise<ChildProcess> => {\n        const result: Partial<ChildProcess> = { exitCode: 0 };\n        return Promise.resolve(result as ChildProcess);\n      }\n    );\n\n    const app = METRO_INSPECTOR_RESPONSE_FIXTURE[0];\n    openJsInspector(app);\n  });\n});\n\ndescribe(queryAllInspectorAppsAsync, () => {\n  it('should return all available app entities', async () => {\n    const entities = METRO_INSPECTOR_RESPONSE_FIXTURE.filter(\n      app => app.title === 'React Native Experimental (Improved Chrome Reloads)'\n    );\n\n    const mockFetch = fetch as jest.MockedFunction<typeof fetch>;\n    mockFetch.mockReturnValue(\n      Promise.resolve(new Response(JSON.stringify(METRO_INSPECTOR_RESPONSE_FIXTURE)))\n    );\n\n    const result = await queryAllInspectorAppsAsync('http://localhost:8081');\n    expect(result.length).toBe(entities.length);\n    for (let i = 0; i < result.length; ++i) {\n      expect(result[i].webSocketDebuggerUrl).toBe(entities[i].webSocketDebuggerUrl);\n      expect(result[i].description).not.toBe(\"don't use\");\n    }\n  });\n});\n\ndescribe(queryInspectorAppAsync, () => {\n  it('should return specific app entity for given appId', async () => {\n    const appId = 'io.expo.test.devclient';\n    const mockFetch = fetch as jest.MockedFunction<typeof fetch>;\n    mockFetch.mockReturnValue(\n      Promise.resolve(new Response(JSON.stringify(METRO_INSPECTOR_RESPONSE_FIXTURE)))\n    );\n\n    const result = await queryInspectorAppAsync('http://localhost:8081', appId);\n    expect(result?.description).toBe(appId);\n  });\n});\n"]}