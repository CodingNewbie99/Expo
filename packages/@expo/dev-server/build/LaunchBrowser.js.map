{"version":3,"file":"LaunchBrowser.js","names":["IS_WSL","require","BrowserTypes","launchBrowserAsync","url","tempBrowserDir","createTempBrowserDir","launchArgs","browser","createBrowser","browserType","CHROME","EDGE","isSupported","isSupportedBrowser","launchAsync","Error","os","platform","BrowserImplMacOS","BrowserImplWindows","BrowserImplLinux","suffix","tmpDir","spawnAsync","stdout","trim","path","join","result","osascript","execAsync","MAP","args","appDirectory","appPath","globSync","cwd","absolute","_process","spawn","stdio","close","kill","undefined","appId","fullName","status","open","openApp","arguments","_appId","getAppId","includes"],"sources":["../src/LaunchBrowser.ts"],"sourcesContent":["import * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\nimport { spawn, type ChildProcess } from 'child_process';\nimport { sync as globSync } from 'glob';\nimport open from 'open';\nimport os from 'os';\nimport path from 'path';\n\nconst IS_WSL = require('is-wsl') && !require('is-docker')();\n\nexport interface BrowserInstance {\n  close: () => Promise<void>;\n}\n\n/**\n * Supported browser types\n */\nenum BrowserTypes {\n  CHROME,\n  EDGE,\n}\n\n/**\n * Internal browser implementation constraints\n */\ninterface BrowserImpl {\n  /**\n   * Return whether the given `browserType` is supported\n   */\n  isSupportedBrowser: (browserType: BrowserTypes) => Promise<boolean>;\n\n  /**\n   * Launch the browser\n   */\n  launchAsync: (browserType: BrowserTypes, args: string[]) => Promise<BrowserInstance>;\n\n  /**\n   * Close current browser instance\n   */\n  close: () => Promise<void>;\n}\n\n/**\n * Launch a browser for JavaScript inspector\n */\nexport async function launchBrowserAsync(url: string): Promise<BrowserInstance> {\n  // For dev-client connecting metro in LAN, the request to fetch sourcemaps may be blocked by Chromium\n  // with insecure-content (https page send xhr for http resource).\n  // Adding `--allow-running-insecure-content` to overcome this limitation\n  // without users manually allow insecure-content in site settings.\n  // However, if there is existing chromium browser process, the argument will not take effect.\n  // We also pass a `--user-data-dir=` as temporary profile and force chromium to create new browser process.\n  const tempBrowserDir = await createTempBrowserDir();\n  const launchArgs = [\n    `--app=${url}`,\n    '--allow-running-insecure-content',\n    `--user-data-dir=${tempBrowserDir}`,\n    '--no-first-run',\n    '--no-default-browser-check',\n  ];\n\n  const browser = createBrowser();\n\n  for (const browserType of [BrowserTypes.CHROME, BrowserTypes.EDGE]) {\n    const isSupported = await browser.isSupportedBrowser(browserType);\n    if (isSupported) {\n      return browser.launchAsync(browserType, launchArgs);\n    }\n  }\n\n  throw new Error(\n    '[LaunchBrowser] Unable to find a browser on the host to open the inspector. Supported browsers: Google Chrome, Microsoft Edge'\n  );\n}\n\nfunction createBrowser() {\n  if (os.platform() === 'darwin') {\n    return new BrowserImplMacOS();\n  }\n  if (os.platform() === 'win32' || IS_WSL) {\n    return new BrowserImplWindows();\n  }\n  if (os.platform() === 'linux') {\n    return new BrowserImplLinux();\n  }\n  throw new Error('[LaunchBrowser] Unsupported host platform');\n}\n\n/**\n * Create a temp folder for chromium user profile\n */\nasync function createTempBrowserDir() {\n  const suffix = 'expo-inspector';\n  let tmpDir;\n  if (IS_WSL) {\n    // On WSL, the browser is actually launched in host, the `temp-dir` returns the linux /tmp path where host browsers cannot reach into.\n    // We should get the temp path through the `$TEMP` windows environment variable.\n    tmpDir = (await spawnAsync('powershell.exe', ['-c', 'echo \"$Env:TEMP\"'])).stdout.trim();\n    return `${tmpDir}\\\\${suffix}`;\n  } else {\n    tmpDir = require('temp-dir');\n    return path.join(tmpDir, suffix);\n  }\n}\n\n/**\n * Browser implementation for macOS\n */\nclass BrowserImplMacOS implements BrowserImpl, BrowserInstance {\n  private _process: ChildProcess | undefined;\n\n  MAP = {\n    [BrowserTypes.CHROME]: 'google chrome',\n    [BrowserTypes.EDGE]: 'microsoft edge',\n  };\n\n  async isSupportedBrowser(browserType: BrowserTypes): Promise<boolean> {\n    let result = false;\n    try {\n      await osascript.execAsync(`id of application \"${this.MAP[browserType]}\"`);\n      result = true;\n    } catch {\n      result = false;\n    }\n    return result;\n  }\n\n  async launchAsync(browserType: BrowserTypes, args: string[]): Promise<BrowserInstance> {\n    const appDirectory = await osascript.execAsync(\n      `POSIX path of (path to application \"${this.MAP[browserType]}\")`\n    );\n    const appPath = globSync('Contents/MacOS/*', { cwd: appDirectory.trim(), absolute: true })?.[0];\n    if (!appPath) {\n      throw new Error(`Cannot find application path from ${appDirectory}Contents/MacOS`);\n    }\n    this._process = spawn(appPath, args, { stdio: 'ignore' });\n\n    return this;\n  }\n\n  async close(): Promise<void> {\n    if (this._process != null) {\n      this._process.kill();\n      this._process = undefined;\n    }\n  }\n}\n\n/**\n * Browser implementation for Windows and WSL\n *\n * To minimize the difference between Windows and WSL, the implementation wraps all spawn calls through powershell.\n */\nclass BrowserImplWindows implements BrowserImpl, BrowserInstance {\n  private _appId: string | undefined;\n\n  MAP = {\n    [BrowserTypes.CHROME]: {\n      appId: 'chrome',\n      fullName: 'Google Chrome',\n    },\n    [BrowserTypes.EDGE]: {\n      appId: 'msedge',\n      fullName: 'Microsoft Edge',\n    },\n  };\n\n  async isSupportedBrowser(browserType: BrowserTypes): Promise<boolean> {\n    let result = false;\n    try {\n      const { status } = await spawnAsync(\n        'powershell.exe',\n        ['-c', `Get-Package -Name '${this.MAP[browserType].fullName}'`],\n        { stdio: 'ignore' }\n      );\n      result = status === 0;\n    } catch {\n      result = false;\n    }\n    return result;\n  }\n\n  async launchAsync(browserType: BrowserTypes, args: string[]): Promise<BrowserInstance> {\n    const appId = this.MAP[browserType].appId;\n    await open.openApp(appId, { arguments: args });\n    this._appId = appId;\n    return this;\n  }\n\n  async close(): Promise<void> {\n    if (this._appId != null) {\n      try {\n        // Since we wrap all spawn calls through powershell as well as from `open.openApp`, the returned ChildProcess is not the browser process.\n        // And we cannot just call `process.kill()` kill it.\n        // The implementation tries to find the pid of target chromium browser process (with --app=https://chrome-devtools-frontend.appspot.com in command arguments),\n        // and uses taskkill to terminate the process.\n        await spawnAsync(\n          'powershell.exe',\n          [\n            '-c',\n            `taskkill.exe /pid @(Get-WmiObject Win32_Process -Filter \"name = '${this._appId}.exe' AND CommandLine LIKE '%chrome-devtools-frontend.appspot.com%'\" | Select-Object -ExpandProperty ProcessId)`,\n          ],\n          { stdio: 'ignore' }\n        );\n      } catch {}\n      this._appId = undefined;\n    }\n  }\n}\n\n/**\n * Browser implementation for Linux\n */\nclass BrowserImplLinux implements BrowserImpl, BrowserInstance {\n  private _appId: string | undefined;\n  private _process: ChildProcess | undefined;\n\n  MAP = {\n    [BrowserTypes.CHROME]: ['google-chrome', 'google-chrome-stable', 'chromium'],\n    [BrowserTypes.EDGE]: ['microsoft-edge', 'microsoft-edge-dev'],\n  };\n\n  /**\n   * On Linux, the supported appId is an array, this function finds the available appId and caches it\n   */\n  private async getAppId(browserType: BrowserTypes): Promise<string> {\n    if (this._appId == null || !this.MAP[browserType].includes(this._appId)) {\n      for (const appId of this.MAP[browserType]) {\n        try {\n          const { status } = await spawnAsync('which', [appId], { stdio: 'ignore' });\n          if (status === 0) {\n            this._appId = appId;\n            break;\n          }\n        } catch {}\n      }\n    }\n\n    if (this._appId == null) {\n      throw new Error(\n        `Unable to find supported browser - tried[${this.MAP[browserType].join(', ')}]`\n      );\n    }\n\n    return this._appId;\n  }\n\n  async isSupportedBrowser(browserType: BrowserTypes): Promise<boolean> {\n    let result = false;\n    try {\n      await this.getAppId(browserType);\n      result = true;\n    } catch {\n      result = false;\n    }\n    return result;\n  }\n\n  async launchAsync(browserType: BrowserTypes, args: string[]): Promise<BrowserInstance> {\n    const appId = await this.getAppId(browserType);\n    this._process = await open.openApp(appId, { arguments: args });\n    return this;\n  }\n\n  async close(): Promise<void> {\n    if (this._process != null) {\n      this._process.kill();\n      this._process = undefined;\n    }\n    if (this._appId != null) {\n      this._appId = undefined;\n    }\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,IAAqB,CAACA,OAAO,CAAC,WAAD,CAAP,EAArC;;AAMA;AACA;AACA;IACKC,Y;AAKL;AACA;AACA;;WAPKA,Y;EAAAA,Y,CAAAA,Y;EAAAA,Y,CAAAA,Y;GAAAA,Y,KAAAA,Y;;AAyBL;AACA;AACA;AACO,eAAeC,kBAAf,CAAkCC,GAAlC,EAAyE;EAC9E;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,cAAc,GAAG,MAAMC,oBAAoB,EAAjD;EACA,MAAMC,UAAU,GAAG,CAChB,SAAQH,GAAI,EADI,EAEjB,kCAFiB,EAGhB,mBAAkBC,cAAe,EAHjB,EAIjB,gBAJiB,EAKjB,4BALiB,CAAnB;EAQA,MAAMG,OAAO,GAAGC,aAAa,EAA7B;;EAEA,KAAK,MAAMC,WAAX,IAA0B,CAACR,YAAY,CAACS,MAAd,EAAsBT,YAAY,CAACU,IAAnC,CAA1B,EAAoE;IAClE,MAAMC,WAAW,GAAG,MAAML,OAAO,CAACM,kBAAR,CAA2BJ,WAA3B,CAA1B;;IACA,IAAIG,WAAJ,EAAiB;MACf,OAAOL,OAAO,CAACO,WAAR,CAAoBL,WAApB,EAAiCH,UAAjC,CAAP;IACD;EACF;;EAED,MAAM,IAAIS,KAAJ,CACJ,+HADI,CAAN;AAGD;;AAED,SAASP,aAAT,GAAyB;EACvB,IAAIQ,aAAA,CAAGC,QAAH,OAAkB,QAAtB,EAAgC;IAC9B,OAAO,IAAIC,gBAAJ,EAAP;EACD;;EACD,IAAIF,aAAA,CAAGC,QAAH,OAAkB,OAAlB,IAA6BlB,MAAjC,EAAyC;IACvC,OAAO,IAAIoB,kBAAJ,EAAP;EACD;;EACD,IAAIH,aAAA,CAAGC,QAAH,OAAkB,OAAtB,EAA+B;IAC7B,OAAO,IAAIG,gBAAJ,EAAP;EACD;;EACD,MAAM,IAAIL,KAAJ,CAAU,2CAAV,CAAN;AACD;AAED;AACA;AACA;;;AACA,eAAeV,oBAAf,GAAsC;EACpC,MAAMgB,MAAM,GAAG,gBAAf;EACA,IAAIC,MAAJ;;EACA,IAAIvB,MAAJ,EAAY;IACV;IACA;IACAuB,MAAM,GAAG,CAAC,MAAM,IAAAC,qBAAA,EAAW,gBAAX,EAA6B,CAAC,IAAD,EAAO,kBAAP,CAA7B,CAAP,EAAiEC,MAAjE,CAAwEC,IAAxE,EAAT;IACA,OAAQ,GAAEH,MAAO,KAAID,MAAO,EAA5B;EACD,CALD,MAKO;IACLC,MAAM,GAAGtB,OAAO,CAAC,UAAD,CAAhB;IACA,OAAO0B,eAAA,CAAKC,IAAL,CAAUL,MAAV,EAAkBD,MAAlB,CAAP;EACD;AACF;AAED;AACA;AACA;;;AACA,MAAMH,gBAAN,CAA+D;EAAA;IAAA;;IAAA,6BAGvD;MACJ,CAACjB,YAAY,CAACS,MAAd,GAAuB,eADnB;MAEJ,CAACT,YAAY,CAACU,IAAd,GAAqB;IAFjB,CAHuD;EAAA;;EAQrC,MAAlBE,kBAAkB,CAACJ,WAAD,EAA8C;IACpE,IAAImB,MAAM,GAAG,KAAb;;IACA,IAAI;MACF,MAAMC,SAAS,GAACC,SAAV,CAAqB,sBAAqB,KAAKC,GAAL,CAAStB,WAAT,CAAsB,GAAhE,CAAN;MACAmB,MAAM,GAAG,IAAT;IACD,CAHD,CAGE,MAAM;MACNA,MAAM,GAAG,KAAT;IACD;;IACD,OAAOA,MAAP;EACD;;EAEgB,MAAXd,WAAW,CAACL,WAAD,EAA4BuB,IAA5B,EAAsE;IAAA;;IACrF,MAAMC,YAAY,GAAG,MAAMJ,SAAS,GAACC,SAAV,CACxB,uCAAsC,KAAKC,GAAL,CAAStB,WAAT,CAAsB,IADpC,CAA3B;IAGA,MAAMyB,OAAO,gBAAG,IAAAC,YAAA,EAAS,kBAAT,EAA6B;MAAEC,GAAG,EAAEH,YAAY,CAACR,IAAb,EAAP;MAA4BY,QAAQ,EAAE;IAAtC,CAA7B,CAAH,8CAAG,UAA6E,CAA7E,CAAhB;;IACA,IAAI,CAACH,OAAL,EAAc;MACZ,MAAM,IAAInB,KAAJ,CAAW,qCAAoCkB,YAAa,gBAA5D,CAAN;IACD;;IACD,KAAKK,QAAL,GAAgB,IAAAC,sBAAA,EAAML,OAAN,EAAeF,IAAf,EAAqB;MAAEQ,KAAK,EAAE;IAAT,CAArB,CAAhB;IAEA,OAAO,IAAP;EACD;;EAEU,MAALC,KAAK,GAAkB;IAC3B,IAAI,KAAKH,QAAL,IAAiB,IAArB,EAA2B;MACzB,KAAKA,QAAL,CAAcI,IAAd;;MACA,KAAKJ,QAAL,GAAgBK,SAAhB;IACD;EACF;;AArC4D;AAwC/D;AACA;AACA;AACA;AACA;;;AACA,MAAMxB,kBAAN,CAAiE;EAAA;IAAA;;IAAA,6BAGzD;MACJ,CAAClB,YAAY,CAACS,MAAd,GAAuB;QACrBkC,KAAK,EAAE,QADc;QAErBC,QAAQ,EAAE;MAFW,CADnB;MAKJ,CAAC5C,YAAY,CAACU,IAAd,GAAqB;QACnBiC,KAAK,EAAE,QADY;QAEnBC,QAAQ,EAAE;MAFS;IALjB,CAHyD;EAAA;;EAcvC,MAAlBhC,kBAAkB,CAACJ,WAAD,EAA8C;IACpE,IAAImB,MAAM,GAAG,KAAb;;IACA,IAAI;MACF,MAAM;QAAEkB;MAAF,IAAa,MAAM,IAAAvB,qBAAA,EACvB,gBADuB,EAEvB,CAAC,IAAD,EAAQ,sBAAqB,KAAKQ,GAAL,CAAStB,WAAT,EAAsBoC,QAAS,GAA5D,CAFuB,EAGvB;QAAEL,KAAK,EAAE;MAAT,CAHuB,CAAzB;MAKAZ,MAAM,GAAGkB,MAAM,KAAK,CAApB;IACD,CAPD,CAOE,MAAM;MACNlB,MAAM,GAAG,KAAT;IACD;;IACD,OAAOA,MAAP;EACD;;EAEgB,MAAXd,WAAW,CAACL,WAAD,EAA4BuB,IAA5B,EAAsE;IACrF,MAAMY,KAAK,GAAG,KAAKb,GAAL,CAAStB,WAAT,EAAsBmC,KAApC;IACA,MAAMG,eAAA,CAAKC,OAAL,CAAaJ,KAAb,EAAoB;MAAEK,SAAS,EAAEjB;IAAb,CAApB,CAAN;IACA,KAAKkB,MAAL,GAAcN,KAAd;IACA,OAAO,IAAP;EACD;;EAEU,MAALH,KAAK,GAAkB;IAC3B,IAAI,KAAKS,MAAL,IAAe,IAAnB,EAAyB;MACvB,IAAI;QACF;QACA;QACA;QACA;QACA,MAAM,IAAA3B,qBAAA,EACJ,gBADI,EAEJ,CACE,IADF,EAEG,oEAAmE,KAAK2B,MAAO,iHAFlF,CAFI,EAMJ;UAAEV,KAAK,EAAE;QAAT,CANI,CAAN;MAQD,CAbD,CAaE,MAAM,CAAE;;MACV,KAAKU,MAAL,GAAcP,SAAd;IACD;EACF;;AAtD8D;AAyDjE;AACA;AACA;;;AACA,MAAMvB,gBAAN,CAA+D;EAAA;IAAA;;IAAA;;IAAA,6BAIvD;MACJ,CAACnB,YAAY,CAACS,MAAd,GAAuB,CAAC,eAAD,EAAkB,sBAAlB,EAA0C,UAA1C,CADnB;MAEJ,CAACT,YAAY,CAACU,IAAd,GAAqB,CAAC,gBAAD,EAAmB,oBAAnB;IAFjB,CAJuD;EAAA;;EAS7D;AACF;AACA;EACwB,MAARwC,QAAQ,CAAC1C,WAAD,EAA6C;IACjE,IAAI,KAAKyC,MAAL,IAAe,IAAf,IAAuB,CAAC,KAAKnB,GAAL,CAAStB,WAAT,EAAsB2C,QAAtB,CAA+B,KAAKF,MAApC,CAA5B,EAAyE;MACvE,KAAK,MAAMN,KAAX,IAAoB,KAAKb,GAAL,CAAStB,WAAT,CAApB,EAA2C;QACzC,IAAI;UACF,MAAM;YAAEqC;UAAF,IAAa,MAAM,IAAAvB,qBAAA,EAAW,OAAX,EAAoB,CAACqB,KAAD,CAApB,EAA6B;YAAEJ,KAAK,EAAE;UAAT,CAA7B,CAAzB;;UACA,IAAIM,MAAM,KAAK,CAAf,EAAkB;YAChB,KAAKI,MAAL,GAAcN,KAAd;YACA;UACD;QACF,CAND,CAME,MAAM,CAAE;MACX;IACF;;IAED,IAAI,KAAKM,MAAL,IAAe,IAAnB,EAAyB;MACvB,MAAM,IAAInC,KAAJ,CACH,4CAA2C,KAAKgB,GAAL,CAAStB,WAAT,EAAsBkB,IAAtB,CAA2B,IAA3B,CAAiC,GADzE,CAAN;IAGD;;IAED,OAAO,KAAKuB,MAAZ;EACD;;EAEuB,MAAlBrC,kBAAkB,CAACJ,WAAD,EAA8C;IACpE,IAAImB,MAAM,GAAG,KAAb;;IACA,IAAI;MACF,MAAM,KAAKuB,QAAL,CAAc1C,WAAd,CAAN;MACAmB,MAAM,GAAG,IAAT;IACD,CAHD,CAGE,MAAM;MACNA,MAAM,GAAG,KAAT;IACD;;IACD,OAAOA,MAAP;EACD;;EAEgB,MAAXd,WAAW,CAACL,WAAD,EAA4BuB,IAA5B,EAAsE;IACrF,MAAMY,KAAK,GAAG,MAAM,KAAKO,QAAL,CAAc1C,WAAd,CAApB;IACA,KAAK6B,QAAL,GAAgB,MAAMS,eAAA,CAAKC,OAAL,CAAaJ,KAAb,EAAoB;MAAEK,SAAS,EAAEjB;IAAb,CAApB,CAAtB;IACA,OAAO,IAAP;EACD;;EAEU,MAALS,KAAK,GAAkB;IAC3B,IAAI,KAAKH,QAAL,IAAiB,IAArB,EAA2B;MACzB,KAAKA,QAAL,CAAcI,IAAd;;MACA,KAAKJ,QAAL,GAAgBK,SAAhB;IACD;;IACD,IAAI,KAAKO,MAAL,IAAe,IAAnB,EAAyB;MACvB,KAAKA,MAAL,GAAcP,SAAd;IACD;EACF;;AA3D4D"}