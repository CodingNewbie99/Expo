{"version":3,"file":"Locales.js","names":["_jsonFile","data","_interopRequireDefault","require","_fs","_path","_Xcodeproj","_applePlugins","_warnings","obj","__esModule","default","withLocales","applePlatform","config","withXcodeProject","modResults","setLocalesAsync","projectRoot","modRequest","project","exports","getLocales","locales","applePlatformDir","localesMap","getResolvedLocalesAsync","projectName","getProjectName","supportingDirectory","join","stringName","lang","localizationObj","Object","entries","dir","fs","promises","mkdir","recursive","strings","buffer","plistKey","localVersion","push","writeFile","groupName","group","ensureGroupRecursively","children","some","comment","addResourceFileToGroup","filepath","relative","isBuildFile","verbose","input","localeJsonPath","JsonFile","readAsync","addWarningForPlatform"],"sources":["../../src/apple/Locales.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs';\nimport { join, relative } from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { addResourceFileToGroup, ensureGroupRecursively, getProjectName } from './utils/Xcodeproj';\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/apple-plugins';\nimport { addWarningForPlatform } from '../utils/warnings';\n\ntype LocaleJson = Record<string, string>;\ntype ResolvedLocalesJson = Record<string, LocaleJson>;\ntype ExpoConfigLocales = NonNullable<ExpoConfig['locales']>;\n\nexport const withLocales: (applePlatform: 'ios' | 'macos') => ConfigPlugin =\n  (applePlatform: 'ios' | 'macos') => (config) => {\n    return withXcodeProject(applePlatform)(config, async (config) => {\n      config.modResults = await setLocalesAsync(applePlatform)(config, {\n        projectRoot: config.modRequest.projectRoot,\n        project: config.modResults,\n      });\n      return config;\n    });\n  };\n\nexport function getLocales(\n  config: Pick<ExpoConfig, 'locales'>\n): Record<string, string | LocaleJson> | null {\n  return config.locales ?? null;\n}\n\nexport const setLocalesAsync =\n  (applePlatform: 'ios' | 'macos') =>\n  async (\n    config: Pick<ExpoConfig, 'locales'>,\n    { projectRoot, project }: { projectRoot: string; project: XcodeProject }\n  ): Promise<XcodeProject> => {\n    const applePlatformDir = applePlatform;\n    const locales = getLocales(config);\n    if (!locales) {\n      return project;\n    }\n    // possibly validate CFBundleAllowMixedLocalizations is enabled\n    const localesMap = await getResolvedLocalesAsync(applePlatform)(projectRoot, locales);\n\n    const projectName = getProjectName(applePlatform)(projectRoot);\n    const supportingDirectory = join(projectRoot, applePlatformDir, projectName, 'Supporting');\n\n    // TODO: Should we delete all before running? Revisit after we land on a lock file.\n    const stringName = 'InfoPlist.strings';\n\n    for (const [lang, localizationObj] of Object.entries(localesMap)) {\n      const dir = join(supportingDirectory, `${lang}.lproj`);\n      // await fs.ensureDir(dir);\n      await fs.promises.mkdir(dir, { recursive: true });\n\n      const strings = join(dir, stringName);\n      const buffer = [];\n      for (const [plistKey, localVersion] of Object.entries(localizationObj)) {\n        buffer.push(`${plistKey} = \"${localVersion}\";`);\n      }\n      // Write the file to the file system.\n      await fs.promises.writeFile(strings, buffer.join('\\n'));\n\n      const groupName = `${projectName}/Supporting/${lang}.lproj`;\n      // deep find the correct folder\n      const group = ensureGroupRecursively(project, groupName);\n\n      // Ensure the file doesn't already exist\n      if (!group?.children.some(({ comment }) => comment === stringName)) {\n        // Only write the file if it doesn't already exist.\n        project = addResourceFileToGroup(applePlatform)({\n          filepath: relative(supportingDirectory, strings),\n          groupName,\n          project,\n          isBuildFile: true,\n          verbose: true,\n        });\n      }\n    }\n\n    return project;\n  };\n\nexport const getResolvedLocalesAsync =\n  (applePlatform: 'ios' | 'macos') =>\n  async (projectRoot: string, input: ExpoConfigLocales): Promise<ResolvedLocalesJson> => {\n    const locales: ResolvedLocalesJson = {};\n    for (const [lang, localeJsonPath] of Object.entries(input)) {\n      if (typeof localeJsonPath === 'string') {\n        try {\n          locales[lang] = await JsonFile.readAsync(join(projectRoot, localeJsonPath));\n        } catch {\n          // Add a warning when a json file cannot be parsed.\n          addWarningForPlatform(\n            applePlatform,\n            `locales.${lang}`,\n            `Failed to parse JSON of locale file for language: ${lang}`,\n            'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app'\n          );\n        }\n      } else {\n        // In the off chance that someone defined the locales json in the config, pass it directly to the object.\n        // We do this to make the types more elegant.\n        locales[lang] = localeJsonPath;\n      }\n    }\n\n    return locales;\n  };\n"],"mappings":"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"}