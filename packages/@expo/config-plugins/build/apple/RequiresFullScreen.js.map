{"version":3,"file":"RequiresFullScreen.js","names":["_applePlugins","data","require","_versions","_warnings","withRequiresFullScreen","applePlatform","createInfoPlistPlugin","config","infoPlist","setRequiresFullScreen","exports","getRequiresFullScreen","hasOwnProperty","requireFullScreen","gteSdkVersion","iPadInterfaceKey","requiredIPadInterface","isStringArray","value","Array","isArray","every","hasMinimumOrientations","masks","mask","includes","resolveExistingIpadInterfaceOrientations","interfaceOrientations","length","existingList","join","addWarningForPlatform","requiresFullScreen","existing","Set","concat","UIRequiresFullScreen"],"sources":["../../src/apple/RequiresFullScreen.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { InfoPlist } from './AppleConfig.types';\nimport { createInfoPlistPlugin } from '../plugins/apple-plugins';\nimport { gteSdkVersion } from '../utils/versions';\nimport { addWarningForPlatform } from '../utils/warnings';\n\n// TODO: check if this plugin is only relevant to iOS\n\nexport const withRequiresFullScreen = (applePlatform: 'ios' | 'macos') =>\n  createInfoPlistPlugin(applePlatform)(\n    (config: Pick<ExpoConfig, typeof applePlatform>, infoPlist: InfoPlist) =>\n      setRequiresFullScreen(applePlatform)(config, infoPlist),\n    'withRequiresFullScreen'\n  );\n\n// NOTES: This is defaulted to `true` for now to match the behavior prior to SDK\n// 34, but will change to `false` in SDK +43.\nexport const getRequiresFullScreen =\n  (applePlatform: 'ios' | 'macos') =>\n  (config: Pick<ExpoConfig, typeof applePlatform | 'sdkVersion'>) => {\n    // Yes, the property is called `${applePlatform}.requireFullScreen`, without the s - not \"requires\"\n    // This is confusing indeed because the actual property name does have the s\n    if (config[applePlatform]?.hasOwnProperty('requireFullScreen')) {\n      return !!config[applePlatform]!.requireFullScreen;\n    } else {\n      // In SDK 43, the `requireFullScreen` default has been changed to false.\n      if (\n        gteSdkVersion(config, '43.0.0')\n        // TODO: Uncomment after SDK 43 is released.\n        // || !config.sdkVersion\n      ) {\n        return false;\n      }\n      return true;\n    }\n  };\n\nconst iPadInterfaceKey = 'UISupportedInterfaceOrientations~ipad';\n\nconst requiredIPadInterface = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction isStringArray(value: any): value is string[] {\n  return Array.isArray(value) && value.every((value) => typeof value === 'string');\n}\n\nfunction hasMinimumOrientations(masks: string[]): boolean {\n  return requiredIPadInterface.every((mask) => masks.includes(mask));\n}\n\n/**\n * Require full screen being disabled requires all ipad interfaces to to be added,\n * otherwise submissions to the iOS App Store will fail.\n *\n * ERROR ITMS-90474: \"Invalid Bundle. iPad Multitasking support requires these orientations: 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight'. Found 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown' in bundle 'com.bacon.app'.\"\n *\n * @param interfaceOrientations\n * @returns\n */\nfunction resolveExistingIpadInterfaceOrientations(\n  applePlatform: 'ios' | 'macos',\n  interfaceOrientations: any\n): string[] {\n  if (\n    // Ensure type.\n    isStringArray(interfaceOrientations) &&\n    // Don't warn if it's an empty array, this is invalid regardless.\n    interfaceOrientations.length &&\n    // Check if the minimum requirements are met.\n    !hasMinimumOrientations(interfaceOrientations)\n  ) {\n    const existingList = interfaceOrientations!.join(', ');\n    addWarningForPlatform(\n      applePlatform,\n      `${applePlatform}.requireFullScreen`,\n      `iPad multitasking requires all \\`${iPadInterfaceKey}\\` orientations to be defined in the Info.plist. The Info.plist currently defines values that are incompatible with multitasking, these will be overwritten to prevent submission failure. Existing: ${existingList}`\n    );\n    return interfaceOrientations;\n  }\n  return [];\n}\n\n// Whether requires full screen on iPad\nexport const setRequiresFullScreen =\n  (applePlatform: 'ios' | 'macos') =>\n  (config: Pick<ExpoConfig, typeof applePlatform>, infoPlist: InfoPlist): InfoPlist => {\n    const requiresFullScreen = getRequiresFullScreen(applePlatform)(config);\n    if (!requiresFullScreen) {\n      const existing = resolveExistingIpadInterfaceOrientations(\n        applePlatform,\n        infoPlist[iPadInterfaceKey]\n      );\n\n      // There currently exists no mechanism to safely undo this feature besides `npx expo prebuild --clear`,\n      // this seems ok though because anyone using `UISupportedInterfaceOrientations~ipad` probably\n      // wants them to be defined to this value anyways. This is also the default value used in the Xcode iOS template.\n\n      // Merge any previous interfaces with the required interfaces.\n      infoPlist[iPadInterfaceKey] = [...new Set(existing.concat(requiredIPadInterface))];\n    }\n\n    return {\n      ...infoPlist,\n      UIRequiresFullScreen: requiresFullScreen,\n    };\n  };\n"],"mappings":"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"}