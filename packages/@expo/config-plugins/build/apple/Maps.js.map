{"version":3,"file":"Maps.js","names":["_path","data","_interopRequireDefault","require","_resolveFrom","_applePlugins","_generateCode","obj","__esModule","default","debug","MATCH_INIT","exports","withGoogleMapsKey","applePlatform","createInfoPlistPlugin","config","infoPlist","setGoogleMapsApiKey","withMaps","apiKey","getGoogleMapsApiKey","withMapsCocoaPods","useGoogleMaps","withGoogleMapsAppDelegate","googleMapsApiKey","GMSApiKey","addGoogleMapsAppDelegateImport","src","newSrc","push","mergeContents","tag","join","anchor","offset","comment","removeGoogleMapsAppDelegateImport","removeContents","addGoogleMapsAppDelegateInit","removeGoogleMapsAppDelegateInit","addMapsCocoaPods","removeMapsCocoaPods","isReactNativeMapsInstalled","projectRoot","resolved","resolveFrom","silent","path","dirname","isReactNativeMapsAutolinked","withPodfile","googleMapsPath","modRequest","isLinked","results","modResults","contents","error","code","Error","didMerge","didClear","withAppDelegate","includes","language"],"sources":["../../src/apple/Maps.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin, InfoPlist } from '../Plugin.types';\nimport { createInfoPlistPlugin, withAppDelegate, withPodfile } from '../plugins/apple-plugins';\nimport { mergeContents, MergeResults, removeContents } from '../utils/generateCode';\n\nconst debug = require('debug')('expo:config-plugins:apple:maps') as typeof console.log;\n\nexport const MATCH_INIT =\n  /-\\s*\\(BOOL\\)\\s*application:\\s*\\(UIApplication\\s*\\*\\s*\\)\\s*\\w+\\s+didFinishLaunchingWithOptions:/g;\n\nconst withGoogleMapsKey = (applePlatform: 'ios' | 'macos') =>\n  createInfoPlistPlugin(applePlatform)(\n    (config: Pick<ExpoConfig, 'ios'>, infoPlist: InfoPlist) =>\n      setGoogleMapsApiKey(applePlatform, config, infoPlist),\n    'withGoogleMapsKey'\n  );\n\nexport const withMaps: (applePlatform: 'ios' | 'macos') => ConfigPlugin =\n  (applePlatform: 'ios' | 'macos') => (config) => {\n    config = withGoogleMapsKey(applePlatform)(config);\n\n    const apiKey = getGoogleMapsApiKey(applePlatform, config);\n    // Technically adds react-native-maps (Apple maps) and google maps.\n\n    debug('Google Maps API Key:', apiKey);\n    config = withMapsCocoaPods(applePlatform)(config, { useGoogleMaps: !!apiKey });\n\n    // Adds/Removes AppDelegate setup for Google Maps API on iOS\n    config = withGoogleMapsAppDelegate(applePlatform)(config, { apiKey });\n\n    return config;\n  };\n\nexport function getGoogleMapsApiKey(\n  applePlatform: 'ios' | 'macos',\n  config: Pick<ExpoConfig, typeof applePlatform>\n) {\n  return config[applePlatform]?.config?.googleMapsApiKey ?? null;\n}\n\nexport function setGoogleMapsApiKey(\n  applePlatform: 'ios' | 'macos',\n  config: Pick<ExpoConfig, typeof applePlatform>,\n  { GMSApiKey, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const apiKey = getGoogleMapsApiKey(applePlatform, config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GMSApiKey: apiKey,\n  };\n}\n\nexport function addGoogleMapsAppDelegateImport(src: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    '#import <GoogleMaps/GoogleMaps.h>',\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateImport(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-import',\n    src,\n  });\n}\n\nexport function addGoogleMapsAppDelegateInit(src: string, apiKey: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    `  [GMSServices provideAPIKey:@\"${apiKey}\"];`,\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-init',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 2,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateInit(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-init',\n    src,\n  });\n}\n\n/**\n * @param src The contents of the Podfile.\n * @returns Podfile with Google Maps added.\n */\nexport function addMapsCocoaPods(src: string): MergeResults {\n  return mergeContents({\n    tag: 'react-native-maps',\n    src,\n    newSrc: `  pod 'react-native-google-maps', path: File.dirname(\\`node --print \"require.resolve('react-native-maps/package.json')\"\\`)`,\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#',\n  });\n}\n\nexport function removeMapsCocoaPods(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps',\n    src,\n  });\n}\n\nfunction isReactNativeMapsInstalled(projectRoot: string): string | null {\n  const resolved = resolveFrom.silent(projectRoot, 'react-native-maps/package.json');\n  return resolved ? path.dirname(resolved) : null;\n}\n\nfunction isReactNativeMapsAutolinked(config: Pick<ExpoConfig, '_internal'>): boolean {\n  // Only add the native code changes if we know that the package is going to be linked natively.\n  // This is specifically for monorepo support where one app might have react-native-maps (adding it to the node_modules)\n  // but another app will not have it installed in the package.json, causing it to not be linked natively.\n  // This workaround only exists because react-native-maps doesn't have a config plugin vendored in the package.\n\n  // TODO: `react-native-maps` doesn't use Expo autolinking so we cannot safely disable the module.\n  return true;\n\n  // return (\n  //   !config._internal?.autolinkedModules ||\n  //   config._internal.autolinkedModules.includes('react-native-maps')\n  // );\n}\n\nconst withMapsCocoaPods: (\n  applePlatform: 'ios' | 'macos'\n) => ConfigPlugin<{ useGoogleMaps: boolean }> =\n  (applePlatform: 'ios' | 'macos') =>\n  (config, { useGoogleMaps }) => {\n    return withPodfile(applePlatform)(config, async (config) => {\n      // Only add the block if react-native-maps is installed in the project (best effort).\n      // Generally prebuild runs after a yarn install so this should always work as expected.\n      const googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      const isLinked = isReactNativeMapsAutolinked(config);\n      debug('Is Expo Autolinked:', isLinked);\n      debug('react-native-maps path:', googleMapsPath);\n\n      let results: MergeResults;\n\n      if (isLinked && googleMapsPath && useGoogleMaps) {\n        try {\n          results = addMapsCocoaPods(config.modResults.contents);\n        } catch (error: any) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        // If the package is no longer installed, then remove the block.\n        results = removeMapsCocoaPods(config.modResults.contents);\n      }\n\n      if (results.didMerge || results.didClear) {\n        config.modResults.contents = results.contents;\n      }\n\n      return config;\n    });\n  };\n\nconst withGoogleMapsAppDelegate: (\n  applePlatform: 'ios' | 'macos'\n) => ConfigPlugin<{ apiKey: string | null }> =\n  (applePlatform: 'ios' | 'macos') =>\n  (config, { apiKey }) => {\n    return withAppDelegate(applePlatform)(config, (config) => {\n      if (['objc', 'objcpp'].includes(config.modResults.language)) {\n        if (\n          apiKey &&\n          isReactNativeMapsAutolinked(config) &&\n          isReactNativeMapsInstalled(config.modRequest.projectRoot)\n        ) {\n          try {\n            config.modResults.contents = addGoogleMapsAppDelegateImport(\n              config.modResults.contents\n            ).contents;\n            config.modResults.contents = addGoogleMapsAppDelegateInit(\n              config.modResults.contents,\n              apiKey\n            ).contents;\n          } catch (error: any) {\n            if (error.code === 'ERR_NO_MATCH') {\n              throw new Error(\n                `Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.`\n              );\n            }\n            throw error;\n          }\n        } else {\n          config.modResults.contents = removeGoogleMapsAppDelegateImport(\n            config.modResults.contents\n          ).contents;\n          config.modResults.contents = removeGoogleMapsAppDelegateInit(\n            config.modResults.contents\n          ).contents;\n        }\n      } else {\n        throw new Error(\n          `Cannot setup Google Maps because the project AppDelegate is not a supported language: ${config.modResults.language}`\n        );\n      }\n      return config;\n    });\n  };\n"],"mappings":"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"}