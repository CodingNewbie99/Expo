{"version":3,"file":"Updates.js","names":["_applePlugins","data","require","_Updates","Config","exports","withUpdates","applePlatform","config","withExpoPlist","projectRoot","modRequest","expoUpdatesPackageVersion","getExpoUpdatesPackageVersion","modResults","setUpdatesConfigAsync","expoPlist","newExpoPlist","ENABLED","getUpdatesEnabled","CHECK_ON_LAUNCH","getUpdatesCheckOnLaunch","LAUNCH_WAIT_MS","getUpdatesTimeout","updateUrl","getUpdateUrl","UPDATE_URL","codeSigningCertificate","getUpdatesCodeSigningCertificate","CODE_SIGNING_CERTIFICATE","codeSigningMetadata","getUpdatesCodeSigningMetadata","CODE_SIGNING_METADATA","requestHeaders","getUpdatesRequestHeaders","UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY","setVersionsConfigAsync","runtimeVersion","getRuntimeVersionNullableAsync","RUNTIME_VERSION","Error"],"sources":["../../src/apple/Updates.ts"],"sourcesContent":["import { ExpoPlist } from './AppleConfig.types';\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withExpoPlist } from '../plugins/apple-plugins';\nimport {\n  ExpoConfigUpdates,\n  getExpoUpdatesPackageVersion,\n  getRuntimeVersionNullableAsync,\n  getUpdatesCheckOnLaunch,\n  getUpdatesCodeSigningCertificate,\n  getUpdatesCodeSigningMetadata,\n  getUpdatesRequestHeaders,\n  getUpdatesEnabled,\n  getUpdatesTimeout,\n  getUpdateUrl,\n} from '../utils/Updates';\n\nexport enum Config {\n  ENABLED = 'EXUpdatesEnabled',\n  CHECK_ON_LAUNCH = 'EXUpdatesCheckOnLaunch',\n  LAUNCH_WAIT_MS = 'EXUpdatesLaunchWaitMs',\n  RUNTIME_VERSION = 'EXUpdatesRuntimeVersion',\n  UPDATE_URL = 'EXUpdatesURL',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'EXUpdatesRequestHeaders',\n  CODE_SIGNING_CERTIFICATE = 'EXUpdatesCodeSigningCertificate',\n  CODE_SIGNING_METADATA = 'EXUpdatesCodeSigningMetadata',\n}\n\n// when making changes to this config plugin, ensure the same changes are also made in eas-cli and build-tools\n// Also ensure the docs are up-to-date: https://docs.expo.dev/bare/installing-updates/\n\nexport const withUpdates: (applePlatform: 'ios' | 'macos') => ConfigPlugin =\n  (applePlatform: 'ios' | 'macos') => (config) => {\n    return withExpoPlist(applePlatform)(config, async (config) => {\n      const projectRoot = config.modRequest.projectRoot;\n      const expoUpdatesPackageVersion = getExpoUpdatesPackageVersion(projectRoot);\n      config.modResults = await setUpdatesConfigAsync(applePlatform)(\n        projectRoot,\n        config,\n        config.modResults,\n        expoUpdatesPackageVersion\n      );\n      return config;\n    });\n  };\n\nexport const setUpdatesConfigAsync =\n  (applePlatform: 'ios' | 'macos') =>\n  async (\n    projectRoot: string,\n    config: ExpoConfigUpdates,\n    expoPlist: ExpoPlist,\n    expoUpdatesPackageVersion?: string | null\n  ): Promise<ExpoPlist> => {\n    const newExpoPlist = {\n      ...expoPlist,\n      [Config.ENABLED]: getUpdatesEnabled(config),\n      [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion),\n      [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config),\n    };\n\n    const updateUrl = getUpdateUrl(config);\n    if (updateUrl) {\n      newExpoPlist[Config.UPDATE_URL] = updateUrl;\n    } else {\n      delete newExpoPlist[Config.UPDATE_URL];\n    }\n\n    const codeSigningCertificate = getUpdatesCodeSigningCertificate(projectRoot, config);\n    if (codeSigningCertificate) {\n      newExpoPlist[Config.CODE_SIGNING_CERTIFICATE] = codeSigningCertificate;\n    } else {\n      delete newExpoPlist[Config.CODE_SIGNING_CERTIFICATE];\n    }\n\n    const codeSigningMetadata = getUpdatesCodeSigningMetadata(config);\n    if (codeSigningMetadata) {\n      newExpoPlist[Config.CODE_SIGNING_METADATA] = codeSigningMetadata;\n    } else {\n      delete newExpoPlist[Config.CODE_SIGNING_METADATA];\n    }\n\n    const requestHeaders = getUpdatesRequestHeaders(config);\n    if (requestHeaders) {\n      newExpoPlist[Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY] = requestHeaders;\n    } else {\n      delete newExpoPlist[Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY];\n    }\n\n    return await setVersionsConfigAsync(applePlatform)(projectRoot, config, newExpoPlist);\n  };\n\nexport const setVersionsConfigAsync =\n  (applePlatform: 'ios' | 'macos') =>\n  async (\n    projectRoot: string,\n    config: ExpoConfigUpdates,\n    expoPlist: ExpoPlist\n  ): Promise<ExpoPlist> => {\n    const newExpoPlist = { ...expoPlist };\n\n    const runtimeVersion = await getRuntimeVersionNullableAsync(projectRoot, config, applePlatform);\n    if (!runtimeVersion && expoPlist[Config.RUNTIME_VERSION]) {\n      throw new Error(\n        'A runtime version is set in your Expo.plist, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove EXUpdatesRuntimeVersion from your Expo.plist.'\n      );\n    }\n\n    if (runtimeVersion) {\n      delete newExpoPlist['EXUpdatesSDKVersion'];\n      newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n    } else {\n      delete newExpoPlist['EXUpdatesSDKVersion'];\n      delete newExpoPlist[Config.RUNTIME_VERSION];\n    }\n\n    return newExpoPlist;\n  };\n"],"mappings":";;;;;;AAEA,SAAAA,cAAA;EAAA,MAAAC,IAAA,GAAAC,OAAA;EAAAF,aAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,SAAA;EAAA,MAAAF,IAAA,GAAAC,OAAA;EAAAC,QAAA,YAAAA,CAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAW0B,IAEdG,MAAM,GAAAC,OAAA,CAAAD,MAAA,0BAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAAA,OAANA,MAAM;AAAA,OAWlB;AACA;AAEO,MAAME,WAA6D,GACvEC,aAA8B,IAAMC,MAAM,IAAK;EAC9C,OAAO,IAAAC,6BAAa,EAACF,aAAa,CAAC,CAACC,MAAM,EAAE,MAAOA,MAAM,IAAK;IAC5D,MAAME,WAAW,GAAGF,MAAM,CAACG,UAAU,CAACD,WAAW;IACjD,MAAME,yBAAyB,GAAG,IAAAC,uCAA4B,EAACH,WAAW,CAAC;IAC3EF,MAAM,CAACM,UAAU,GAAG,MAAMC,qBAAqB,CAACR,aAAa,CAAC,CAC5DG,WAAW,EACXF,MAAM,EACNA,MAAM,CAACM,UAAU,EACjBF,yBACF,CAAC;IACD,OAAOJ,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAACH,OAAA,CAAAC,WAAA,GAAAA,WAAA;AAEG,MAAMS,qBAAqB,GAC/BR,aAA8B,IAC/B,OACEG,WAAmB,EACnBF,MAAyB,EACzBQ,SAAoB,EACpBJ,yBAAyC,KAClB;EACvB,MAAMK,YAAY,GAAG;IACnB,GAAGD,SAAS;IACZ,CAACZ,MAAM,CAACc,OAAO,GAAG,IAAAC,4BAAiB,EAACX,MAAM,CAAC;IAC3C,CAACJ,MAAM,CAACgB,eAAe,GAAG,IAAAC,kCAAuB,EAACb,MAAM,EAAEI,yBAAyB,CAAC;IACpF,CAACR,MAAM,CAACkB,cAAc,GAAG,IAAAC,4BAAiB,EAACf,MAAM;EACnD,CAAC;EAED,MAAMgB,SAAS,GAAG,IAAAC,uBAAY,EAACjB,MAAM,CAAC;EACtC,IAAIgB,SAAS,EAAE;IACbP,YAAY,CAACb,MAAM,CAACsB,UAAU,CAAC,GAAGF,SAAS;EAC7C,CAAC,MAAM;IACL,OAAOP,YAAY,CAACb,MAAM,CAACsB,UAAU,CAAC;EACxC;EAEA,MAAMC,sBAAsB,GAAG,IAAAC,2CAAgC,EAAClB,WAAW,EAAEF,MAAM,CAAC;EACpF,IAAImB,sBAAsB,EAAE;IAC1BV,YAAY,CAACb,MAAM,CAACyB,wBAAwB,CAAC,GAAGF,sBAAsB;EACxE,CAAC,MAAM;IACL,OAAOV,YAAY,CAACb,MAAM,CAACyB,wBAAwB,CAAC;EACtD;EAEA,MAAMC,mBAAmB,GAAG,IAAAC,wCAA6B,EAACvB,MAAM,CAAC;EACjE,IAAIsB,mBAAmB,EAAE;IACvBb,YAAY,CAACb,MAAM,CAAC4B,qBAAqB,CAAC,GAAGF,mBAAmB;EAClE,CAAC,MAAM;IACL,OAAOb,YAAY,CAACb,MAAM,CAAC4B,qBAAqB,CAAC;EACnD;EAEA,MAAMC,cAAc,GAAG,IAAAC,mCAAwB,EAAC1B,MAAM,CAAC;EACvD,IAAIyB,cAAc,EAAE;IAClBhB,YAAY,CAACb,MAAM,CAAC+B,yCAAyC,CAAC,GAAGF,cAAc;EACjF,CAAC,MAAM;IACL,OAAOhB,YAAY,CAACb,MAAM,CAAC+B,yCAAyC,CAAC;EACvE;EAEA,OAAO,MAAMC,sBAAsB,CAAC7B,aAAa,CAAC,CAACG,WAAW,EAAEF,MAAM,EAAES,YAAY,CAAC;AACvF,CAAC;AAACZ,OAAA,CAAAU,qBAAA,GAAAA,qBAAA;AAEG,MAAMqB,sBAAsB,GAChC7B,aAA8B,IAC/B,OACEG,WAAmB,EACnBF,MAAyB,EACzBQ,SAAoB,KACG;EACvB,MAAMC,YAAY,GAAG;IAAE,GAAGD;EAAU,CAAC;EAErC,MAAMqB,cAAc,GAAG,MAAM,IAAAC,yCAA8B,EAAC5B,WAAW,EAAEF,MAAM,EAAED,aAAa,CAAC;EAC/F,IAAI,CAAC8B,cAAc,IAAIrB,SAAS,CAACZ,MAAM,CAACmC,eAAe,CAAC,EAAE;IACxD,MAAM,IAAIC,KAAK,CACb,uNACF,CAAC;EACH;EAEA,IAAIH,cAAc,EAAE;IAClB,OAAOpB,YAAY,CAAC,qBAAqB,CAAC;IAC1CA,YAAY,CAACb,MAAM,CAACmC,eAAe,CAAC,GAAGF,cAAc;EACvD,CAAC,MAAM;IACL,OAAOpB,YAAY,CAAC,qBAAqB,CAAC;IAC1C,OAAOA,YAAY,CAACb,MAAM,CAACmC,eAAe,CAAC;EAC7C;EAEA,OAAOtB,YAAY;AACrB,CAAC;AAACZ,OAAA,CAAA+B,sBAAA,GAAAA,sBAAA"}