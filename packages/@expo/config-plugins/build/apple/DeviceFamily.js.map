{"version":3,"file":"DeviceFamily.js","names":["_applePlugins","data","require","_warnings","withDeviceFamily","applePlatform","config","withXcodeProject","modResults","setDeviceFamily","project","exports","getSupportsTablet","supportsTablet","getIsTabletOnly","isTabletOnly","getDeviceFamilies","addWarningForPlatform","formatDeviceFamilies","deviceFamilies","join","configurations","pbxXCBuildConfigurationSection","buildSettings","Object","values","PRODUCT_NAME","TVOS_DEPLOYMENT_TARGET","TARGETED_DEVICE_FAMILY"],"sources":["../../src/apple/DeviceFamily.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/apple-plugins';\nimport { addWarningForPlatform } from '../utils/warnings';\n\nexport const withDeviceFamily: (applePlatform: 'ios' | 'macos') => ConfigPlugin =\n  (applePlatform: 'ios' | 'macos') => (config) => {\n    return withXcodeProject(applePlatform)(config, async (config) => {\n      config.modResults = await setDeviceFamily(applePlatform, config, {\n        project: config.modResults,\n      });\n      return config;\n    });\n  };\n\nexport function getSupportsTablet(\n  applePlatform: 'ios' | 'macos',\n  config: Pick<ExpoConfig, typeof applePlatform>\n): boolean {\n  return !!config[applePlatform]?.supportsTablet;\n}\n\nexport function getIsTabletOnly(\n  applePlatform: 'ios' | 'macos',\n  config: Pick<ExpoConfig, typeof applePlatform>\n): boolean {\n  return !!config?.[applePlatform]?.isTabletOnly;\n}\n\nexport function getDeviceFamilies(\n  applePlatform: 'ios' | 'macos',\n  config: Pick<ExpoConfig, typeof applePlatform>\n): number[] {\n  const supportsTablet = getSupportsTablet(applePlatform, config);\n  const isTabletOnly = getIsTabletOnly(applePlatform, config);\n\n  if (isTabletOnly && config[applePlatform]?.supportsTablet === false) {\n    addWarningForPlatform(\n      applePlatform,\n      `${applePlatform}.supportsTablet`,\n      `Found contradictory values: \\`{ ${applePlatform}: { isTabletOnly: true, supportsTablet: false } }\\`. Using \\`{ isTabletOnly: true }\\`.`\n    );\n  }\n\n  // 1 is iPhone, 2 is iPad\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    // is iPhone only\n    return [1];\n  }\n}\n\n/**\n * Wrapping the families in double quotes is the only way to set a value with a comma in it.\n *\n * @param deviceFamilies\n */\nexport function formatDeviceFamilies(deviceFamilies: number[]): string {\n  return `\"${deviceFamilies.join(',')}\"`;\n}\n\n/**\n * Add to pbxproj under TARGETED_DEVICE_FAMILY\n */\nexport function setDeviceFamily(\n  applePlatform: 'ios' | 'macos',\n  config: Pick<ExpoConfig, typeof applePlatform>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const deviceFamilies = formatDeviceFamilies(getDeviceFamilies(applePlatform, config));\n\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      if (typeof buildSettings?.TVOS_DEPLOYMENT_TARGET !== 'undefined') {\n        buildSettings.TARGETED_DEVICE_FAMILY = '3';\n      } else {\n        buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n      }\n    }\n  }\n\n  return project;\n}\n"],"mappings":";;;;;;;;;;;AAIA,SAAAA,cAAA;EAAA,MAAAC,IAAA,GAAAC,OAAA;EAAAF,aAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,UAAA;EAAA,MAAAF,IAAA,GAAAC,OAAA;EAAAC,SAAA,YAAAA,CAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEO,MAAMG,gBAAkE,GAC5EC,aAA8B,IAAMC,MAAM,IAAK;EAC9C,OAAO,IAAAC,gCAAgB,EAACF,aAAa,CAAC,CAACC,MAAM,EAAE,MAAOA,MAAM,IAAK;IAC/DA,MAAM,CAACE,UAAU,GAAG,MAAMC,eAAe,CAACJ,aAAa,EAAEC,MAAM,EAAE;MAC/DI,OAAO,EAAEJ,MAAM,CAACE;IAClB,CAAC,CAAC;IACF,OAAOF,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAACK,OAAA,CAAAP,gBAAA,GAAAA,gBAAA;AAEG,SAASQ,iBAAiBA,CAC/BP,aAA8B,EAC9BC,MAA8C,EACrC;EACT,OAAO,CAAC,CAACA,MAAM,CAACD,aAAa,CAAC,EAAEQ,cAAc;AAChD;AAEO,SAASC,eAAeA,CAC7BT,aAA8B,EAC9BC,MAA8C,EACrC;EACT,OAAO,CAAC,CAACA,MAAM,GAAGD,aAAa,CAAC,EAAEU,YAAY;AAChD;AAEO,SAASC,iBAAiBA,CAC/BX,aAA8B,EAC9BC,MAA8C,EACpC;EACV,MAAMO,cAAc,GAAGD,iBAAiB,CAACP,aAAa,EAAEC,MAAM,CAAC;EAC/D,MAAMS,YAAY,GAAGD,eAAe,CAACT,aAAa,EAAEC,MAAM,CAAC;EAE3D,IAAIS,YAAY,IAAIT,MAAM,CAACD,aAAa,CAAC,EAAEQ,cAAc,KAAK,KAAK,EAAE;IACnE,IAAAI,iCAAqB,EACnBZ,aAAa,EACZ,GAAEA,aAAc,iBAAgB,EAChC,mCAAkCA,aAAc,wFACnD,CAAC;EACH;;EAEA;EACA,IAAIU,YAAY,EAAE;IAChB,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC,MAAM,IAAIF,cAAc,EAAE;IACzB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EACf,CAAC,MAAM;IACL;IACA,OAAO,CAAC,CAAC,CAAC;EACZ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASK,oBAAoBA,CAACC,cAAwB,EAAU;EACrE,OAAQ,IAAGA,cAAc,CAACC,IAAI,CAAC,GAAG,CAAE,GAAE;AACxC;;AAEA;AACA;AACA;AACO,SAASX,eAAeA,CAC7BJ,aAA8B,EAC9BC,MAA8C,EAC9C;EAAEI;AAAmC,CAAC,EACxB;EACd,MAAMS,cAAc,GAAGD,oBAAoB,CAACF,iBAAiB,CAACX,aAAa,EAAEC,MAAM,CAAC,CAAC;EAErF,MAAMe,cAAc,GAAGX,OAAO,CAACY,8BAA8B,CAAC,CAAC;EAC/D;EACA,KAAK,MAAM;IAAEC;EAAc,CAAC,IAAIC,MAAM,CAACC,MAAM,CAACJ,cAAc,IAAI,CAAC,CAAC,CAAC,EAAE;IACnE;IACA;IACA,IAAI,OAAOE,aAAa,EAAEG,YAAY,KAAK,WAAW,EAAE;MACtD,IAAI,OAAOH,aAAa,EAAEI,sBAAsB,KAAK,WAAW,EAAE;QAChEJ,aAAa,CAACK,sBAAsB,GAAG,GAAG;MAC5C,CAAC,MAAM;QACLL,aAAa,CAACK,sBAAsB,GAAGT,cAAc;MACvD;IACF;EACF;EAEA,OAAOT,OAAO;AAChB"}