{"version":3,"sources":["../../src/ios/Orientation.ts"],"names":["withOrientation","setOrientation","infoPlistProperty","expoConfigProperty","getOrientation","config","orientation","PORTRAIT_ORIENTATIONS","LANDSCAPE_ORIENTATIONS","getUISupportedInterfaceOrientations","infoPlist","UISupportedInterfaceOrientations"],"mappings":";;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,MAAMA,eAAe,GAAG,0DAC7BC,cAD6B,EAE7B;AACEC,EAAAA,iBAAiB,EAAE,kCADrB;AAEEC,EAAAA,kBAAkB,EAAE;AAFtB,CAF6B,EAM7B,iBAN6B,CAAxB;;;AASA,SAASC,cAAT,CAAwBC,MAAxB,EAAiE;AAAA;;AACtE,gCAAOA,MAAM,CAACC,WAAd,qEAA6B,IAA7B;AACD;;AAEM,MAAMC,qBAA6C,GAAG,CAC3D,gCAD2D,EAE3D,0CAF2D,CAAtD;;AAKA,MAAMC,sBAA8C,GAAG,CAC5D,qCAD4D,EAE5D,sCAF4D,CAAvD;;;AAKP,SAASC,mCAAT,CAA6CH,WAA7C,EAAiG;AAC/F,MAAIA,WAAW,KAAK,UAApB,EAAgC;AAC9B,WAAOC,qBAAP;AACD,GAFD,MAEO,IAAID,WAAW,KAAK,WAApB,EAAiC;AACtC,WAAOE,sBAAP;AACD,GAFM,MAEA;AACL,WAAO,CAAC,GAAGD,qBAAJ,EAA2B,GAAGC,sBAA9B,CAAP;AACD;AACF;;AAEM,SAASP,cAAT,CACLI,MADK,EAELK,SAFK,EAGM;AACX,QAAMJ,WAAW,GAAGF,cAAc,CAACC,MAAD,CAAlC;AAEA,SAAO,EACL,GAAGK,SADE;AAELC,IAAAA,gCAAgC,EAAEF,mCAAmC,CAACH,WAAD;AAFhE,GAAP;AAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPluginWithPropertyGuard } from '../plugins/ios-plugins';\nimport { InfoPlist, InterfaceOrientation } from './IosConfig.types';\n\nexport const withOrientation = createInfoPlistPluginWithPropertyGuard(\n  setOrientation,\n  {\n    infoPlistProperty: 'UISupportedInterfaceOrientations',\n    expoConfigProperty: 'orientation',\n  },\n  'withOrientation'\n);\n\nexport function getOrientation(config: Pick<ExpoConfig, 'orientation'>) {\n  return config.orientation ?? null;\n}\n\nexport const PORTRAIT_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n];\n\nexport const LANDSCAPE_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction getUISupportedInterfaceOrientations(orientation: string | null): InterfaceOrientation[] {\n  if (orientation === 'portrait') {\n    return PORTRAIT_ORIENTATIONS;\n  } else if (orientation === 'landscape') {\n    return LANDSCAPE_ORIENTATIONS;\n  } else {\n    return [...PORTRAIT_ORIENTATIONS, ...LANDSCAPE_ORIENTATIONS];\n  }\n}\n\nexport function setOrientation(\n  config: Pick<ExpoConfig, 'orientation'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const orientation = getOrientation(config);\n\n  return {\n    ...infoPlist,\n    UISupportedInterfaceOrientations: getUISupportedInterfaceOrientations(orientation),\n  };\n}\n"],"file":"Orientation.js"}