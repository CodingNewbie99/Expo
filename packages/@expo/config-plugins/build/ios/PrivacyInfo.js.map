{"version":3,"file":"PrivacyInfo.js","names":["_plist","data","_interopRequireDefault","require","_XcodeProjectFile","_","_Xcodeproj","_path","obj","__esModule","default","withPrivacyInfo","config","privacyManifests","ios","withXcodeProject","projectConfig","projectName","getProjectName","modRequest","projectRoot","existingFileContent","readBuildSourceFile","project","modResults","nativeProjectRoot","platformProjectRoot","filePath","path","join","parsedContent","plist","parse","mergedContent","mergePrivacyInfo","contents","build","createBuildSourceFile","fileContents","overwrite","existing","NSPrivacyAccessedAPITypes","NSPrivacyCollectedDataTypes","NSPrivacyTracking","NSPrivacyTrackingDomains","structuredClone","forEach","newType","existingType","find","t","NSPrivacyAccessedAPIType","push","NSPrivacyAccessedAPITypeReasons","Set","concat","NSPrivacyCollectedDataType","NSPrivacyCollectedDataTypePurposes"],"sources":["../../src/ios/PrivacyInfo.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist from '@expo/plist';\n\nimport {\n  createBuildSourceFile,\n  readBuildSourceFile,\n  withBuildSourceFile,\n} from './XcodeProjectFile';\nimport { withXcodeProject } from '..';\nimport { getProjectName } from './utils/Xcodeproj';\nimport path from 'path';\n\ntype PrivacyInfo = {\n  NSPrivacyAccessedAPITypes: {\n    NSPrivacyAccessedAPIType: string;\n    NSPrivacyAccessedAPITypeReasons: string[];\n  }[];\n  NSPrivacyCollectedDataTypes: {\n    NSPrivacyCollectedDataType: string;\n    NSPrivacyCollectedDataTypeLinked: boolean;\n    NSPrivacyCollectedDataTypeTracking: boolean;\n    NSPrivacyCollectedDataTypePurposes: string[];\n  }[];\n  NSPrivacyTracking: boolean;\n  NSPrivacyTrackingDomains: string[];\n};\n\nexport function withPrivacyInfo(config: ExpoConfig): ExpoConfig {\n  const privacyManifests = config.ios?.privacyManifests;\n  if (!privacyManifests) {\n    return config;\n  }\n\n  return withXcodeProject(config, (projectConfig) => {\n    const projectName = getProjectName(projectConfig.modRequest.projectRoot);\n\n    const existingFileContent = readBuildSourceFile({\n      project: projectConfig.modResults,\n      nativeProjectRoot: projectConfig.modRequest.platformProjectRoot,\n      filePath: path.join(projectName, 'PrivacyInfo.xcprivacy'),\n    });\n    const parsedContent = plist.parse(existingFileContent);\n    const mergedContent = mergePrivacyInfo(parsedContent, privacyManifests);\n    const contents = plist.build(mergedContent);\n\n    projectConfig.modResults = createBuildSourceFile({\n      project: projectConfig.modResults,\n      nativeProjectRoot: projectConfig.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: path.join(projectName, 'PrivacyInfo.xcprivacy'),\n      overwrite: true,\n    });\n\n    return projectConfig;\n  });\n}\n\nfunction mergePrivacyInfo(\n  existing: Partial<PrivacyInfo>,\n  privacyManifests: Partial<PrivacyInfo>\n): PrivacyInfo {\n  let {\n    NSPrivacyAccessedAPITypes = [],\n    NSPrivacyCollectedDataTypes = [],\n    NSPrivacyTracking = false,\n    NSPrivacyTrackingDomains = [],\n  } = structuredClone(existing);\n  // tracking is a boolean, so we can just overwrite it\n  NSPrivacyTracking = privacyManifests.NSPrivacyTracking ?? existing.NSPrivacyTracking ?? false;\n  // merge the api types – for each type ensure the key is in the array, and if it is add the reason if it's not there\n  NSPrivacyAccessedAPITypes.forEach((newType) => {\n    const existingType = NSPrivacyAccessedAPITypes.find(\n      (t) => t.NSPrivacyAccessedAPIType === newType.NSPrivacyAccessedAPIType\n    );\n    if (!existingType) {\n      NSPrivacyAccessedAPITypes.push(newType);\n    } else {\n      existingType.NSPrivacyAccessedAPITypeReasons = [\n        ...new Set(\n          existingType?.NSPrivacyAccessedAPITypeReasons?.concat(\n            ...newType.NSPrivacyAccessedAPITypeReasons\n          )\n        ),\n      ];\n    }\n  });\n  // merge the collected data types – for each type ensure the key is in the array, and if it is add the purposes if it's not there\n  NSPrivacyCollectedDataTypes.forEach((newType) => {\n    const existingType = NSPrivacyCollectedDataTypes.find(\n      (t) => t.NSPrivacyCollectedDataType === newType.NSPrivacyCollectedDataType\n    );\n    if (!existingType) {\n      NSPrivacyCollectedDataTypes.push(newType);\n    } else {\n      existingType.NSPrivacyCollectedDataTypePurposes = [\n        ...new Set(\n          existingType?.NSPrivacyCollectedDataTypePurposes?.concat(\n            ...newType.NSPrivacyCollectedDataTypePurposes\n          )\n        ),\n      ];\n    }\n  });\n  // merge the tracking domains\n  NSPrivacyTrackingDomains = [\n    ...new Set(NSPrivacyTrackingDomains.concat(privacyManifests.NSPrivacyTrackingDomains ?? [])),\n  ];\n\n  return {\n    NSPrivacyAccessedAPITypes,\n    NSPrivacyCollectedDataTypes,\n    NSPrivacyTracking,\n    NSPrivacyTrackingDomains,\n  };\n}\n"],"mappings":"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"}