{"version":3,"file":"loadBundle.test.web.js","sourceRoot":"","sources":["../../../src/async-require/__tests__/loadBundle.test.web.ts"],"names":[],"mappings":";;;;;AAAA,gEAAwC;AACxC,oEAA4C;AAC5C,oDAAsD;AACtD,8CAAgD;AAEhD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC;IACnC,kBAAkB,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,GAAE,CAAC,CAAC;CAC5C,CAAC,CAAC,CAAC;AAEJ,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC;IAClC,UAAU,EAAE,IAAI;IAChB,OAAO,EAAE,EAAE,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE;CACvC,CAAC,CAAC,CAAC;AAEJ,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE,CAAC,CAAC;IACpC,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;IACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;CAChB,CAAC,CAAC,CAAC;AAEJ,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;AACzC,SAAS,CAAC,GAAG,EAAE;IACb,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,WAAW,CAAC;AACrC,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;IAC9B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,aAAa,CAAC;IACrC,MAAM,IAAA,4BAAe,EAAC,iCAAiC,CAAC,CAAC;IACzD,MAAM,CAAC,qBAAW,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,CAAC,qBAAW,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;IAC1C,MAAM,GAAG,GAAG,iCAAiC,CAAC;IAC9C,MAAM,CAAC,mBAAS,CAAC,cAAc,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IACrD,MAAM,CAAC,kCAAkB,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC;AACH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;IAC5C,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,YAAY,CAAC;IACpC,MAAM,IAAA,4BAAe,EAAC,iCAAiC,CAAC,CAAC;IACzD,MAAM,CAAC,qBAAW,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;IACjD,MAAM,CAAC,qBAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;IAC1C,MAAM,GAAG,GAAG,iCAAiC,CAAC;IAC9C,MAAM,CAAC,mBAAS,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;IAClD,MAAM,CAAC,kCAAkB,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC","sourcesContent":["import HMRClient from \"../../HMRClient\";\nimport LoadingView from \"../../LoadingView\";\nimport { fetchThenEvalAsync } from \"../fetchThenEval\";\nimport { loadBundleAsync } from \"../loadBundle\";\n\njest.mock(\"../fetchThenEval\", () => ({\n  fetchThenEvalAsync: jest.fn(async () => {}),\n}));\n\njest.mock(\"../../HMRClient\", () => ({\n  __esModule: true,\n  default: { registerBundle: jest.fn() },\n}));\n\njest.mock(\"../../LoadingView\", () => ({\n  showMessage: jest.fn(),\n  hide: jest.fn(),\n}));\n\nconst originalEnv = process.env.NODE_ENV;\nafterEach(() => {\n  process.env.NODE_ENV = originalEnv;\n});\n\nit(\"loads a bundle\", async () => {\n  process.env.NODE_ENV = \"development\";\n  await loadBundleAsync(\"/Second.bundle?modulesOnly=true\");\n  expect(LoadingView.showMessage).toBeCalledWith(\"Downloading...\", \"load\");\n  expect(LoadingView.hide).toBeCalledWith();\n  const url = `/Second.bundle?modulesOnly=true`;\n  expect(HMRClient.registerBundle).toBeCalledWith(url);\n  expect(fetchThenEvalAsync).toBeCalledWith(url);\n});\nit(\"loads a bundle in production\", async () => {\n  process.env.NODE_ENV = \"production\";\n  await loadBundleAsync(\"/Second.bundle?modulesOnly=true\");\n  expect(LoadingView.showMessage).not.toBeCalled();\n  expect(LoadingView.hide).not.toBeCalled();\n  const url = `/Second.bundle?modulesOnly=true`;\n  expect(HMRClient.registerBundle).not.toBeCalled();\n  expect(fetchThenEvalAsync).toBeCalledWith(url);\n});\n"]}