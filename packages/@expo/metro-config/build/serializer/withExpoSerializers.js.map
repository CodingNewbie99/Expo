{"version":3,"file":"withExpoSerializers.js","names":["_jscSafeUrl","data","require","_bundleToString","_interopRequireDefault","_environmentVariableSerializerPlugin","_baseJSBundle","_serializeChunks","_serializerAssets","_env","obj","__esModule","default","withExpoSerializers","config","processors","push","serverPreludeSerializerPlugin","env","EXPO_NO_CLIENT_ENV_VARS","environmentVariableSerializerPlugin","withSerializerPlugins","_config$serializer","originalSerializer","serializer","customSerializer","createSerializerFromSerialProcessors","getDefaultSerializer","fallbackSerializer","defaultSerializer","params","bundle","baseJSBundle","outputCode","bundleToString","code","props","options","customSerializerOptions","serializerOptions","supportsNonSerialReturn","output","includeBytecode","outputMode","includeSourceMaps","includeMaps","sourceUrl","isJscSafeUrl","toNormalUrl","url","URL","searchParams","get","assets","graphToSerialAssetsAsync","JSON","stringify","finalSerializer","processor"],"sources":["../../src/serializer/withExpoSerializers.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { isJscSafeUrl, toNormalUrl } from 'jsc-safe-url';\nimport { MetroConfig } from 'metro';\nimport bundleToString from 'metro/src/lib/bundleToString';\nimport { ConfigT, InputConfigT } from 'metro-config';\n\nimport {\n  environmentVariableSerializerPlugin,\n  serverPreludeSerializerPlugin,\n} from './environmentVariableSerializerPlugin';\nimport { baseJSBundle } from './fork/baseJSBundle';\nimport { graphToSerialAssetsAsync } from './serializeChunks';\nimport { SerialAsset } from './serializerAssets';\nimport { env } from '../env';\n\nexport type Serializer = NonNullable<ConfigT['serializer']['customSerializer']>;\n\nexport type SerializerParameters = Parameters<Serializer>;\n\n// A serializer that processes the input and returns a modified version.\n// Unlike a serializer, these can be chained together.\nexport type SerializerPlugin = (...props: SerializerParameters) => SerializerParameters;\n\nexport function withExpoSerializers(config: InputConfigT): InputConfigT {\n  const processors: SerializerPlugin[] = [];\n  processors.push(serverPreludeSerializerPlugin);\n  if (!env.EXPO_NO_CLIENT_ENV_VARS) {\n    processors.push(environmentVariableSerializerPlugin);\n  }\n\n  return withSerializerPlugins(config, processors);\n}\n\n// There can only be one custom serializer as the input doesn't match the output.\n// Here we simply run\nexport function withSerializerPlugins(\n  config: InputConfigT,\n  processors: SerializerPlugin[]\n): InputConfigT {\n  const originalSerializer = config.serializer?.customSerializer;\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      customSerializer: createSerializerFromSerialProcessors(\n        config,\n        processors,\n        originalSerializer\n      ),\n    },\n  };\n}\n\nfunction getDefaultSerializer(\n  config: MetroConfig,\n  fallbackSerializer?: Serializer | null\n): Serializer {\n  const defaultSerializer =\n    fallbackSerializer ??\n    (async (...params: SerializerParameters) => {\n      const bundle = baseJSBundle(...params);\n      const outputCode = bundleToString(bundle).code;\n      return outputCode;\n    });\n  return async (\n    ...props: SerializerParameters\n  ): Promise<string | { code: string; map: string }> => {\n    const [, , , options] = props;\n\n    // @ts-expect-error\n    const customSerializerOptions = options.serializerOptions;\n\n    // Custom options can only be passed outside of the dev server, meaning\n    // we don't need to stringify the results at the end, i.e. this is `npx expo export` or `npx expo export:embed`.\n    const supportsNonSerialReturn = !!customSerializerOptions?.output;\n\n    const serializerOptions = (() => {\n      if (customSerializerOptions) {\n        return {\n          includeBytecode: customSerializerOptions.includeBytecode,\n          outputMode: customSerializerOptions.output,\n          includeSourceMaps: customSerializerOptions.includeMaps,\n        };\n      }\n      if (options.sourceUrl) {\n        const sourceUrl = isJscSafeUrl(options.sourceUrl)\n          ? toNormalUrl(options.sourceUrl)\n          : options.sourceUrl;\n\n        const url = new URL(sourceUrl, 'https://expo.dev');\n\n        return {\n          outputMode: url.searchParams.get('serializer.output'),\n          includeSourceMaps: url.searchParams.get('serializer.map') === 'true',\n          includeBytecode: url.searchParams.get('serializer.bytecode') === 'true',\n        };\n      }\n      return null;\n    })();\n\n    if (serializerOptions?.outputMode !== 'static') {\n      return defaultSerializer(...props);\n    }\n\n    const assets = await graphToSerialAssetsAsync(\n      config,\n      {\n        includeSourceMaps: serializerOptions.includeSourceMaps,\n        includeBytecode: serializerOptions.includeBytecode,\n      },\n      ...props\n    );\n\n    if (supportsNonSerialReturn) {\n      // @ts-expect-error: this is future proofing for adding assets to the output as well.\n      return assets;\n    }\n\n    return JSON.stringify(assets);\n  };\n}\n\nexport function createSerializerFromSerialProcessors(\n  config: MetroConfig,\n  processors: (SerializerPlugin | undefined)[],\n  originalSerializer?: Serializer | null\n): Serializer {\n  const finalSerializer = getDefaultSerializer(config, originalSerializer);\n  return (...props: SerializerParameters): ReturnType<Serializer> => {\n    for (const processor of processors) {\n      if (processor) {\n        props = processor(...props);\n      }\n    }\n\n    return finalSerializer(...props);\n  };\n}\n\nexport { SerialAsset };\n"],"mappings":"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"}