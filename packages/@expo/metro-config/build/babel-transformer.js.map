{"version":3,"file":"babel-transformer.js","names":["_nodeAssert","data","_interopRequireDefault","require","_nodeCrypto","_nodeFs","_nodePath","_babelCore","obj","__esModule","default","cacheKeyParts","fs","readFileSync","__filename","version","isTypeScriptSource","fileName","endsWith","isTSXSource","getBabelRC","babelRC","_getBabelRC","projectRoot","possibleBabelRCPaths","foundBabelRCPath","find","configFileName","existsSync","path","resolve","extends","presets","isCustomTruthy","value","transform","filename","src","options","plugins","OLD_BABEL_ENV","process","env","BABEL_ENV","dev","_options$customTransf","_options$customTransf2","_options$customTransf3","_options$customTransf4","isNodeModule","includes","isServer","customTransformOptions","environment","babelConfig","sourceType","ast","code","cloneInputAst","cwd","highlightCode","babelrc","enableBabelRCLookup","caller","name","bundler","platform","baseUrl","decodeURI","isDev","preserveEnvVars","undefined","engine","isHMREnabled","hot","useBabelCore","hermesParser","parser","parseWithBabel","parseWithHermes","result","assert","metadata","sourceAst","parse","babel","transformFromAstSync","transformSync","getCacheKey","key","crypto","createHash","forEach","part","update","digest","babelTransformer","module","exports"],"sources":["../src/babel-transformer.ts"],"sourcesContent":["/**\n * Copyright (c) 650 Industries (Expo). All rights reserved.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// A fork of the upstream babel-transformer that uses Expo-specific babel defaults\n// and adds support for web and Node.js environments via `isServer` on the Babel caller.\n\nimport type { BabelTransformer, BabelTransformerArgs } from 'metro-babel-transformer';\nimport assert from 'node:assert';\nimport crypto from 'node:crypto';\nimport fs from 'node:fs';\nimport path from 'node:path';\n\nimport { type TransformOptions, transformSync, transformFromAstSync } from './babel-core';\n\nconst cacheKeyParts = [\n  fs.readFileSync(__filename),\n  require('babel-preset-fbjs/package.json').version,\n];\n\n// TS detection conditions copied from metro-react-native-babel-preset\nfunction isTypeScriptSource(fileName: string): boolean {\n  return fileName?.endsWith('.ts');\n}\n\nfunction isTSXSource(fileName: string): boolean {\n  return fileName?.endsWith('.tsx');\n}\n\n/**\n * Returns a memoized function that checks for the existence of a\n * project-level .babelrc file. If it doesn't exist, it reads the\n * default React Native babelrc file and uses that.\n */\nconst getBabelRC = (function () {\n  let babelRC: Pick<TransformOptions, 'extends' | 'presets'> | null = null;\n\n  return function _getBabelRC({ projectRoot }: { projectRoot: string }) {\n    if (babelRC !== null) {\n      return babelRC;\n    }\n\n    babelRC = {};\n\n    if (projectRoot) {\n      // Check for various babel config files in the project root\n      // TODO(EvanBacon): We might want to disable babelrc lookup when the user specifies `enableBabelRCLookup: false`.\n      const possibleBabelRCPaths = ['.babelrc', '.babelrc.js', 'babel.config.js'];\n\n      const foundBabelRCPath = possibleBabelRCPaths.find((configFileName) =>\n        fs.existsSync(path.resolve(projectRoot, configFileName))\n      );\n\n      // Extend the config if a babel config file is found\n      if (foundBabelRCPath) {\n        babelRC.extends = path.resolve(projectRoot, foundBabelRCPath);\n      }\n    }\n\n    // Use the default preset for react-native if no babel config file is found\n    if (!babelRC.extends) {\n      babelRC.presets = [require('babel-preset-expo')];\n    }\n\n    return babelRC;\n  };\n})();\n\nfunction isCustomTruthy(value: any): boolean {\n  return value === true || value === 'true';\n}\n\nconst transform: BabelTransformer['transform'] = ({\n  filename,\n  src,\n  options,\n  // `plugins` is used for `functionMapBabelPlugin` from `metro-source-map`. Could make sense to move this to `babel-preset-expo` too.\n  plugins,\n}: BabelTransformerArgs): ReturnType<BabelTransformer['transform']> => {\n  const OLD_BABEL_ENV = process.env.BABEL_ENV;\n  process.env.BABEL_ENV = options.dev ? 'development' : process.env.BABEL_ENV || 'production';\n\n  try {\n    const isNodeModule = filename.includes('node_modules');\n    const isServer = options.customTransformOptions?.environment === 'node';\n    const babelConfig: TransformOptions = {\n      // ES modules require sourceType='module' but OSS may not always want that\n      sourceType: 'unambiguous',\n\n      // The output we want from Babel methods\n      ast: true,\n      code: false,\n      // NOTE(EvanBacon): We split the parse/transform steps up to accommodate\n      // Hermes parsing, but this defaults to cloning the AST which increases\n      // the transformation time by a fair amount.\n      // You get this behavior by default when using Babel's `transform` method directly.\n      cloneInputAst: false,\n\n      // Options for debugging\n      cwd: options.projectRoot,\n      filename,\n      highlightCode: true,\n\n      // Load the project babel config file.\n      ...getBabelRC(options),\n\n      babelrc:\n        typeof options.enableBabelRCLookup === 'boolean' ? options.enableBabelRCLookup : true,\n\n      plugins,\n\n      // NOTE(EvanBacon): We heavily leverage the caller functionality to mutate the babel config.\n      // This compensates for the lack of a format plugin system in Metro. Users can modify the\n      // all (most) of the transforms in their local Babel config.\n      // This also helps us keep the transform layers small and focused on a single task. We can also use this to\n      // ensure the Babel config caching is more accurate.\n      // Additionally, by moving everything Babel-related to the Babel preset, it makes it easier for users to reason\n      // about the requirements of an Expo project, making it easier to migrate to other transpilers in the future.\n      caller: {\n        name: 'metro',\n        // @ts-expect-error: Custom values passed to the caller.\n        bundler: 'metro',\n        platform: options.platform,\n        // Empower the babel preset to know the env it's bundling for.\n        // Metro automatically updates the cache to account for the custom transform options.\n        isServer,\n\n        // The base url to make requests from, used for hosting from non-standard locations.\n        baseUrl:\n          typeof options.customTransformOptions?.baseUrl === 'string'\n            ? decodeURI(options.customTransformOptions.baseUrl)\n            : '',\n\n        isDev: options.dev,\n\n        // This value indicates if the user has disabled the feature or not.\n        // Other criteria may still cause the feature to be disabled, but all inputs used are\n        // already considered in the cache key.\n        preserveEnvVars: isCustomTruthy(options.customTransformOptions?.preserveEnvVars)\n          ? true\n          : undefined,\n        // Pass the engine to babel so we can automatically transpile for the correct\n        // target environment.\n        engine: options.customTransformOptions?.engine,\n\n        // Provide the project root for accurately reading the Expo config.\n        projectRoot: options.projectRoot,\n\n        isNodeModule,\n\n        isHMREnabled: options.hot,\n      },\n    };\n\n    const useBabelCore =\n      isTypeScriptSource(filename) || isTSXSource(filename) || !options.hermesParser;\n    const parser = useBabelCore ? parseWithBabel : parseWithHermes;\n\n    const result = parser(src, babelConfig);\n\n    // The result from `transformFromAstSync` can be null (if the file is ignored)\n    if (!result) {\n      // BabelTransformer specifies that the `ast` can never be null but\n      // the function returns here. Discovered when typing `BabelNode`.\n      return { ast: null };\n    }\n\n    assert(result.ast);\n    return { ast: result.ast, metadata: result.metadata };\n  } finally {\n    if (OLD_BABEL_ENV) {\n      process.env.BABEL_ENV = OLD_BABEL_ENV;\n    }\n  }\n};\n\nfunction parseWithHermes(src: string, babelConfig: TransformOptions) {\n  const sourceAst = require('hermes-parser').parse(src, {\n    babel: true,\n    sourceType: babelConfig.sourceType,\n  });\n  return transformFromAstSync(sourceAst, src, babelConfig);\n}\n\nfunction parseWithBabel(src: string, babelConfig: TransformOptions) {\n  return transformSync(src, babelConfig);\n}\n\nfunction getCacheKey() {\n  const key = crypto.createHash('md5');\n  cacheKeyParts.forEach((part) => key.update(part));\n  return key.digest('hex');\n}\n\nconst babelTransformer: BabelTransformer = {\n  transform,\n  getCacheKey,\n};\n\nmodule.exports = babelTransformer;\n"],"mappings":"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"}