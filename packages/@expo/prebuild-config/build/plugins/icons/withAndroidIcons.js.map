{"version":3,"sources":["../../../src/plugins/icons/withAndroidIcons.ts"],"names":["Colors","AndroidConfig","dpiValues","mdpi","folderName","scale","hdpi","xhdpi","xxhdpi","xxxhdpi","BASELINE_PIXEL_SIZE","ANDROID_RES_PATH","MIPMAP_ANYDPI_V26","ICON_BACKGROUND","IC_LAUNCHER_PNG","IC_LAUNCHER_ROUND_PNG","IC_LAUNCHER_BACKGROUND_PNG","IC_LAUNCHER_FOREGROUND_PNG","IC_LAUNCHER_XML","IC_LAUNCHER_ROUND_XML","withAndroidIcons","config","foregroundImage","backgroundColor","backgroundImage","getAdaptiveIcon","icon","getIcon","withAndroidAdaptiveIconColors","setIconAsync","modRequest","projectRoot","isAdaptive","android","adaptiveIcon","setRoundIconManifest","manifest","application","Manifest","getMainApplicationOrThrow","$","modResults","setBackgroundColor","configureLegacyIconAsync","generateRoundIconAsync","deleteIconNamedAsync","configureAdaptiveIconAsync","generateMultiLayerImageAsync","outputImageFileName","imageCacheFolder","backgroundImageCacheFolder","borderRadiusRatio","backgroundImageFileName","icLauncherXmlString","createAdaptiveIconXmlString","createAdaptiveIconXmlFiles","colors","assignColorValue","value","name","background","add","anyDpiV26Directory","path","resolve","fs","ensureDir","launcherPath","launcherRoundPath","Promise","all","writeFile","map","existsSync","remove","iterateDpiValues","dpiFolder","iconLayer","generateIconAsync","cacheType","src","backgroundLayer","foreground","callback","Object","values","iconSizePx","width","height","resizeMode","borderRadius","undefined","source"],"mappings":"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","sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidColors,\n  withDangerousMod,\n} from '@expo/config-plugins';\nimport { ResourceXML } from '@expo/config-plugins/build/android/Resources';\nimport { ExpoConfig } from '@expo/config-types';\nimport { compositeImagesAsync, generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { withAndroidManifestIcons } from './withAndroidManifestIcons';\n\nconst { Colors } = AndroidConfig;\n\ntype DPIString = 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype dpiMap = Record<DPIString, { folderName: string; scale: number }>;\n\nexport const dpiValues: dpiMap = {\n  mdpi: { folderName: 'mipmap-mdpi', scale: 1 },\n  hdpi: { folderName: 'mipmap-hdpi', scale: 1.5 },\n  xhdpi: { folderName: 'mipmap-xhdpi', scale: 2 },\n  xxhdpi: { folderName: 'mipmap-xxhdpi', scale: 3 },\n  xxxhdpi: { folderName: 'mipmap-xxxhdpi', scale: 4 },\n};\nconst BASELINE_PIXEL_SIZE = 48;\nexport const ANDROID_RES_PATH = 'android/app/src/main/res/';\nconst MIPMAP_ANYDPI_V26 = 'mipmap-anydpi-v26';\nconst ICON_BACKGROUND = 'iconBackground';\nconst IC_LAUNCHER_PNG = 'ic_launcher.png';\nconst IC_LAUNCHER_ROUND_PNG = 'ic_launcher_round.png';\nconst IC_LAUNCHER_BACKGROUND_PNG = 'ic_launcher_background.png';\nconst IC_LAUNCHER_FOREGROUND_PNG = 'ic_launcher_foreground.png';\nconst IC_LAUNCHER_XML = 'ic_launcher.xml';\nconst IC_LAUNCHER_ROUND_XML = 'ic_launcher_round.xml';\n\nexport const withAndroidIcons: ConfigPlugin = config => {\n  const { foregroundImage, backgroundColor, backgroundImage } = getAdaptiveIcon(config);\n  const icon = foregroundImage ?? getIcon(config);\n\n  if (!icon) {\n    return config;\n  }\n\n  config = withAndroidManifestIcons(config);\n  // Apply colors.xml changes\n  config = withAndroidAdaptiveIconColors(config, backgroundColor);\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setIconAsync(config.modRequest.projectRoot, {\n        icon,\n        backgroundColor,\n        backgroundImage,\n        isAdaptive: !!config.android?.adaptiveIcon,\n      });\n      return config;\n    },\n  ]);\n};\n\nexport function setRoundIconManifest(\n  config: Pick<ExpoConfig, 'android'>,\n  manifest: AndroidConfig.Manifest.AndroidManifest\n): AndroidConfig.Manifest.AndroidManifest {\n  const isAdaptive = !!config.android?.adaptiveIcon;\n  const application = AndroidConfig.Manifest.getMainApplicationOrThrow(manifest);\n\n  if (isAdaptive) {\n    application.$['android:roundIcon'] = '@mipmap/ic_launcher_round';\n  } else {\n    delete application.$['android:roundIcon'];\n  }\n  return manifest;\n}\n\nconst withAndroidAdaptiveIconColors: ConfigPlugin<string | null> = (config, backgroundColor) => {\n  return withAndroidColors(config, config => {\n    config.modResults = setBackgroundColor(backgroundColor ?? '#FFFFFF', config.modResults);\n    return config;\n  });\n};\n\nexport function getIcon(config: ExpoConfig) {\n  return config.android?.icon || config.icon || null;\n}\n\nexport function getAdaptiveIcon(config: ExpoConfig) {\n  return {\n    foregroundImage: config.android?.adaptiveIcon?.foregroundImage ?? null,\n    backgroundColor: config.android?.adaptiveIcon?.backgroundColor ?? null,\n    backgroundImage: config.android?.adaptiveIcon?.backgroundImage ?? null,\n  };\n}\n\n/**\n * Resizes the user-provided icon to create a set of legacy icon files in\n * their respective \"mipmap\" directories for <= Android 7, and creates a set of adaptive\n * icon files for > Android 7 from the adaptive icon files (if provided).\n */\nexport async function setIconAsync(\n  projectRoot: string,\n  {\n    icon,\n    backgroundColor,\n    backgroundImage,\n    isAdaptive,\n  }: {\n    icon: string | null;\n    backgroundColor: string | null;\n    backgroundImage: string | null;\n    isAdaptive: boolean;\n  }\n) {\n  if (!icon) {\n    return null;\n  }\n\n  await configureLegacyIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n  if (isAdaptive) {\n    await generateRoundIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n  } else {\n    await deleteIconNamedAsync(projectRoot, IC_LAUNCHER_ROUND_PNG);\n  }\n  await configureAdaptiveIconAsync(projectRoot, icon, backgroundImage, isAdaptive);\n\n  return true;\n}\n\n/**\n * Configures legacy icon files to be used on Android 7 and earlier. If adaptive icon configuration\n * was provided, we create a pseudo-adaptive icon by layering the provided files (or background\n * color if no backgroundImage is provided. If no backgroundImage and no backgroundColor are provided,\n * the background is set to transparent.)\n */\nasync function configureLegacyIconAsync(\n  projectRoot: string,\n  icon: string,\n  backgroundImage: string | null,\n  backgroundColor: string | null\n) {\n  return generateMultiLayerImageAsync(projectRoot, {\n    icon,\n    backgroundImage,\n    backgroundColor,\n    outputImageFileName: IC_LAUNCHER_PNG,\n    imageCacheFolder: 'android-standard-square',\n    backgroundImageCacheFolder: 'android-standard-square-background',\n  });\n}\n\nasync function generateRoundIconAsync(\n  projectRoot: string,\n  icon: string,\n  backgroundImage: string | null,\n  backgroundColor: string | null\n) {\n  return generateMultiLayerImageAsync(projectRoot, {\n    icon,\n    borderRadiusRatio: 0.5,\n    outputImageFileName: IC_LAUNCHER_ROUND_PNG,\n    backgroundImage,\n    backgroundColor,\n    imageCacheFolder: 'android-standard-circle',\n    backgroundImageCacheFolder: 'android-standard-round-background',\n  });\n}\n\n/**\n * Configures adaptive icon files to be used on Android 8 and up. A foreground image must be provided,\n * and will have a transparent background unless:\n * - A backgroundImage is provided, or\n * - A backgroundColor was specified\n */\nexport async function configureAdaptiveIconAsync(\n  projectRoot: string,\n  foregroundImage: string,\n  backgroundImage: string | null,\n  isAdaptive: boolean\n) {\n  await generateMultiLayerImageAsync(projectRoot, {\n    backgroundColor: 'transparent',\n    backgroundImage,\n    backgroundImageCacheFolder: 'android-adaptive-background',\n    outputImageFileName: IC_LAUNCHER_FOREGROUND_PNG,\n    icon: foregroundImage,\n    imageCacheFolder: 'android-adaptive-foreground',\n    backgroundImageFileName: IC_LAUNCHER_BACKGROUND_PNG,\n  });\n\n  // create ic_launcher.xml and ic_launcher_round.xml\n  const icLauncherXmlString = createAdaptiveIconXmlString(backgroundImage);\n  await createAdaptiveIconXmlFiles(\n    projectRoot,\n    icLauncherXmlString,\n    // If the user only defined icon and not android.adaptiveIcon, then skip enabling the layering system\n    // this will scale the image down and present it uncropped.\n    isAdaptive\n  );\n}\n\nfunction setBackgroundColor(backgroundColor: string | null, colors: ResourceXML) {\n  return Colors.assignColorValue(colors, {\n    value: backgroundColor,\n    name: ICON_BACKGROUND,\n  });\n}\n\nexport const createAdaptiveIconXmlString = (backgroundImage: string | null) => {\n  const background = backgroundImage ? `@mipmap/ic_launcher_background` : `@color/iconBackground`;\n\n  return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <background android:drawable=\"${background}\"/>\n    <foreground android:drawable=\"@mipmap/ic_launcher_foreground\"/>\n</adaptive-icon>`;\n};\n\nasync function createAdaptiveIconXmlFiles(\n  projectRoot: string,\n  icLauncherXmlString: string,\n  add: boolean\n) {\n  const anyDpiV26Directory = path.resolve(projectRoot, ANDROID_RES_PATH, MIPMAP_ANYDPI_V26);\n  await fs.ensureDir(anyDpiV26Directory);\n  const launcherPath = path.resolve(anyDpiV26Directory, IC_LAUNCHER_XML);\n  const launcherRoundPath = path.resolve(anyDpiV26Directory, IC_LAUNCHER_ROUND_XML);\n  if (add) {\n    await Promise.all([\n      fs.writeFile(launcherPath, icLauncherXmlString),\n      fs.writeFile(launcherRoundPath, icLauncherXmlString),\n    ]);\n  } else {\n    // Remove the xml if the icon switches from adaptive to standard.\n    await Promise.all(\n      [launcherPath, launcherRoundPath].map(async path => {\n        if (fs.existsSync(path)) {\n          return fs.remove(path);\n        }\n      })\n    );\n  }\n}\n\nasync function generateMultiLayerImageAsync(\n  projectRoot: string,\n  {\n    icon,\n    backgroundColor,\n    backgroundImage,\n    imageCacheFolder,\n    backgroundImageCacheFolder,\n    borderRadiusRatio,\n    outputImageFileName,\n    backgroundImageFileName,\n  }: {\n    icon: string;\n    backgroundImage: string | null;\n    backgroundColor: string | null;\n    imageCacheFolder: string;\n    backgroundImageCacheFolder: string;\n    backgroundImageFileName?: string;\n    borderRadiusRatio?: number;\n    outputImageFileName: string;\n  }\n) {\n  await iterateDpiValues(projectRoot, async ({ dpiFolder, scale }) => {\n    let iconLayer = await generateIconAsync(projectRoot, {\n      cacheType: imageCacheFolder,\n      src: icon,\n      scale,\n      // backgroundImage overrides backgroundColor\n      backgroundColor: backgroundImage ? 'transparent' : backgroundColor ?? 'transparent',\n      borderRadiusRatio,\n    });\n\n    if (backgroundImage) {\n      const backgroundLayer = await generateIconAsync(projectRoot, {\n        cacheType: backgroundImageCacheFolder,\n        src: backgroundImage,\n        scale,\n        backgroundColor: 'transparent',\n        borderRadiusRatio,\n      });\n\n      if (backgroundImageFileName) {\n        await fs.writeFile(path.resolve(dpiFolder, backgroundImageFileName), backgroundLayer);\n      } else {\n        iconLayer = await compositeImagesAsync({\n          foreground: iconLayer,\n          background: backgroundLayer,\n        });\n      }\n    } else if (backgroundImageFileName) {\n      // Remove any instances of ic_launcher_background.png that are there from previous icons\n      await deleteIconNamedAsync(projectRoot, backgroundImageFileName);\n    }\n\n    await fs.ensureDir(dpiFolder);\n    await fs.writeFile(path.resolve(dpiFolder, outputImageFileName), iconLayer);\n  });\n}\n\nfunction iterateDpiValues(\n  projectRoot: string,\n  callback: (value: { dpiFolder: string; folderName: string; scale: number }) => Promise<void>\n) {\n  return Promise.all(\n    Object.values(dpiValues).map(value =>\n      callback({\n        dpiFolder: path.resolve(projectRoot, ANDROID_RES_PATH, value.folderName),\n        ...value,\n      })\n    )\n  );\n}\n\nasync function deleteIconNamedAsync(projectRoot: string, name: string) {\n  return iterateDpiValues(projectRoot, ({ dpiFolder }) => {\n    return fs.remove(path.resolve(dpiFolder, name));\n  });\n}\n\nasync function generateIconAsync(\n  projectRoot: string,\n  {\n    cacheType,\n    src,\n    scale,\n    backgroundColor,\n    borderRadiusRatio,\n  }: {\n    cacheType: string;\n    src: string;\n    scale: number;\n    backgroundColor: string;\n    borderRadiusRatio?: number;\n  }\n) {\n  const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n  return (\n    await generateImageAsync(\n      { projectRoot, cacheType },\n      {\n        src,\n        width: iconSizePx,\n        height: iconSizePx,\n        resizeMode: 'cover',\n        backgroundColor,\n        borderRadius: borderRadiusRatio ? iconSizePx * borderRadiusRatio : undefined,\n      }\n    )\n  ).source;\n}\n"],"file":"withAndroidIcons.js"}