{"version":3,"sources":["../../../../src/plugins/unversioned/expo-splash-screen/wtihIosSplashScreenStoryboardImage.ts"],"names":["withIosSplashScreenImage","config","splash","modResults","applySplashScreenStoryboard","obj","resizeMode","splashScreenImagePresent","Boolean","image","imageName","contentMode","getImageContentMode","Error"],"mappings":";;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,wBAAuD,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AACzF,SAAO,oEAA8BD,MAA9B,EAAsCA,MAAM,IAAI;AACrDA,IAAAA,MAAM,CAACE,UAAP,GAAoBC,2BAA2B,CAACH,MAAM,CAACE,UAAR,EAAoBD,MAApB,CAA/C;AACA,WAAOD,MAAP;AACD,GAHM,CAAP;AAID,CALM;;;;AAOA,SAASG,2BAAT,CAAqCC,GAArC,EAAkEH,MAAlE,EAA2F;AAChG,QAAMI,UAAU,GAAGJ,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEI,UAA3B;AACA,QAAMC,wBAAwB,GAAGC,OAAO,CAACN,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEO,KAAT,CAAxC;AACA,QAAMC,SAAS,GAAG,cAAlB,CAHgG,CAIhG;;AACA,MAAIH,wBAAJ,EAA8B;AAC5B,UAAMI,WAAW,GAAGC,mBAAmB,CAACN,UAAU,IAAI,SAAf,CAAvC;AACA,WAAO,qDAA4BD,GAA5B,EAAiC;AACtCM,MAAAA,WADsC;AAEtCD,MAAAA;AAFsC,KAAjC,CAAP;AAID;;AAED,SAAO,qDAA4BL,GAA5B,EAAiC;AAAEK,IAAAA;AAAF,GAAjC,CAAP;AACD;;AAED,SAASE,mBAAT,CAA6BN,UAA7B,EAAmE;AACjE,UAAQA,UAAR;AACE,SAAK,SAAL;AACE,aAAO,gBAAP;;AACF,SAAK,OAAL;AACE,aAAO,iBAAP;;AACF;AACE,YAAM,IAAIO,KAAJ,CAAW,kBAAiBP,UAAW,wCAAvC,CAAN;AANJ;AAQD","sourcesContent":["import { ConfigPlugin } from '@expo/config-plugins';\n\nimport {\n  applyImageToSplashScreenXML,\n  IBSplashScreenDocument,\n  ImageContentMode,\n  removeImageFromSplashScreen,\n} from './InterfaceBuilder';\nimport { IOSSplashConfig } from './getIosSplashConfig';\nimport { withIosSplashScreenStoryboard } from './withIosSplashScreenStoryboard';\n\nexport const withIosSplashScreenImage: ConfigPlugin<IOSSplashConfig> = (config, splash) => {\n  return withIosSplashScreenStoryboard(config, config => {\n    config.modResults = applySplashScreenStoryboard(config.modResults, splash);\n    return config;\n  });\n};\n\nexport function applySplashScreenStoryboard(obj: IBSplashScreenDocument, splash: IOSSplashConfig) {\n  const resizeMode = splash?.resizeMode;\n  const splashScreenImagePresent = Boolean(splash?.image);\n  const imageName = 'SplashScreen';\n  // Only get the resize mode when the image is present.\n  if (splashScreenImagePresent) {\n    const contentMode = getImageContentMode(resizeMode || 'contain');\n    return applyImageToSplashScreenXML(obj, {\n      contentMode,\n      imageName,\n    });\n  }\n\n  return removeImageFromSplashScreen(obj, { imageName });\n}\n\nfunction getImageContentMode(resizeMode: string): ImageContentMode {\n  switch (resizeMode) {\n    case 'contain':\n      return 'scaleAspectFit';\n    case 'cover':\n      return 'scaleAspectFill';\n    default:\n      throw new Error(`{ resizeMode: \"${resizeMode}\" } is not supported for iOS platform.`);\n  }\n}\n"],"file":"wtihIosSplashScreenStoryboardImage.js"}