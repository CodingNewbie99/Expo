{"version":3,"sources":["../../../../src/plugins/unversioned/expo-splash-screen/InterfaceBuilder.ts"],"names":["debug","require","createConstraint","firstItem","firstAttribute","secondItem","secondAttribute","constant","$","id","createConstraintId","attributes","crypto","createHash","update","join","digest","IMAGE_ID","CONTAINER_ID","removeImageFromSplashScreen","xml","imageName","mainView","document","scenes","scene","objects","viewController","view","removeExisting","subviews","imageView","getAbsoluteConstraints","forEach","constraint","constrainsArray","constraints","imageSection","resources","image","existingImageIndex","findIndex","name","splice","childId","parentId","applyImageToSplashScreenXML","contentMode","width","height","userLabel","horizontalHuggingPriority","verticalHuggingPriority","clipsSubviews","userInteractionEnabled","translatesAutoresizingMaskIntoConstraints","rect","key","x","y","ensureUniquePush","push","array","item","existingItem","toString","builder","Builder","preserveChildrenOrder","xmldec","version","encoding","renderOpts","pretty","indent","buildObject","toObjectAsync","contents","Parser","parseStringPromise"],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport { Builder, Parser } from 'xml2js';\n\nconst debug = require('debug')(\n  'expo:prebuild-config:expo-splash-screen:ios:InterfaceBuilder'\n) as typeof console.log;\n\nexport type IBBoolean = 'YES' | 'NO' | boolean;\n\nexport type IBItem<\n  H extends Record<string, any>,\n  B extends Record<string, any[]> = { [key: string]: any }\n> = {\n  $: H;\n} & B;\n\nexport type Rect = {\n  key: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type IBRect = IBItem<Rect>;\n\nexport type IBAutoresizingMask = IBItem<{\n  /** @example `autoresizingMask` */\n  key: string;\n  flexibleMaxX: IBBoolean;\n  flexibleMaxY: IBBoolean;\n}>;\n\n/** @example `<color key=\"textColor\" systemColor=\"linkColor\"/>` */\nexport type IBColor = IBItem<\n  {\n    /** @example `textColor` */\n    key: string;\n  } & (\n    | /** Custom color */\n    {\n        /** @example `0.86584504117670746` */\n        red: number;\n        /** @example `0.26445041990630447` */\n        green: number;\n        /** @example `0.3248577810203549` */\n        blue: number;\n        /** @example `1` */\n        alpha: number;\n        colorSpace: 'custom' | string;\n        customColorSpace: 'displayP3' | 'sRGB' | string;\n      }\n    /** Built-in color */\n    | {\n        systemColor: 'linkColor' | string;\n      }\n  )\n>;\n\nexport type IBFontDescription = IBItem<{\n  /** @example `fontDescription` */\n  key: string;\n  /** Font size */\n  pointSize: number;\n\n  /** Custom font */\n  name?: 'HelveticaNeue' | string;\n  family?: 'Helvetica Neue' | string;\n\n  /** Built-in font */\n  type?: 'system' | 'boldSystem' | 'UICTFontTextStyleCallout' | 'UICTFontTextStyleBody' | string;\n}>;\n\nexport type ImageContentMode = 'scaleAspectFit' | 'scaleAspectFill';\n\nexport type ConstraintAttribute = 'top' | 'bottom' | 'trailing' | 'leading';\n\nexport type IBImageView = IBItem<\n  {\n    id: string;\n    userLabel: string;\n    image: string;\n    clipsSubviews?: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: IBContentMode;\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    insetsLayoutMarginsFromSafeArea?: IBBoolean;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n  },\n  {\n    rect: IBRect[];\n  }\n>;\n\nexport type IBLabel = IBItem<\n  {\n    id: string;\n    /** The main value. */\n    text: string;\n\n    opaque: IBBoolean;\n    fixedFrame: IBBoolean;\n    textAlignment?: IBTextAlignment;\n    lineBreakMode:\n      | 'clip'\n      | 'characterWrap'\n      | 'wordWrap'\n      | 'headTruncation'\n      | 'middleTruncation'\n      | 'tailTruncation';\n    baselineAdjustment?: 'none' | 'alignBaselines';\n    adjustsFontSizeToFit: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: IBContentMode;\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n  },\n  {\n    /** @example `<rect key=\"frame\" x=\"175\" y=\"670\" width=\"35\" height=\"17\"/>` */\n    rect: IBRect[];\n    /** @example `<autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>` */\n    autoresizingMask?: IBAutoresizingMask[];\n    /** @example `<fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"19\"/>` */\n    fontDescription?: IBFontDescription[];\n    /** @example `<color key=\"textColor\" red=\"0.0\" green=\"0.0\" blue=\"0.0\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>` */\n    color?: IBColor[];\n    nil?: IBItem<{\n      /** @example `textColor` `highlightedColor` */\n      key: string;\n    }>[];\n  }\n>;\n\nexport type IBTextAlignment = 'left' | 'center' | 'right' | 'justified' | 'natural';\n\nexport type IBContentMode = string | 'left' | 'scaleAspectFill';\n\nexport type IBConstraint = IBItem<{\n  firstItem: string;\n  firstAttribute: ConstraintAttribute;\n  secondItem: string;\n  secondAttribute: ConstraintAttribute;\n  constant?: number;\n  id: string;\n}>;\n\nexport type IBViewController = IBItem<\n  {\n    id: string;\n    placeholderIdentifier?: string;\n    userLabel: string;\n    sceneMemberID: string;\n  },\n  {\n    view: IBItem<\n      {\n        id: string;\n        key: string;\n        userInteractionEnabled: IBBoolean;\n        contentMode: string | 'scaleToFill';\n        insetsLayoutMarginsFromSafeArea: IBBoolean;\n        userLabel: string;\n      },\n      {\n        rect: IBRect[];\n        autoresizingMask: IBItem<{\n          key: string;\n          flexibleMaxX: IBBoolean;\n          flexibleMaxY: IBBoolean;\n        }>[];\n\n        subviews: IBItem<\n          object,\n          {\n            imageView: IBImageView[];\n            label: IBLabel[];\n          }\n        >[];\n        color: IBItem<{\n          key: string | 'backgroundColor';\n          systemColor: string | 'systemBackgroundColor';\n        }>[];\n        constraints: IBItem<\n          object,\n          {\n            constraint: IBConstraint[];\n          }\n        >[];\n        viewLayoutGuide: IBItem<{\n          id: string;\n          key: string | 'safeArea';\n        }>[];\n      }\n    >[];\n  }\n>;\n\nexport type IBPoint = IBItem<{\n  key: string | 'canvasLocation';\n  x: number;\n  y: number;\n}>;\n\nexport type IBScene = IBItem<\n  { sceneID: string },\n  {\n    objects: {\n      viewController: IBViewController[];\n      placeholder: IBItem<{\n        id: string;\n        placeholderIdentifier?: string;\n        userLabel: string;\n        sceneMemberID: string;\n      }>[];\n    }[];\n    point: IBPoint[];\n  }\n>;\n\nexport type IBResourceImage = IBItem<{\n  name: string;\n  width: number;\n  height: number;\n}>;\n\nexport type IBDevice = IBItem<{\n  id: string;\n  orientation: string | 'portrait';\n  appearance: string | 'light';\n}>;\n\nexport type IBSplashScreenDocument = {\n  document: IBItem<\n    {\n      type: 'com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB' | string;\n      version: '3.0' | string;\n      toolsVersion: number;\n      targetRuntime: 'iOS.CocoaTouch' | string;\n      propertyAccessControl: 'none' | string;\n      useAutolayout: IBBoolean;\n      launchScreen: IBBoolean;\n      useTraitCollections: IBBoolean;\n      useSafeAreas: IBBoolean;\n      colorMatched: IBBoolean;\n      initialViewController: string;\n    },\n    {\n      device: IBDevice[];\n      dependencies: unknown[];\n      scenes: {\n        scene: IBScene[];\n      }[];\n      resources: {\n        image: IBResourceImage[];\n      }[];\n    }\n  >;\n};\n\nexport function createConstraint(\n  [firstItem, firstAttribute]: [string, ConstraintAttribute],\n  [secondItem, secondAttribute]: [string, ConstraintAttribute],\n  constant?: number\n): IBConstraint {\n  return {\n    $: {\n      firstItem,\n      firstAttribute,\n      secondItem,\n      secondAttribute,\n      constant,\n      // Prevent updating between runs\n      id: createConstraintId(firstItem, firstAttribute, secondItem, secondAttribute),\n    },\n  };\n}\n\nexport function createConstraintId(...attributes: string[]) {\n  return crypto.createHash('sha1').update(attributes.join('-')).digest('hex');\n}\n\nconst IMAGE_ID = 'EXPO-SplashScreen';\nconst CONTAINER_ID = 'EXPO-ContainerView';\n\nexport function removeImageFromSplashScreen(\n  xml: IBSplashScreenDocument,\n  { imageName }: { imageName: string }\n) {\n  const mainView = xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0];\n\n  debug(`Remove all splash screen image elements`);\n\n  removeExisting(mainView.subviews[0].imageView, IMAGE_ID);\n\n  // Add Constraints\n  getAbsoluteConstraints(IMAGE_ID, CONTAINER_ID).forEach((constraint) => {\n    // <constraint firstItem=\"EXPO-SplashScreen\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"2VS-Uz-0LU\"/>\n    const constrainsArray = mainView.constraints[0].constraint;\n    removeExisting(constrainsArray, constraint);\n  });\n\n  // Add resource\n  const imageSection = xml.document.resources[0].image;\n\n  const existingImageIndex = imageSection.findIndex((image) => image.$.name === imageName);\n  if (existingImageIndex > -1) {\n    imageSection.splice(existingImageIndex, 1);\n  }\n  return xml;\n}\n\nfunction getAbsoluteConstraints(childId: string, parentId: string) {\n  return [\n    createConstraint([childId, 'top'], [parentId, 'top']),\n    createConstraint([childId, 'leading'], [parentId, 'leading']),\n    createConstraint([childId, 'trailing'], [parentId, 'trailing']),\n    createConstraint([childId, 'bottom'], [parentId, 'bottom']),\n  ];\n}\n\nexport function applyImageToSplashScreenXML(\n  xml: IBSplashScreenDocument,\n  {\n    imageName,\n    contentMode,\n  }: {\n    imageName: string;\n    contentMode: ImageContentMode;\n  }\n): IBSplashScreenDocument {\n  const width = 414;\n  const height = 736;\n\n  const imageView: IBImageView = {\n    $: {\n      id: IMAGE_ID,\n      userLabel: imageName,\n      image: imageName,\n      contentMode,\n      horizontalHuggingPriority: 251,\n      verticalHuggingPriority: 251,\n      clipsSubviews: true,\n      userInteractionEnabled: false,\n      translatesAutoresizingMaskIntoConstraints: false,\n    },\n    rect: [\n      {\n        $: {\n          key: 'frame',\n          x: 0.0,\n          y: 0.0,\n          width,\n          height,\n        },\n      },\n    ],\n  };\n\n  const mainView = xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0];\n\n  // Add ImageView\n  ensureUniquePush(mainView.subviews[0].imageView, imageView);\n\n  // Add Constraints\n  getAbsoluteConstraints(IMAGE_ID, CONTAINER_ID).forEach((constraint) => {\n    // <constraint firstItem=\"EXPO-SplashScreen\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"2VS-Uz-0LU\"/>\n    const constrainsArray = mainView.constraints[0].constraint;\n    ensureUniquePush(constrainsArray, constraint);\n  });\n\n  // Add resource\n  const imageSection = xml.document.resources[0].image;\n\n  const existingImageIndex = imageSection.findIndex((image) => image.$.name === imageName);\n  if (existingImageIndex > -1) {\n    debug(`Removing existing IB image asset at index ${existingImageIndex}`);\n    imageSection.splice(existingImageIndex, 1);\n  }\n  imageSection.push({\n    // <image name=\"SplashScreen\" width=\"414\" height=\"736\"/>\n    $: {\n      name: imageName,\n      width,\n      height,\n    },\n  });\n\n  return xml;\n}\n\n/**\n * IB does not allow two items to have the same ID.\n * This method will add an item by first removing any existing item with the same `$.id`.\n */\nexport function ensureUniquePush<TItem extends { $: { id: string } }>(array: TItem[], item: TItem) {\n  if (!array) return array;\n  removeExisting(array, item);\n  array.push(item);\n  return array;\n}\n\nexport function removeExisting<TItem extends { $: { id: string } }>(\n  array: TItem[],\n  item: TItem | string\n) {\n  const id = typeof item === 'string' ? item : item.$?.id;\n  const existingItem = array?.findIndex((existingItem) => existingItem.$.id === id);\n  if (existingItem > -1) {\n    debug(`Removing existing IB item with id ${id}, from: %O`, array);\n    array.splice(existingItem, 1);\n  }\n  return array;\n}\n\n// Attempt to copy Xcode formatting.\nexport function toString(xml: any): string {\n  const builder = new Builder({\n    // @ts-expect-error: untyped\n    preserveChildrenOrder: true,\n    xmldec: {\n      version: '1.0',\n      encoding: 'UTF-8',\n    },\n    renderOpts: {\n      pretty: true,\n      indent: '    ',\n    },\n  });\n  return builder.buildObject(xml);\n}\n\n/** Parse string contents into an object. */\nexport function toObjectAsync(contents: string) {\n  return new Parser().parseStringPromise(contents);\n}\n"],"file":"InterfaceBuilder.js"}