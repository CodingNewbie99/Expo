{"version":3,"file":"env.js","names":["debug","require","createControlledEnvironment","IS_DEBUG","enabled","userDefinedEnvironment","undefined","memoEnvironment","_getForce","projectRoot","process","env","dotenvFiles","getFiles","NODE_ENV","loadedEnvFiles","parsed","forEach","dotenvFile","absoluteDotenvFile","path","resolve","fs","existsSync","results","expand","dotenv","config","override","push","key","Object","keys","error","Error","console","message","length","get","force","load","mode","includes","filter","Boolean"],"sources":["../src/env.ts"],"sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as dotenv from 'dotenv';\nimport { expand } from 'dotenv-expand';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst debug = require('debug')('expo:env') as typeof console.log;\n\nexport function createControlledEnvironment() {\n  const IS_DEBUG = require('debug').enabled('expo:env');\n\n  let userDefinedEnvironment: NodeJS.ProcessEnv | undefined = undefined;\n  let memoEnvironment: NodeJS.ProcessEnv | undefined = undefined;\n\n  function _getForce(projectRoot: string): Record<string, string | undefined> {\n    if (!userDefinedEnvironment) {\n      userDefinedEnvironment = { ...process.env };\n    }\n\n    // https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\n    const dotenvFiles = getFiles(process.env.NODE_ENV);\n\n    const loadedEnvFiles: string[] = [];\n    const parsed: dotenv.DotenvParseOutput = {};\n\n    // Load environment variables from .env* files. Suppress warnings using silent\n    // if this file is missing. dotenv will never modify any environment variables\n    // that have already been set. Variable expansion is supported in .env files.\n    // https://github.com/motdotla/dotenv\n    // https://github.com/motdotla/dotenv-expand\n    dotenvFiles.forEach((dotenvFile) => {\n      const absoluteDotenvFile = path.resolve(projectRoot, dotenvFile);\n      if (!fs.existsSync(absoluteDotenvFile)) {\n        return;\n      }\n      try {\n        const results = expand(\n          dotenv.config({\n            debug: IS_DEBUG,\n            path: absoluteDotenvFile,\n            // We will handle overriding ourselves to allow for HMR.\n            override: true,\n          })\n        );\n        if (results.parsed) {\n          loadedEnvFiles.push(absoluteDotenvFile);\n          debug(`Loaded environment variables from: ${absoluteDotenvFile}`);\n\n          for (const key of Object.keys(results.parsed || {})) {\n            if (\n              typeof parsed[key] === 'undefined' &&\n              // Custom override logic to prevent overriding variables that\n              // were set before the CLI process began.\n              typeof userDefinedEnvironment?.[key] === 'undefined'\n            ) {\n              parsed[key] = results.parsed[key];\n            }\n          }\n        } else {\n          debug(`Failed to load environment variables from: ${absoluteDotenvFile}`);\n        }\n      } catch (error: unknown) {\n        if (error instanceof Error) {\n          console.error(\n            `Failed to load environment variables from ${absoluteDotenvFile}: ${error.message}`\n          );\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    if (!loadedEnvFiles.length) {\n      debug(`No environment variables loaded from .env files.`);\n    }\n\n    return parsed;\n  }\n\n  /** Get the environment variables without mutating the environment. This returns memoized values unless the `force` property is provided. */\n  function get(\n    projectRoot: string,\n    { force }: { force?: boolean } = {}\n  ): Record<string, string | undefined> {\n    if (!force && memoEnvironment) {\n      return memoEnvironment;\n    }\n    memoEnvironment = _getForce(projectRoot);\n    return memoEnvironment;\n  }\n\n  /** Load environment variables from .env files and mutate the current `process.env` with the results. */\n  function load(projectRoot: string, { force }: { force?: boolean } = {}) {\n    const env = get(projectRoot, { force });\n    process.env = { ...process.env, ...env };\n    return process.env;\n  }\n\n  return {\n    load,\n    get,\n    _getForce,\n  };\n}\n\nexport function getFiles(mode: string | undefined): string[] {\n  if (!mode) {\n    throw new Error('The NODE_ENV environment variable is required but was not specified.');\n  }\n\n  if (!mode || !['development', 'test', 'production'].includes(mode)) {\n    throw new Error(\n      `Environment variable \"NODE_ENV=${mode}\" is invalid. Valid values are \"development\", \"test\", and \"production`\n    );\n  }\n\n  // https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\n  const dotenvFiles = [\n    `.env.${mode}.local`,\n    // Don't include `.env.local` for `test` environment\n    // since normally you expect tests to produce the same\n    // results for everyone\n    mode !== 'test' && `.env.local`,\n    `.env.${mode}`,\n    '.env',\n  ].filter(Boolean) as string[];\n\n  return dotenvFiles;\n}\n"],"mappings":"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"}