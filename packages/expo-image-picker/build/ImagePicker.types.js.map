{"version":3,"file":"ImagePicker.types.js","sourceRoot":"","sources":["../src/ImagePicker.types.ts"],"names":[],"mappings":"AASA,MAAM,CAAN,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,+BAAW,CAAA;IACX,qCAAiB,CAAA;IACjB,qCAAiB,CAAA;AACnB,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B;AAED,MAAM,CAAN,IAAY,iBAYX;AAZD,WAAY,iBAAiB;IAC3B,uEAAe,CAAA;IACf,qEAAc,CAAA;IACd,2EAAiB,CAAA;IACjB,6EAAkB,CAAA;IAClB,yEAAgB,CAAA;IAChB,yEAAgB,CAAA;IAChB,2EAAiB,CAAA;IACjB,6EAAkB,CAAA;IAClB,6EAAkB,CAAA;IAClB,6EAAkB,CAAA;IAClB,8EAAmB,CAAA;AACrB,CAAC,EAZW,iBAAiB,KAAjB,iBAAiB,QAY5B","sourcesContent":["import { PermissionResponse } from 'unimodules-permissions-interface';\n\nexport { PermissionResponse as CameraPermissionResponse };\n\nexport type CameraRollPermissionResponse = PermissionResponse & {\n  // iOS only\n  scope?: 'all' | 'limited' | 'none';\n};\n\nexport enum MediaTypeOptions {\n  All = 'All',\n  Videos = 'Videos',\n  Images = 'Images',\n}\n\nexport enum VideoExportPreset {\n  Passthrough = 0,\n  LowQuality = 1,\n  MediumQuality = 2,\n  HighestQuality = 3,\n  H264_640x480 = 4,\n  H264_960x540 = 5,\n  H264_1280x720 = 6,\n  H264_1920x1080 = 7,\n  H264_3840x2160 = 8,\n  HEVC_1920x1080 = 9,\n  HEVC_3840x2160 = 10,\n}\n\nexport type ImageInfo = {\n  uri: string;\n  width: number;\n  height: number;\n  type?: 'image' | 'video';\n  exif?: { [key: string]: any };\n  base64?: string;\n};\n\nexport type ImagePickerResult = { cancelled: true } | ({ cancelled: false } & ImageInfo);\n// I think we should add diffrent type if we return multiple images/videos\n// For example, it could look like this:\nexport type ImagePickerMultipleResult = { cancelled: true } | ({ cancelled: false; selected: ImageInfo[] });\n\n\nexport type ImagePickerOptions = {\n  allowsEditing?: boolean;\n  aspect?: [number, number];\n  quality?: number;\n  allowsMultipleSelection?: boolean;\n  mediaTypes?: MediaTypeOptions;\n  exif?: boolean;\n  base64?: boolean;\n  videoExportPreset?: VideoExportPreset;\n};\n\nexport type OpenFileBrowserOptions = {\n  mediaTypes: MediaTypeOptions;\n  capture?: boolean;\n  allowsMultipleSelection: boolean;\n};\n\n// These hacks allow to expand nested types in type hints\n// see https://stackoverflow.com/questions/60795256/typescript-type-merging\nexport type Primitive = string | number | boolean | bigint | symbol | null | undefined;\nexport type Expand<T> = T extends Primitive ? T : { [K in keyof T]: T[K] };"]}