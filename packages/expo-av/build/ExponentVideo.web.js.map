{"version":3,"file":"ExponentVideo.web.js","sourceRoot":"","sources":["../src/ExponentVideo.web.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAQ,MAAM,cAAc,CAAC;AA6BhD,MAAM,CAAC,MAAM,qCAAqC,GAAG,CAAC,CAAC;AACvD,MAAM,CAAC,MAAM,oCAAoC,GAAG,CAAC,CAAC;AACtD,MAAM,CAAC,MAAM,qCAAqC,GAAG,CAAC,CAAC;AACvD,MAAM,CAAC,MAAM,oCAAoC,GAAG,CAAC,CAAC;AAEtD,MAAM,CAAC,MAAM,yCAAyC,GAAG,qCAAqC,CAAC;AAC/F,MAAM,CAAC,MAAM,wCAAwC,GAAG,oCAAoC,CAAC;AAC7F,MAAM,CAAC,MAAM,yCAAyC,GAAG,qCAAqC,CAAC;AAC/F,MAAM,CAAC,MAAM,wCAAwC,GAAG,oCAAoC,CAAC;AAE7F,SAAS,kBAAkB,CAAC,KAAwB;IAClD,IAAI,CAAC,KAAK,EAAE;QACV,OAAO;YACL,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE,SAAS;SACjB,CAAC;KACH;IAED,MAAM,SAAS,GAAG,CAAC,CAAC,CAClB,KAAK,CAAC,WAAW,GAAG,CAAC;QACrB,CAAC,KAAK,CAAC,MAAM;QACb,CAAC,KAAK,CAAC,KAAK;QACZ,KAAK,CAAC,UAAU,GAAG,CAAC,CACrB,CAAC;IACF,MAAM,MAAM,GAAmB;QAC7B,QAAQ,EAAE,IAAI;QACd,kCAAkC;QAClC,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,4BAA4B,EAAE,GAAG;QACjC,cAAc,EAAE,KAAK,CAAC,QAAQ,GAAG,IAAI;QACrC,cAAc,EAAE,KAAK,CAAC,WAAW,GAAG,IAAI;QACxC,iDAAiD;QACjD,qCAAqC;QACrC,oCAAoC;QAEpC,UAAU,EAAE,KAAK,CAAC,QAAQ;QAC1B,SAAS;QACT,WAAW,EAAE,KAAK;QAElB,IAAI,EAAE,KAAK,CAAC,YAAY;QACxB,kBAAkB,EAAE,KAAK;QACzB,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,OAAO,EAAE,KAAK,CAAC,KAAK;QACpB,SAAS,EAAE,KAAK,CAAC,IAAI;QAErB,aAAa,EAAE,KAAK,CAAC,KAAK;KAC3B,CAAC;IACF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,KAAK,CAAC,SAA6B;IAA9E;;QAGE,mBAAc,GAAG,GAAG,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;gBAC9B,OAAO;aACR;YAED,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC;QACF,gBAAW,GAAG,GAAG,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;gBAC3B,OAAO;aACR;YACD,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YACzB,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;QAEF,iBAAY,GAAG,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACtB,OAAO;aACR;YACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACrC,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;QAEF,YAAO,GAAG,KAAK,CAAC,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBACvB,OAAO;aACR;YACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACtC,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;QAEF,eAAU,GAAG,GAAG,EAAE;YAChB,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;QAEF,cAAS,GAAG,GAAG,EAAE;YACf,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;QAEF,YAAO,GAAG,GAAG,EAAE;YACb,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;QAEF,qBAAgB,GAAG,GAAG,EAAE;YACtB,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;QAEF,cAAS,GAAG,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE;YAC9B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE;gBACjC,OAAO;aACR;YACD,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAC1C,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;QAEF,cAAS,GAAG,GAAG,EAAE;YACf,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;QAEF,UAAK,GAAG,CAAC,GAAqB,EAAE,EAAE;YAChC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;YAClB,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC;IA0BJ,CAAC;IAxBC,MAAM;QACJ,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,EAAE,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACrE,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QACrC,OAAO,CACL,CAAC,KAAK,CACJ,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAChB,WAAW,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAC9B,YAAY,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAChC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CACtB,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAC5B,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAC1B,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CACtB,gBAAgB,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CACxC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAC1B,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAC1B,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,CACxC,KAAK,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CACtB,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CACvB,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAC5B,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAC5B,KAAK,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAQ,CAAC,EACxC,CACH,CAAC;IACJ,CAAC;CACF","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { PlaybackNativeSource, PlaybackStatus, PlaybackStatusToSet } from './AV';\n\ntype ExponentVideoProps = {\n  source: PlaybackNativeSource | null;\n  resizeMode?: Object;\n  status?: PlaybackStatusToSet;\n  useNativeControls?: boolean;\n  onStatusUpdate?: (event: Object) => void;\n  onReadyForDisplay?: (event: Object) => void;\n  onFullscreenUpdate?: (event: Object) => void;\n  onLoadStart: () => void;\n  onLoad: (event: { nativeEvent: PlaybackStatus }) => void;\n  onError: (event: { nativeEvent: { error: string } }) => void;\n  // Required by react-native\n  scaleX?: number;\n  scaleY?: number;\n  translateX?: number;\n  translateY?: number;\n  rotation?: number;\n} & React.ComponentProps<typeof View>;\n\nexport type NaturalSize = {\n  width: number;\n  height: number;\n  orientation: 'portrait' | 'landscape';\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nfunction getStatusFromVideo(video?: HTMLVideoElement): PlaybackStatus {\n  if (!video) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    video.currentTime > 0 &&\n    !video.paused &&\n    !video.ended &&\n    video.readyState > 2\n  );\n  const status: PlaybackStatus = {\n    isLoaded: true,\n    // androidImplementation?: string,\n    uri: video.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: video.duration * 1000,\n    positionMillis: video.currentTime * 1000,\n    // playableDurationMillis: video.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n\n    shouldPlay: video.autoplay,\n    isPlaying,\n    isBuffering: false, //video.waiting, // false, // TODO: Bacon: research\n\n    rate: video.playbackRate,\n    shouldCorrectPitch: false, // TODO: Bacon: research\n    volume: video.volume,\n    isMuted: video.muted,\n    isLooping: video.loop,\n\n    didJustFinish: video.ended, // true exactly once when the track plays to finish\n  };\n  console.log(status);\n  return status;\n}\n\nexport default class ExponentVideo extends React.Component<ExponentVideoProps> {\n  _video?: HTMLVideoElement;\n\n  onStatusUpdate = () => {\n    if (!this.props.onStatusUpdate) {\n      return;\n    }\n\n    this.props.onStatusUpdate(getStatusFromVideo(this._video));\n  };\n  onLoadStart = () => {\n    if (!this.props.onLoadStart) {\n      return;\n    }\n    this.props.onLoadStart();\n    this.onStatusUpdate();\n  };\n\n  onLoadedData = event => {\n    if (!this.props.onLoad) {\n      return;\n    }\n    this.props.onLoad(event.nativeEvent);\n    this.onStatusUpdate();\n  };\n\n  onError = event => {\n    if (!this.props.onError) {\n      return;\n    }\n    this.props.onError(event.nativeEvent);\n    this.onStatusUpdate();\n  };\n\n  onProgress = () => {\n    this.onStatusUpdate();\n  };\n\n  onSeeking = () => {\n    this.onStatusUpdate();\n  };\n\n  onEnded = () => {\n    this.onStatusUpdate();\n  };\n\n  onLoadedMetadata = () => {\n    this.onStatusUpdate();\n  };\n\n  onCanPlay = ({ nativeEvent }) => {\n    if (!this.props.onReadyForDisplay) {\n      return;\n    }\n    this.props.onReadyForDisplay(nativeEvent);\n    this.onStatusUpdate();\n  };\n\n  onStalled = () => {\n    this.onStatusUpdate();\n  };\n\n  onRef = (ref: HTMLVideoElement) => {\n    this._video = ref;\n    this.onStatusUpdate();\n  };\n\n  render() {\n    const { source, status = {}, useNativeControls, style } = this.props;\n    console.log('ExponentVideo', source);\n    return (\n      <video\n        ref={this.onRef}\n        onLoadStart={this.onLoadStart}\n        onLoadedData={this.onLoadedData}\n        onError={this.onError}\n        onProgress={this.onProgress}\n        onSeeking={this.onSeeking}\n        onEnded={this.onEnded}\n        onLoadedMetadata={this.onLoadedMetadata}\n        onCanPlay={this.onCanPlay}\n        onStalled={this.onStalled}\n        src={(source || { uri: undefined }).uri}\n        muted={status.isMuted}\n        loop={status.isLooping}\n        autoPlay={status.shouldPlay}\n        controls={useNativeControls}\n        style={StyleSheet.flatten(style) as any}\n      />\n    );\n  }\n}\n"]}