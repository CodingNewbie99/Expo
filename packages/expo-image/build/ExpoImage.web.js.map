{"version":3,"file":"ExpoImage.web.js","sourceRoot":"","sources":["../src/ExpoImage.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { ImageNativeProps, ImageSource, ImageLoadEventData, ImageTransition } from './Image.types';\nimport AnimationManager, { getAnimatorFromClass } from './web/AnimationManager';\nimport ImageWrapper from './web/ImageWrapper';\nimport loadStyle from './web/style';\nimport useSourceSelection from './web/useSourceSelection';\n\nloadStyle();\n\nfunction onLoadAdapter(onLoad?: (event: ImageLoadEventData) => void) {\n  return (event: React.SyntheticEvent<HTMLImageElement, Event>) => {\n    const target = event.target as HTMLImageElement;\n    onLoad?.({\n      source: {\n        url: target.currentSrc,\n        width: target.naturalWidth,\n        height: target.naturalHeight,\n        mediaType: null,\n      },\n      cacheType: 'none',\n    });\n  };\n}\n\nfunction onErrorAdapter(onError?: { (event: { error: string }): void }) {\n  return ({ source }: { source?: ImageSource | null }) => {\n    onError?.({\n      error: `Failed to load image from url: ${source?.uri}`,\n    });\n  };\n}\n\nconst SUPPORTED_ANIMATIONS: ImageTransition['effect'][] = [\n  'cross-dissolve',\n  'flip-from-left',\n  'flip-from-right',\n  'flip-from-top',\n  'flip-from-bottom',\n];\n\nconst setCssVariables = (element: HTMLElement, size: DOMRect) => {\n  element?.style.setProperty('--expo-image-width', `${size.width}px`);\n  element?.style.setProperty('--expo-image-height', `${size.height}px`);\n};\n\nexport default function ExpoImage({\n  source,\n  placeholder,\n  contentFit,\n  contentPosition,\n  onLoad,\n  transition,\n  onError,\n  responsivePolicy,\n  onLoadEnd,\n  priority,\n  ...props\n}: ImageNativeProps) {\n  const { aspectRatio, backgroundColor, transform, borderColor, ...style } = props.style ?? {};\n\n  const { containerRef, source: selectedSource } = useSourceSelection(\n    source,\n    responsivePolicy,\n    setCssVariables\n  );\n  const animator = getAnimatorFromClass(\n    transition?.effect && SUPPORTED_ANIMATIONS.includes(transition?.effect)\n      ? transition?.effect\n      : 'cross-dissolve',\n    transition?.timing\n  );\n  return (\n    <div\n      ref={containerRef}\n      className=\"expo-image-container\"\n      style={{\n        aspectRatio: String(aspectRatio),\n        backgroundColor: backgroundColor?.toString(),\n        transform: transform?.toString(),\n        borderColor: borderColor?.toString(),\n        ...style,\n        overflow: 'hidden',\n        position: 'relative',\n      }}>\n      <AnimationManager\n        animation={(transition?.duration ?? -1) > 0 ? animator : null}\n        initial={\n          placeholder?.[0]?.uri\n            ? [\n                placeholder?.[0]?.uri || '',\n                ({ onAnimationFinished }) =>\n                  (className) =>\n                    (\n                      <ImageWrapper\n                        source={placeholder?.[0]}\n                        style={{\n                          objectFit: 'scale-down',\n                          transitionDuration: `${transition?.duration || 0}ms`,\n                          transitionTimingFunction: transition?.timing,\n                        }}\n                        className={className}\n                        events={{\n                          onTransitionEnd: [onAnimationFinished],\n                        }}\n                        contentPosition={{ left: '50%', top: '50%' }}\n                        blurhashContentPosition={contentPosition}\n                        blurhashStyle={{\n                          objectFit: contentFit,\n                        }}\n                      />\n                    ),\n              ]\n            : null\n        }>\n        {[\n          (selectedSource as any)?.uri || placeholder?.[0]?.uri,\n          ({ onAnimationFinished, onReady, onMount }) =>\n            (className) =>\n              (\n                <ImageWrapper\n                  source={selectedSource || placeholder?.[0]}\n                  events={{\n                    onError: [onErrorAdapter(onError), onLoadEnd],\n                    onLoad: [onLoadAdapter(onLoad), onLoadEnd, onReady],\n                    onMount: [onMount],\n                    onTransitionEnd: [onAnimationFinished],\n                  }}\n                  style={{\n                    objectFit: selectedSource ? contentFit : 'scale-down',\n                    transitionDuration: `${transition?.duration || 0}ms`,\n                    transitionTimingFunction: transition?.timing,\n                  }}\n                  className={className}\n                  priority={priority}\n                  contentPosition={selectedSource ? contentPosition : { top: '50%', left: '50%' }}\n                  blurhashContentPosition={contentPosition}\n                  blurhashStyle={{\n                    objectFit: contentFit,\n                  }}\n                />\n              ),\n        ]}\n      </AnimationManager>\n    </div>\n  );\n}\n"]}