{"version":3,"file":"Image.js","sourceRoot":"","sources":["../src/Image.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAClE,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAOL,UAAU,GACX,MAAM,cAAc,CAAC;AAEtB,OAAO,SAAS,EAAE,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAGzD,MAAM,mBAAmB,GAAG,OAAO,CAAC;AAkCpC,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,KAAK,CAAC,SAAiC;IACxE,MAAM,CAAC,wBAAwB,CAAC,KAAiB;QAC/C,OAAO;YACL,MAAM,EAAE,KAAK,CAAC,SAAS;gBACrB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;oBACJ,IAAI,KAAK,CAAC,MAAM,EAAE;wBAChB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBACjB;oBACD,KAAK,CAAC,SAAU,EAAE,CAAC;gBACrB,CAAC;gBACH,CAAC,CAAC,KAAK,CAAC,MAAM;YAChB,OAAO,EAAE,KAAK,CAAC,SAAS;gBACtB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;oBACJ,IAAI,KAAK,CAAC,OAAO,EAAE;wBACjB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBAClB;oBACD,KAAK,CAAC,SAAU,EAAE,CAAC;gBACrB,CAAC;gBACH,CAAC,CAAC,KAAK,CAAC,OAAO;SAClB,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAW;QAC/B,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;YAC7B,MAAM,IAAI,mBAAmB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;SACpD;QACD,OAAO,MAAM,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,OAAO,CAClB,GAAW,EACX,SAAkD,EAClD,SAAgC;QAEhC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;YAC5B,MAAM,IAAI,mBAAmB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SACnD;QACD,OAAO,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC;aAChC,IAAI,CAAC,CAAC,KAAwC,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;aACxF,KAAK,CAAC,SAAS,IAAI,OAAO,CAAC,IAAI,CAAC,oCAAoC,GAAG,GAAG,CAAC,CAAC,CAAC;IAClF,CAAC;IAED,KAAK,GAAG;QACN,MAAM,EAAE,SAAS;QACjB,OAAO,EAAE,SAAS;KACnB,CAAC;IAEF,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvE,MAAM,EAAE,UAAU,EAAE,eAAe,EAAE,GAAG,SAAS,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;QACxF,MAAM,UAAU,GAAG,cAAc,IAAI,eAAe,IAAI,mBAAmB,CAAC;QAE5E,OAAO,CACL,oBAAC,SAAS,OACJ,SAAS,EACb,KAAK,EAAE,SAAS,EAChB,UAAU,EAAE,UAAU,EACtB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EACzB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,GAC3B,CACH,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { Platform, UnavailabilityError } from 'expo-modules-core';\nimport React from 'react';\nimport {\n  AccessibilityProps,\n  ImageResizeMode,\n  ImageSourcePropType,\n  ImageStyle as RNImageStyle,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n} from 'react-native';\n\nimport ExpoImage, { ExpoImageModule } from './ExpoImage';\nimport { ImageErrorEventData, ImageLoadEventData, ImageLoadProgressEventData } from './Image.types';\n\nconst DEFAULT_RESIZE_MODE = 'cover';\n\ninterface ImageStyle extends RNImageStyle {\n  elevation?: number;\n}\n\nexport interface ImageProps extends AccessibilityProps {\n  // On one hand we want to pass resolved source to native module.\n  // On the other hand, react-native-web doesn't expose a resolveAssetSource\n  // function, so we can't use it there. So we pass the unresolved source\n  // to \"native components\" and they decide whether to resolve the value\n  // or not.\n  source?: ImageSourcePropType | null;\n  style?: StyleProp<ImageStyle>;\n  defaultSource?: ImageSourcePropType | null;\n  resizeMode?: ImageResizeMode;\n  /**\n   * @Android only\n   */\n  blurRadius?: number;\n  fadeDuration?: number;\n\n  onLoadStart?: () => void;\n  onProgress?: (event: NativeSyntheticEvent<ImageLoadProgressEventData>) => void;\n  onLoad?: (event: NativeSyntheticEvent<ImageLoadEventData>) => void;\n  onError?: (error: NativeSyntheticEvent<ImageErrorEventData>) => void;\n  onLoadEnd?: () => void;\n}\n\ninterface ImageState {\n  onLoad: ImageProps['onLoad'];\n  onError: ImageProps['onError'];\n}\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n  static getDerivedStateFromProps(props: ImageProps) {\n    return {\n      onLoad: props.onLoadEnd\n        ? (e) => {\n            if (props.onLoad) {\n              props.onLoad(e);\n            }\n            props.onLoadEnd!();\n          }\n        : props.onLoad,\n      onError: props.onLoadEnd\n        ? (e) => {\n            if (props.onError) {\n              props.onError(e);\n            }\n            props.onLoadEnd!();\n          }\n        : props.onError,\n    };\n  }\n\n  /**\n   * **Available on @Android only.** Caching the image that can be later used in ImageView\n   * @return an empty promise.\n   */\n  static async prefetch(url: string): Promise<void> {\n    if (Platform.OS !== 'android') {\n      throw new UnavailabilityError('Image', 'prefetch');\n    }\n    return await ExpoImageModule.prefetch(url);\n  }\n\n  static async getSize(\n    url: string,\n    onSuccess: (width: number, height: number) => void,\n    onFailure?: (error: any) => void\n  ): Promise<void> {\n    if (!ExpoImageModule.getSize) {\n      throw new UnavailabilityError('Image', 'getSize');\n    }\n    return ExpoImageModule.getSize(url)\n      .then((sizes: { width: number; height: number }) => onSuccess(sizes.width, sizes.height))\n      .catch(onFailure || console.warn('Failed to acquire size for image: ' + url));\n  }\n\n  state = {\n    onLoad: undefined,\n    onError: undefined,\n  };\n\n  render() {\n    const { style, resizeMode: resizeModeProp, ...restProps } = this.props;\n\n    const { resizeMode: resizeModeStyle, ...restStyle } = StyleSheet.flatten([style]) || {};\n    const resizeMode = resizeModeProp ?? resizeModeStyle ?? DEFAULT_RESIZE_MODE;\n\n    return (\n      <ExpoImage\n        {...restProps}\n        style={restStyle}\n        resizeMode={resizeMode}\n        onLoad={this.state.onLoad}\n        onError={this.state.onError}\n      />\n    );\n  }\n}\n"]}