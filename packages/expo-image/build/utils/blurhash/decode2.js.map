{"version":3,"file":"decode2.js","sourceRoot":"","sources":["../../../src/utils/blurhash/decode2.ts"],"names":[],"mappings":"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","sourcesContent":["const digit = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%*+,-.:;=?@[]^_{|}~';\nconst decode83 = (str, start, end) => {\n  let value = 0;\n  while (start < end) {\n    value *= 83;\n    value += digit.indexOf(str[start++]);\n  }\n  return value;\n};\n\nconst pow = Math.pow;\nconst PI = Math.PI;\nconst PI2 = PI * 2;\n\nconst d = 3294.6;\nconst e = 269.025;\nconst sRGBToLinear = (value) => (value > 10.31475 ? pow(value / e + 0.052132, 2.4) : value / d);\n\nconst linearTosRGB = (v) => ~~(v > 0.00001227 ? e * pow(v, 0.416666) - 13.025 : v * d + 1);\n\nconst signSqr = (x) => (x < 0 ? -1 : 1) * x * x;\n\n/**\n * Fast approximate cosine implementation\n * Based on FTrig https://github.com/netcell/FTrig\n */\nconst fastCos = (x) => {\n  x += PI / 2;\n  while (x > PI) {\n    x -= PI2;\n  }\n  const cos = 1.27323954 * x - 0.405284735 * signSqr(x);\n  return 0.225 * (signSqr(cos) - cos) + cos;\n};\n\n/**\n * Extracts average color from BlurHash image\n * @param {string} blurHash BlurHash image string\n * @returns {[number, number, number]}\n */\nexport function getBlurHashAverageColor(blurHash) {\n  const val = decode83(blurHash, 2, 6);\n  return [val >> 16, (val >> 8) & 255, val & 255];\n}\n\n/**\n * Decodes BlurHash image\n * @param {string} blurHash BlurHash image string\n * @param {number} width Output image width\n * @param {number} height Output image height\n * @param {?number} punch\n * @returns {Uint8ClampedArray}\n */\nexport function decodeBlurHash(blurHash, width, height, punch) {\n  const sizeFlag = decode83(blurHash, 0, 1);\n  const numX = (sizeFlag % 9) + 1;\n  const numY = ~~(sizeFlag / 9) + 1;\n  const size = numX * numY;\n\n  let i = 0,\n    j = 0,\n    x = 0,\n    y = 0,\n    r = 0,\n    g = 0,\n    b = 0,\n    basis = 0,\n    basisY = 0,\n    colorIndex = 0,\n    pixelIndex = 0,\n    yh = 0,\n    xw = 0,\n    value = 0;\n\n  const maximumValue = ((decode83(blurHash, 1, 2) + 1) / 13446) * (punch | 1);\n\n  const colors = new Float64Array(size * 3);\n\n  const averageColor = getBlurHashAverageColor(blurHash);\n  for (i = 0; i < 3; i++) {\n    colors[i] = sRGBToLinear(averageColor[i]);\n  }\n\n  for (i = 1; i < size; i++) {\n    value = decode83(blurHash, 4 + i * 2, 6 + i * 2);\n    colors[i * 3] = signSqr(~~(value / (19 * 19)) - 9) * maximumValue;\n    colors[i * 3 + 1] = signSqr((~~(value / 19) % 19) - 9) * maximumValue;\n    colors[i * 3 + 2] = signSqr((value % 19) - 9) * maximumValue;\n  }\n\n  const bytesPerRow = width * 4;\n  const pixels = new Uint8ClampedArray(bytesPerRow * height);\n\n  for (y = 0; y < height; y++) {\n    yh = (PI * y) / height;\n    for (x = 0; x < width; x++) {\n      r = 0;\n      g = 0;\n      b = 0;\n      xw = (PI * x) / width;\n\n      for (j = 0; j < numY; j++) {\n        basisY = fastCos(yh * j);\n        for (i = 0; i < numX; i++) {\n          basis = fastCos(xw * i) * basisY;\n          colorIndex = (i + j * numX) * 3;\n          r += colors[colorIndex] * basis;\n          g += colors[colorIndex + 1] * basis;\n          b += colors[colorIndex + 2] * basis;\n        }\n      }\n\n      pixelIndex = 4 * x + y * bytesPerRow;\n      pixels[pixelIndex] = linearTosRGB(r);\n      pixels[pixelIndex + 1] = linearTosRGB(g);\n      pixels[pixelIndex + 2] = linearTosRGB(b);\n      pixels[pixelIndex + 3] = 255; // alpha\n    }\n  }\n  return pixels;\n}\n"]}