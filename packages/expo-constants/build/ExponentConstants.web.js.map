{"version":3,"file":"ExponentConstants.web.js","sourceRoot":"","sources":["../src/ExponentConstants.web.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,cAAc,CAAC;AACpC,OAAO,MAAM,MAAM,SAAS,CAAC;AAE7B,MAAM,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAErD,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;AAC9B,MAAM,MAAM,GAAG,gCAAgC,CAAC;AAOhD,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC;AAE5B,eAAe;IACb,IAAI,IAAI;QACN,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IACD,IAAI,YAAY;QACd,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,IAAI,cAAc;QAChB,IAAI,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,CAAC,cAAc,EAAE;YACnB,cAAc,GAAG,MAAM,EAAE,CAAC;YAC1B,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,cAAwB,CAAC,CAAC;SACxD;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IACD,IAAI,SAAS;QACX,OAAO,UAAU,CAAC;IACpB,CAAC;IACD,IAAI,QAAQ;QACV,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;IAChD,CAAC;IACD,IAAI,QAAQ;QACV,qEAAqE;QACrE,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,WAAW;QACb,OAAO,eAAe,CAAC,OAAO,CAAC;IACjC,CAAC;IACD,IAAI,UAAU;QACZ,OAAO,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC;IAC7C,CAAC;IACD,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,UAAU;QACZ,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAEvD,OAAO,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,CAAC;IACxD,CAAC;IACD,IAAI,WAAW;QACb,+BAA+B;QAC/B,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,IAAI,eAAe;QACjB,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,eAAe;QACjB,wGAAwG;QACxG,OAAO,CAAC,GAAG,CAAC,6DAA6D,CAAC,CAAC;QAC3E,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,QAAQ;QACV,OAAO,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE,CAAC;IACxC,CAAC;IACD,KAAK,CAAC,wBAAwB;QAC5B,OAAO,SAAS,CAAC,SAAS,CAAC;IAC7B,CAAC;CACF,CAAC","sourcesContent":["import UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\n\nconst ExpoPackageJson = require('expo/package.json');\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var process: any;\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership() {\n    return 'expo';\n  },\n  get installationId() {\n    let installationId = localStorage.getItem(ID_KEY);\n    if (!installationId) {\n      installationId = uuidv4();\n      localStorage.setItem(ID_KEY, installationId as string);\n    }\n\n    return installationId;\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): object {\n    return { web: UAParser(navigator.userAgent) };\n  },\n  get isDevice(): boolean {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get expoVersion(): string {\n    return ExpoPackageJson.version;\n  },\n  get linkingUri(): string {\n    return location.origin + location.pathname;\n  },\n  get expoRuntimeVersion(): string | null {\n    return null;\n  },\n  get deviceName(): string | null {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return browser.name || engine.name || OS.name || null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): string | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    console.log(`ExponentConstants.deviceYearClass: is unimplemented on web.`);\n    return null;\n  },\n  get manifest(): { [manifestKey: string]: any } {\n    return process.env.APP_MANIFEST || {};\n  },\n  async getWebViewUserAgentAsync(): Promise<string> {\n    return navigator.userAgent;\n  },\n};\n"]}