{"version":3,"file":"ExponentConstants.web.js","sourceRoot":"","sources":["../src/ExponentConstants.web.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,SAAS,CAAC;AAC7B,OAAO,QAAQ,MAAM,cAAc,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAEzC,MAAM,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAErD,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;AAC9B,MAAM,QAAQ,GAAG,IAAI,UAAU,EAAE,CAAC,GAAG,EAAE,CAAC;AAIxC,eAAe;IACb,UAAU,EAAE,MAAM,EAAE;IACpB,IAAI,YAAY;QACd,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,IAAI,cAAc;QAChB,OAAO,QAAQ,CAAC;IAClB,CAAC;IACD,IAAI,IAAI;QACN,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IACD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,IAAI,QAAQ;QACV,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;IAChD,CAAC;IACD,IAAI,QAAQ;QACV,qEAAqE;QACrE,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,WAAW;QACb,OAAO,eAAe,CAAC,OAAO,CAAC;IACjC,CAAC;IACD,IAAI,UAAU;QACZ,OAAO,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC;IAC7C,CAAC;IACD,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,UAAU;QACZ,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAEvD,OAAO,GAAG,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;IACrD,CAAC;IACD,IAAI,WAAW;QACb,+BAA+B;QAC/B,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,IAAI,eAAe;QACjB,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,eAAe;QACjB,wGAAwG;QACxG,OAAO,CAAC,GAAG,CAAC,6DAA6D,CAAC,CAAC;QAC3E,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,QAAQ;QACV,IAAI,QAAQ,CAAC;QACb,6CAA6C;QAC7C,IAAI,OAAO,EAAE;YACX,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;SACrC;QACD,OAAO,QAAQ,IAAI,EAAE,CAAC;IACxB,CAAC;IACD,KAAK,CAAC,wBAAwB;QAC5B,OAAO,SAAS,CAAC,SAAS,CAAC;IAC7B,CAAC;CACF,CAAC","sourcesContent":["import uuidv4 from 'uuid/v4';\nimport UAParser from 'ua-parser-js';\nimport { DeviceUUID } from 'device-uuid';\n\nconst ExpoPackageJson = require('expo/package.json');\n\nconst parser = new UAParser();\nconst deviceId = new DeviceUUID().get();\n\ndeclare var process: any;\n\nexport default {\n  _sessionId: uuidv4(),\n  get appOwnership() {\n    return 'expo';\n  },\n  get installationId() {\n    return deviceId;\n  },\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get sessionId(): string {\n    return this._sessionId;\n  },\n  get platform(): object {\n    return { web: UAParser(navigator.userAgent) };\n  },\n  get isDevice(): boolean {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get expoVersion(): string {\n    return ExpoPackageJson.version;\n  },\n  get linkingUri(): string {\n    return location.origin + location.pathname;\n  },\n  get expoRuntimeVersion(): string | null {\n    return null;\n  },\n  get deviceName(): string | null {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return `${browser.name || engine.name || OS.name}`;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): string | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    console.log(`ExponentConstants.deviceYearClass: is unimplemented on web.`);\n    return null;\n  },\n  get manifest(): { [manifestKey: string]: any } {\n    let manifest;\n    // Bacon: Get manifest from webpack.config.js\n    if (process) {\n      manifest = process.env.APP_MANIFEST;\n    }\n    return manifest || {};\n  },\n  async getWebViewUserAgentAsync(): Promise<string> {\n    return navigator.userAgent;\n  },\n};\n"]}