/**
 * Automatically generated by expo-modules-test-core.
 *
 * This autogenerated file provides a mock for native Expo module,
 * and works out of the box with the expo jest preset.
 *  */

export function deleteDatabaseSync(databaseName: string): any {}

export async function deleteDatabaseAsync(databaseName: string): Promise<any> {}

export async function importAssetDatabaseAsync(
  databaseName: string,
  assetDatabasePath: string,
  forceOverwrite: boolean
): Promise<any> {}

export class NativeDatabase {
  initSync(database: NativeDatabase): any {}
  isInTransactionSync(database: NativeDatabase): boolean {
    return false;
  }
  closeSync(database: NativeDatabase): any {}
  execSync(database: NativeDatabase, source: string): any {}
  serializeSync(database: NativeDatabase, databaseName: string): any {}
  prepareSync(database: NativeDatabase, statement: NativeStatement, source: string): any {}
  async initAsync(database: NativeDatabase): Promise<any> {}
  async isInTransactionAsync(database: NativeDatabase): Promise<boolean> {
    return false;
  }
  async closeAsync(database: NativeDatabase): Promise<any> {}
  async execAsync(database: NativeDatabase, source: string): Promise<any> {}
  async serializeAsync(database: NativeDatabase, databaseName: string): Promise<any> {}
  async prepareAsync(
    database: NativeDatabase,
    statement: NativeStatement,
    source: string
  ): Promise<any> {}
}

export class NativeStatement {
  runSync(
    statement: NativeStatement,
    database: NativeDatabase,
    bindParams: {
      [key: string]: any;
    },
    bindBlobParams: {
      [key: string]: Data;
    },
    shouldPassAsArray: boolean
  ): {
    [key: string]: any;
  } {
    return {};
  }
  stepSync(statement: NativeStatement, database: NativeDatabase): SQLiteColumnValues | undefined {
    return;
  }
  getAllSync(statement: NativeStatement, database: NativeDatabase): SQLiteColumnValues[] {
    return [];
  }
  resetSync(statement: NativeStatement, database: NativeDatabase): any {}
  getColumnNamesSync(statement: NativeStatement): SQLiteColumnNames {
    return null; // TODO: Replace with mock for value of type SQLiteColumnNames.
  }
  finalizeSync(statement: NativeStatement, database: NativeDatabase): any {}
  async runAsync(
    statement: NativeStatement,
    database: NativeDatabase,
    bindParams: {
      [key: string]: any;
    },
    bindBlobParams: {
      [key: string]: Data;
    },
    shouldPassAsArray: boolean
  ): Promise<{
    [key: string]: any;
  }> {
    return {};
  }
  async stepAsync(
    statement: NativeStatement,
    database: NativeDatabase
  ): Promise<SQLiteColumnValues | undefined> {
    return;
  }
  async getAllAsync(
    statement: NativeStatement,
    database: NativeDatabase
  ): Promise<SQLiteColumnValues[]> {
    return [];
  }
  async resetAsync(statement: NativeStatement, database: NativeDatabase): Promise<any> {}
  async getColumnNamesAsync(statement: NativeStatement): Promise<SQLiteColumnNames> {
    return null; // TODO: Replace with mock for value of type SQLiteColumnNames.
  }
  async finalizeAsync(statement: NativeStatement, database: NativeDatabase): Promise<any> {}
}
