{"version":3,"file":"GLUtils.js","sourceRoot":"","sources":["../src/GLUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import GLErrors from './GLErrors';\nimport { ExpoWebGLRenderingContext, GLLoggingOption } from './GLView.types';\n\n/**\n * Maximum length of the strings printed to the console.\n */\nconst MAX_STRING_LENGTH = 20;\n\n/**\n * Sets up `__expoSetLogging` method providing some logging options useful when debugging GL calls.\n */\nexport function configureLogging(gl: ExpoWebGLRenderingContext): void {\n  // Enable/disable logging of all GL function calls\n  let loggingOption = GLLoggingOption.DISABLED;\n\n  gl.__expoSetLogging = (option: GLLoggingOption): void => {\n    // If boolean values are the same, just change the internal value,\n    // there is no need to wrap/unwrap functions in this case.\n    if (!loggingOption === !option) {\n      loggingOption = option;\n      return;\n    }\n\n    // Turn off logging.\n    if (!option || option === GLLoggingOption.DISABLED) {\n      Object.keys(gl).forEach(key => {\n        if (typeof gl[key] === 'function' && gl[key].original) {\n          gl[key] = gl[key].original;\n        }\n      });\n      loggingOption = option;\n      return;\n    }\n\n    // Turn on logging.\n    Object.keys(gl).forEach(key => {\n      if (typeof gl[key] !== 'function' || key === '__expoSetLogging') {\n        return;\n      }\n      const original = gl[key];\n\n      gl[key] = (...args) => {\n        if (loggingOption & GLLoggingOption.METHOD_CALLS) {\n          const params = args.map(arg => {\n            // If the type is `number`, then try to find name of the constant that has such value,\n            // so it's easier to read these logs. In some cases it might be misleading\n            // if the parameter is for example a width or height, so the number is still logged.\n            if (loggingOption & GLLoggingOption.RESOLVE_CONSTANTS && typeof arg === 'number') {\n              for (const prop in gl) {\n                if (gl[prop] === arg) {\n                  return `${arg} (${prop})`;\n                }\n              }\n            }\n\n            // Truncate strings so they don't produce too much output and don't block the bridge.\n            // It mostly applies to shaders which might be very long...\n            if (loggingOption & GLLoggingOption.TRUNCATE_STRINGS && typeof arg === 'string') {\n              if (arg.length > MAX_STRING_LENGTH) {\n                const lastIndex = arg.lastIndexOf(' ', MAX_STRING_LENGTH);\n                return arg.substr(0, lastIndex >= 0 ? lastIndex : MAX_STRING_LENGTH) + '...';\n              }\n            }\n\n            // Just return the parameter as a string.\n            return '' + arg;\n          });\n          console.log(`ExpoGL: ${key}(${params.join(', ')})`);\n        }\n\n        const result = original.apply(gl, args);\n\n        if (loggingOption & GLLoggingOption.METHOD_CALLS) {\n          console.log(`ExpoGL:   = ${result}`);\n        }\n        if (loggingOption & GLLoggingOption.GET_ERRORS && key !== 'getError') {\n          // @ts-ignore We need to call into the original `getError`.\n          const error = gl.getError.original.call(gl);\n\n          if (error && error !== gl.NO_ERROR) {\n            // `console.error` would cause a red screen, so let's just log with red color.\n            console.log(`\\x1b[31mExpoGL: Error ${GLErrors[error]}\\x1b[0m`);\n          }\n        }\n        return result;\n      };\n      gl[key].original = original;\n    });\n\n    loggingOption = option;\n  };\n}\n"]}