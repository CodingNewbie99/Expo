diff --git a/packages/expo-modules-core/android/CMakeLists.txt b/packages/expo-modules-core/android/CMakeLists.txt
index f235a94598..abdba64933 100644
--- a/packages/expo-modules-core/android/CMakeLists.txt
+++ b/packages/expo-modules-core/android/CMakeLists.txt
@@ -4,7 +4,7 @@ project(expo-modules-core)
 
 set(CMAKE_VERBOSE_MAKEFILE ON)
 set(CMAKE_CXX_STANDARD 17)
-set(PACKAGE_NAME "expo-modules-core")
+set(PACKAGE_NAME "expo-modules-core_{VERSIONED_ABI_NAME}")
 set(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)
 set(ignoreMe "${PROJECT_BUILD_DIR} ${REACT_ANDROID_BUILD_DIR} ${REACT_ANDROID_DIR} ${HERMES_HEADER_DIR}")
 
@@ -81,7 +81,7 @@ if(${UNIT_TEST})
     file(GLOB HERMES_SO_DIR "${BUILD_DIR}/third-party-ndk/hermes/jni/${ANDROID_ABI}")
     find_library(
         JSEXECUTOR_LIB
-        hermes
+        hermes_{VERSIONED_ABI_NAME}
         PATHS ${HERMES_SO_DIR}
         NO_CMAKE_FIND_ROOT_PATH
     )
@@ -89,7 +89,7 @@ if(${UNIT_TEST})
   else()
     find_library(
         JSEXECUTOR_LIB
-        jscexecutor
+        jscexecutor_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
     )
@@ -132,14 +132,14 @@ find_library(LOG_LIB log)
 if(${REACT_NATIVE_TARGET_VERSION} LESS 69)
     find_library(
         FOLLY_LIB
-        folly_json
+        folly_json_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
     )
 else()
     find_library(
         FOLLY_LIB
-        folly_runtime
+        folly_runtime_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
     )
@@ -154,21 +154,21 @@ find_library(
 
 find_library(
         JSI_LIB
-        jsi
+        jsi_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
 )
 
 find_library(
         REACT_NATIVE_JNI_LIB
-        reactnativejni
+        reactnativejni_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
 )
 
 find_library(
         REACT_NATIVE_MODULES_CORE
-        react_nativemodule_core
+        react_nativemodule_core_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
 )
diff --git a/packages/expo-modules-core/android/build.gradle b/packages/expo-modules-core/android/build.gradle
index 5680407e0d..96130cef75 100644
--- a/packages/expo-modules-core/android/build.gradle
+++ b/packages/expo-modules-core/android/build.gradle
@@ -60,6 +60,10 @@ def REACT_NATIVE_DIR = REACT_NATIVE_BUILD_FROM_SOURCE
 def REACT_NATIVE_SO_DIR = REACT_NATIVE_BUILD_FROM_SOURCE
   ? Paths.get(findProject(":ReactAndroid").getProjectDir().toString(), "build", "intermediates", "library_*", "*", "jni")
   : "${buildDir}/react-native-0*/jni"
+REACT_NATIVE_DIR = "${rootDir}/versioned-react-native"
+REACT_NATIVE_BUILD_FROM_SOURCE = false
+REACT_NATIVE_SO_DIR = "${buildDir}/reactandroid-{VERSIONED_ABI_NAME}-*/jni"
+def REACT_NATIVE_AAR_DIR = "${rootDir}/versioned-abis/expoview-{VERSIONED_ABI_NAME}/maven"
 
 def reactProperties = new Properties()
 file("$REACT_NATIVE_DIR/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }
@@ -334,7 +338,7 @@ task createNativeDepsDirectories() {
 // JNI
 def extractReactNativeAAR = { buildType ->
   def suffix = buildType == 'Debug' ? '-debug' : '-release'
-  def rnAARs = fileTree(REACT_NATIVE_DIR).matching { include "**/react-native/**/*${suffix}.aar" }
+  def rnAARs = fileTree(REACT_NATIVE_AAR_DIR).matching { include "**/*.aar" }
   if (rnAARs.isEmpty()) {
     rnAARs = fileTree(REACT_NATIVE_DIR).matching { include "**/react-native/**/*.aar" }
   }
diff --git a/packages/expo-modules-core/android/src/fabric/FabricComponentsRegistry.h b/packages/expo-modules-core/android/src/fabric/FabricComponentsRegistry.h
index aaee960b00..53bbbe02b6 100644
--- a/packages/expo-modules-core/android/src/fabric/FabricComponentsRegistry.h
+++ b/packages/expo-modules-core/android/src/fabric/FabricComponentsRegistry.h
@@ -9,7 +9,7 @@ namespace expo {
 class FabricComponentsRegistry : public facebook::jni::HybridClass<FabricComponentsRegistry> {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/adapters/react/FabricComponentsRegistry;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/adapters/react/FabricComponentsRegistry;";
 
   static void registerNatives();
 
diff --git a/packages/expo-modules-core/android/src/main/cpp/Exceptions.h b/packages/expo-modules-core/android/src/main/cpp/Exceptions.h
index 607ed5c2b9..97684053ea 100644
--- a/packages/expo-modules-core/android/src/main/cpp/Exceptions.h
+++ b/packages/expo-modules-core/android/src/main/cpp/Exceptions.h
@@ -24,7 +24,7 @@ class JSIInteropModuleRegistry;
  */
 class CodedException : public jni::JavaClass<CodedException, jni::JThrowable> {
 public:
-  static auto constexpr kJavaDescriptor = "Lexpo/modules/kotlin/exception/CodedException;";
+  static auto constexpr kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/exception/CodedException;";
 
   static jni::local_ref<CodedException> create(const std::string &message);
 
@@ -39,7 +39,7 @@ public:
 class JavaScriptEvaluateException
   : public jni::JavaClass<JavaScriptEvaluateException, CodedException> {
 public:
-  static auto constexpr kJavaDescriptor = "Lexpo/modules/kotlin/exception/JavaScriptEvaluateException;";
+  static auto constexpr kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/exception/JavaScriptEvaluateException;";
 
   static jni::local_ref<JavaScriptEvaluateException> create(
     const std::string &message,
@@ -53,7 +53,7 @@ public:
 class UnexpectedException
   : public jni::JavaClass<UnexpectedException, CodedException> {
 public:
-  static auto constexpr kJavaDescriptor = "Lexpo/modules/kotlin/exception/UnexpectedException;";
+  static auto constexpr kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/exception/UnexpectedException;";
 
   static jni::local_ref<UnexpectedException> create(
     const std::string &message
diff --git a/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.cpp b/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.cpp
index 938528444e..19a83b6e37 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.cpp
+++ b/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.cpp
@@ -14,7 +14,7 @@ JNIFunctionBody::invoke(jobjectArray args) {
   // Because of that, it can't be cached - we will try to invoke the nonexistent method
   // if we receive an object of a different class than the one used to obtain the method id.
   // The only cacheable method id can be obtain from the base class.
-  static const auto method = jni::findClassLocal("expo/modules/kotlin/jni/JNIFunctionBody")
+  static const auto method = jni::findClassLocal("{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JNIFunctionBody")
     ->getMethod<jni::local_ref<jni::JObject>(jobjectArray)>(
       "invoke",
       "([Ljava/lang/Object;)Ljava/lang/Object;"
@@ -32,7 +32,7 @@ void JNIAsyncFunctionBody::invoke(
   // Because of that, it can't be cached - we will try to invoke the nonexistent method
   // if we receive an object of a different class than the one used to obtain the method id.
   // The only cacheable method id can be obtain from the base class.
-  static const auto method = jni::findClassLocal("expo/modules/kotlin/jni/JNIAsyncFunctionBody")
+  static const auto method = jni::findClassLocal("{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JNIAsyncFunctionBody")
     ->getMethod<
       void(jobjectArray , jobject)
     >(
diff --git a/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.h b/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.h
index ca59f177c8..474df8bca9 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.h
@@ -15,7 +15,7 @@ namespace expo {
  */
 class JNIFunctionBody : public jni::JavaClass<JNIFunctionBody> {
 public:
-  static auto constexpr kJavaDescriptor = "Lexpo/modules/kotlin/jni/JNIFunctionBody;";
+  static auto constexpr kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JNIFunctionBody;";
 
   /**
    * Invokes a Kotlin's implementation of this function.
@@ -34,7 +34,7 @@ public:
  */
 class JNIAsyncFunctionBody : public jni::JavaClass<JNIAsyncFunctionBody> {
 public:
-  static auto constexpr kJavaDescriptor = "Lexpo/modules/kotlin/jni/JNIAsyncFunctionBody;";
+  static auto constexpr kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JNIAsyncFunctionBody;";
 
   /**
    * Invokes a Kotlin's implementation of this async function.
diff --git a/packages/expo-modules-core/android/src/main/cpp/JSIInteropModuleRegistry.h b/packages/expo-modules-core/android/src/main/cpp/JSIInteropModuleRegistry.h
index ebd5c60547..c469341691 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JSIInteropModuleRegistry.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JSIInteropModuleRegistry.h
@@ -27,7 +27,7 @@ namespace expo {
 class JSIInteropModuleRegistry : public jni::HybridClass<JSIInteropModuleRegistry> {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JSIInteropModuleRegistry;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JSIInteropModuleRegistry;";
   static auto constexpr TAG = "JSIInteropModuleRegistry";
 
   static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
diff --git a/packages/expo-modules-core/android/src/main/cpp/JavaCallback.h b/packages/expo-modules-core/android/src/main/cpp/JavaCallback.h
index 22453f4a08..febc000b0c 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JavaCallback.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JavaCallback.h
@@ -15,7 +15,7 @@ namespace expo {
 class JavaCallback : public jni::HybridClass<JavaCallback> {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JavaCallback;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaCallback;";
   static auto constexpr TAG = "JavaCallback";
 
   static void registerNatives();
diff --git a/packages/expo-modules-core/android/src/main/cpp/JavaReferencesCache.cpp b/packages/expo-modules-core/android/src/main/cpp/JavaReferencesCache.cpp
index 9da6fb05e5..8fa882c562 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JavaReferencesCache.cpp
+++ b/packages/expo-modules-core/android/src/main/cpp/JavaReferencesCache.cpp
@@ -25,23 +25,23 @@ void JavaReferencesCache::loadJClasses(JNIEnv *env) {
     {"<init>", "(F)V"}
   });
 
-  loadJClass(env, "com/facebook/react/bridge/PromiseImpl", {
-    {"<init>", "(Lcom/facebook/react/bridge/Callback;Lcom/facebook/react/bridge/Callback;)V"}
+  loadJClass(env, "{VERSIONED_ABI_NAME}/com/facebook/react/bridge/PromiseImpl", {
+    {"<init>", "(L{VERSIONED_ABI_NAME}/com/facebook/react/bridge/Callback;L{VERSIONED_ABI_NAME}/com/facebook/react/bridge/Callback;)V"}
   });
 
-  loadJClass(env, "expo/modules/kotlin/jni/PromiseImpl", {
-    {"<init>", "(Lexpo/modules/kotlin/jni/JavaCallback;Lexpo/modules/kotlin/jni/JavaCallback;)V"}
+  loadJClass(env, "{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/PromiseImpl", {
+    {"<init>", "(L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaCallback;L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaCallback;)V"}
   });
 
   loadJClass(env, "java/lang/Object", {});
   loadJClass(env, "java/lang/String", {});
-  loadJClass(env, "expo/modules/kotlin/jni/JavaScriptObject", {});
-  loadJClass(env, "expo/modules/kotlin/jni/JavaScriptValue", {});
-  loadJClass(env, "expo/modules/kotlin/jni/JavaScriptTypedArray", {});
-  loadJClass(env, "com/facebook/react/bridge/ReadableNativeArray", {});
-  loadJClass(env, "com/facebook/react/bridge/ReadableNativeMap", {});
-  loadJClass(env, "com/facebook/react/bridge/WritableNativeArray", {});
-  loadJClass(env, "com/facebook/react/bridge/WritableNativeMap", {});
+  loadJClass(env, "{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptObject", {});
+  loadJClass(env, "{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptValue", {});
+  loadJClass(env, "{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptTypedArray", {});
+  loadJClass(env, "{VERSIONED_ABI_NAME}/com/facebook/react/bridge/ReadableNativeArray", {});
+  loadJClass(env, "{VERSIONED_ABI_NAME}/com/facebook/react/bridge/ReadableNativeMap", {});
+  loadJClass(env, "{VERSIONED_ABI_NAME}/com/facebook/react/bridge/WritableNativeArray", {});
+  loadJClass(env, "{VERSIONED_ABI_NAME}/com/facebook/react/bridge/WritableNativeMap", {});
 }
 
 void JavaReferencesCache::loadJClass(
diff --git a/packages/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h b/packages/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h
index 4b1a65ecab..49d5a841db 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h
@@ -29,7 +29,7 @@ class JSIInteropModuleRegistry;
 class JavaScriptModuleObject : public jni::HybridClass<JavaScriptModuleObject> {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JavaScriptModuleObject;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptModuleObject;";
   static auto constexpr TAG = "JavaScriptModuleObject";
 
   static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
diff --git a/packages/expo-modules-core/android/src/main/cpp/JavaScriptObject.h b/packages/expo-modules-core/android/src/main/cpp/JavaScriptObject.h
index a6068ce183..1704b44b51 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JavaScriptObject.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JavaScriptObject.h
@@ -24,7 +24,7 @@ class JavaScriptValue;
 class JavaScriptObject : public jni::HybridClass<JavaScriptObject>, JSIObjectWrapper {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JavaScriptObject;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptObject;";
   static auto constexpr TAG = "JavaScriptObject";
 
   static void registerNatives();
diff --git a/packages/expo-modules-core/android/src/main/cpp/JavaScriptTypedArray.h b/packages/expo-modules-core/android/src/main/cpp/JavaScriptTypedArray.h
index 099e2f6728..10f8fee8cd 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JavaScriptTypedArray.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JavaScriptTypedArray.h
@@ -20,7 +20,7 @@ namespace jsi = facebook::jsi;
 class JavaScriptTypedArray : public jni::HybridClass<JavaScriptTypedArray, JavaScriptObject> {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JavaScriptTypedArray;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptTypedArray;";
   static auto constexpr TAG = "JavaScriptTypedArray";
 
   static void registerNatives();
diff --git a/packages/expo-modules-core/android/src/main/cpp/JavaScriptValue.h b/packages/expo-modules-core/android/src/main/cpp/JavaScriptValue.h
index 506176ccba..fe9a0df850 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JavaScriptValue.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JavaScriptValue.h
@@ -27,7 +27,7 @@ class JavaScriptTypedArray;
 class JavaScriptValue : public jni::HybridClass<JavaScriptValue>, JSIValueWrapper {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JavaScriptValue;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptValue;";
   static auto constexpr TAG = "JavaScriptValue";
 
   static void registerNatives();
diff --git a/packages/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp b/packages/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp
index f002aba6b5..ccc3c22000 100644
--- a/packages/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp
+++ b/packages/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp
@@ -252,7 +252,7 @@ jsi::Value MethodMetadata::callSync(
   }
   if (env->IsInstanceOf(
     unpackedResult,
-    cache->getJClass("com/facebook/react/bridge/WritableNativeArray").clazz
+    cache->getJClass("{VERSIONED_ABI_NAME}/com/facebook/react/bridge/WritableNativeArray").clazz
   )) {
     auto dynamic = jni::static_ref_cast<react::WritableNativeArray::javaobject>(result)
       ->cthis()
@@ -261,7 +261,7 @@ jsi::Value MethodMetadata::callSync(
   }
   if (env->IsInstanceOf(
     unpackedResult,
-    cache->getJClass("com/facebook/react/bridge/WritableNativeMap").clazz
+    cache->getJClass("{VERSIONED_ABI_NAME}/com/facebook/react/bridge/WritableNativeMap").clazz
   )) {
     auto dynamic = jni::static_ref_cast<react::WritableNativeMap::javaobject>(result)
       ->cthis()
@@ -354,10 +354,10 @@ jsi::Function MethodMetadata::createPromiseBody(
       JNIEnv *env = jni::Environment::current();
 
       auto &jPromise = JavaReferencesCache::instance()->getJClass(
-        "expo/modules/kotlin/jni/PromiseImpl");
+        "{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/PromiseImpl");
       jmethodID jPromiseConstructor = jPromise.getMethod(
         "<init>",
-        "(Lexpo/modules/kotlin/jni/JavaCallback;Lexpo/modules/kotlin/jni/JavaCallback;)V"
+        "(L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaCallback;L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaCallback;)V"
       );
 
       // Creates a promise object
diff --git a/packages/expo-modules-core/android/src/main/cpp/types/ExpectedType.cpp b/packages/expo-modules-core/android/src/main/cpp/types/ExpectedType.cpp
index 02f549d491..8213cb94f0 100644
--- a/packages/expo-modules-core/android/src/main/cpp/types/ExpectedType.cpp
+++ b/packages/expo-modules-core/android/src/main/cpp/types/ExpectedType.cpp
@@ -59,19 +59,19 @@ std::string ExpectedType::getJClassString(bool allowsPrimitives) {
     return "java/lang/String";
   }
   if (type == CppType::JS_OBJECT) {
-    return "expo/modules/kotlin/jni/JavaScriptObject";
+    return "{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptObject";
   }
   if (type == CppType::JS_VALUE) {
-    return "expo/modules/kotlin/jni/JavaScriptValue";
+    return "{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptValue";
   }
   if (type == CppType::READABLE_ARRAY) {
-    return "com/facebook/react/bridge/ReadableNativeArray";
+    return "{VERSIONED_ABI_NAME}/com/facebook/react/bridge/ReadableNativeArray";
   }
   if (type == CppType::READABLE_MAP) {
-    return "com/facebook/react/bridge/ReadableNativeMap";
+    return "{VERSIONED_ABI_NAME}/com/facebook/react/bridge/ReadableNativeMap";
   }
   if (type == CppType::TYPED_ARRAY) {
-    return "expo/modules/kotlin/jni/JavaScriptTypedArray";
+    return "{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptTypedArray";
   }
   if (type == CppType::PRIMITIVE_ARRAY) {
     auto innerType = this->getFirstType()->getFirstParameterType()->getJClassString(true);
diff --git a/packages/expo-modules-core/android/src/main/cpp/types/ExpectedType.h b/packages/expo-modules-core/android/src/main/cpp/types/ExpectedType.h
index 149e854c6c..5dcce78d7c 100644
--- a/packages/expo-modules-core/android/src/main/cpp/types/ExpectedType.h
+++ b/packages/expo-modules-core/android/src/main/cpp/types/ExpectedType.h
@@ -17,7 +17,7 @@ class ExpectedType;
 class SingleType : public jni::JavaClass<SingleType> {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/SingleType;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/SingleType;";
 
   CppType getCppType();
 
@@ -32,7 +32,7 @@ public:
 class ExpectedType : public jni::JavaClass<ExpectedType> {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/ExpectedType;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/ExpectedType;";
 
   CppType getCombinedTypes();
 
