{"name":"expo-gl","kind":1,"kindString":"Project","originalName":"","children":[{"name":"GLLoggingOption","kind":8,"kindString":"Enumeration","children":[{"name":"ALL","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Enables all other options. It implies `GET_ERRORS` so be aware of the slowdown."},"defaultValue":"15"},{"name":"DISABLED","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Disables logging entirely."},"defaultValue":"0"},{"name":"GET_ERRORS","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Calls `gl.getError()` after each other method call and prints an error if any is returned.\nThis option has a significant impact on the performance as this method is blocking."},"defaultValue":"2"},{"name":"METHOD_CALLS","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Logs method calls, their parameters and results."},"defaultValue":"1"},{"name":"RESOLVE_CONSTANTS","kind":16,"kindString":"Enumeration member","comment":{"shortText":"Resolves parameters of type `number` to their constant names."},"defaultValue":"4"},{"name":"TRUNCATE_STRINGS","kind":16,"kindString":"Enumeration member","comment":{"shortText":"When this option is enabled, long strings will be truncated.\nIt's useful if your shaders are really big and logging them significantly reduces performance."},"defaultValue":"8"}]},{"name":"GLView","kind":128,"kindString":"Class","comment":{"shortText":"A View that acts as an OpenGL ES render target. On mounting, an OpenGL ES context is created.\nIts drawing buffer is presented as the contents of the View every frame."},"children":[{"name":"constructor","kind":512,"kindString":"Constructor","signatures":[{"name":"new GLView","kind":16384,"kindString":"Constructor signature","parameters":[{"name":"props","kind":32768,"kindString":"Parameter","type":{"type":"union","types":[{"type":"reference","name":"GLViewProps"},{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}]}}],"type":{"type":"reference","name":"GLView"},"inheritedFrom":{"type":"reference","name":"React.Component<GLViewProps>.constructor"}},{"name":"new GLView","kind":16384,"kindString":"Constructor signature","comment":{"tags":[{"tag":"deprecated","text":""},{"tag":"see","text":"https://reactjs.org/docs/legacy-context.html\n"}]},"parameters":[{"name":"props","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"GLViewProps"}},{"name":"context","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","name":"GLView"},"inheritedFrom":{"type":"reference","name":"React.Component<GLViewProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.Component<GLViewProps>.constructor"}},{"name":"context","kind":1024,"kindString":"Property","flags":{"isExternal":true},"comment":{"shortText":"If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.","text":"```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n","tags":[{"tag":"see","text":"https://reactjs.org/docs/context.html\n"}]},"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","name":"React.Component.context"}},{"name":"exglCtxId","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"nativeRef","kind":1024,"kindString":"Property","type":{"type":"reference","name":"ComponentOrHandle"},"defaultValue":"null"},{"name":"props","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isReadonly":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"React.Component.props"}},{"name":"refs","kind":1024,"kindString":"Property","flags":{"isExternal":true},"comment":{"tags":[{"tag":"deprecated","text":"\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","indexSignature":{"name":"__index","kind":8192,"kindString":"Index signature","parameters":[{"name":"key","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","qualifiedName":"React.ReactInstance","package":"@types/react","name":"ReactInstance"}}}},"inheritedFrom":{"type":"reference","name":"React.Component.refs"}},{"name":"state","kind":1024,"kindString":"Property","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal"}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"React.Component.state"}},{"name":"NativeView","kind":1024,"kindString":"Property","flags":{"isStatic":true},"type":{"type":"intrinsic","name":"any"}},{"name":"contextType","kind":1024,"kindString":"Property","flags":{"isStatic":true,"isExternal":true,"isOptional":true},"comment":{"shortText":"If set, `this.context` will be set at runtime to the current value of the given Context.","text":"Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n","tags":[{"tag":"see","text":"https://reactjs.org/docs/context.html#classcontexttype\n"}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"React.Context","package":"@types/react","name":"Context"},"inheritedFrom":{"type":"reference","name":"React.Component.contextType"}},{"name":"defaultProps","kind":1024,"kindString":"Property","flags":{"isStatic":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"msaaSamples","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"},"defaultValue":"4"}]}},"defaultValue":"..."},{"name":"getWorkletContext","kind":1024,"kindString":"Property","flags":{"isStatic":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","parameters":[{"name":"contextId","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"number"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","name":"ExpoWebGLRenderingContext"}]}}]}},"defaultValue":"..."},{"name":"UNSAFE_componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.","text":"This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use componentDidMount or the constructor instead"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillMount"}}],"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillMount"}},{"name":"UNSAFE_componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.","text":"Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use static getDerivedStateFromProps instead"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillReceiveProps"}}],"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillReceiveProps"}},{"name":"UNSAFE_componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before rendering when new props or state is received. Not called for the initial render.","text":"Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use getSnapshotBeforeUpdate instead"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillUpdate"}},{"name":"_onSurfaceCreate","kind":2048,"kindString":"Method","signatures":[{"name":"_onSurfaceCreate","kind":4096,"kindString":"Call signature","parameters":[{"name":"__namedParameters","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"SurfaceCreateEvent"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"_setNativeRef","kind":2048,"kindString":"Method","signatures":[{"name":"_setNativeRef","kind":4096,"kindString":"Call signature","parameters":[{"name":"nativeRef","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ComponentOrHandle"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"componentDidCatch","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidCatch","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."},"parameters":[{"name":"error","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}},{"name":"errorInfo","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","qualifiedName":"React.ErrorInfo","package":"@types/react","name":"ErrorInfo"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentDidCatch"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentDidCatch"}},{"name":"componentDidMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately after a component is mounted. Setting state here will trigger re-rendering."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentDidMount"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentDidMount"}},{"name":"componentDidUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately after updating occurs. Not called for the initial render.","text":"The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"},"parameters":[{"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"snapshot","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentDidUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentDidUpdate"}},{"name":"componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.","text":"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use componentDidMount or the constructor instead; will stop working in React 17"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillMount"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillMount"}},{"name":"componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.","text":"Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use static getDerivedStateFromProps instead; will stop working in React 17"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillReceiveProps"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillReceiveProps"}},{"name":"componentWillUnmount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillUnmount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUnmount"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUnmount"}},{"name":"componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before rendering when new props or state is received. Not called for the initial render.","text":"Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUpdate"}},{"name":"createCameraTextureAsync","kind":2048,"kindString":"Method","signatures":[{"name":"createCameraTextureAsync","kind":4096,"kindString":"Call signature","parameters":[{"name":"cameraRefOrHandle","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ComponentOrHandle"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","qualifiedName":"WebGLTexture","package":"typescript","name":"WebGLTexture"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"destroyObjectAsync","kind":2048,"kindString":"Method","signatures":[{"name":"destroyObjectAsync","kind":4096,"kindString":"Call signature","parameters":[{"name":"glObject","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"WebGLObject"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"forceUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true},"signatures":[{"name":"forceUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.forceUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.forceUpdate"}},{"name":"getSnapshotBeforeUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"getSnapshotBeforeUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.","text":"Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"},"parameters":[{"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}}],"type":{"type":"intrinsic","name":"any"},"inheritedFrom":{"type":"reference","name":"React.Component.getSnapshotBeforeUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.getSnapshotBeforeUpdate"}},{"name":"render","kind":2048,"kindString":"Method","signatures":[{"name":"render","kind":4096,"kindString":"Call signature","type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"},"overwrites":{"type":"reference","name":"React.Component.render"}}],"overwrites":{"type":"reference","name":"React.Component.render"}},{"name":"setState","kind":2048,"kindString":"Method","flags":{"isExternal":true},"signatures":[{"name":"setState","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"typeParameter":[{"name":"K","kind":131072,"kindString":"Type parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"state","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","qualifiedName":"K","package":"@types/react","name":"K"}],"qualifiedName":"Pick","package":"typescript","name":"Pick"}]}}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","qualifiedName":"K","package":"@types/react","name":"K"}],"qualifiedName":"Pick","package":"typescript","name":"Pick"}]}},{"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.setState"}}],"inheritedFrom":{"type":"reference","name":"React.Component.setState"}},{"name":"shouldComponentUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"shouldComponentUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called to determine whether the change in props and state should trigger a re-render.","text":"`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"React.Component.shouldComponentUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.shouldComponentUpdate"}},{"name":"startARSessionAsync","kind":2048,"kindString":"Method","signatures":[{"name":"startARSessionAsync","kind":4096,"kindString":"Call signature","type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"takeSnapshotAsync","kind":2048,"kindString":"Method","signatures":[{"name":"takeSnapshotAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Same as static [`takeSnapshotAsync()`](#glviewtakesnapshotasyncgl-options),\nbut uses WebGL context that is associated with the view on which the method is called."},"parameters":[{"name":"options","kind":32768,"kindString":"Parameter","comment":{"shortText":"\n"},"type":{"type":"reference","name":"SnapshotOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLSnapshot"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"createContextAsync","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"createContextAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Imperative API that creates headless context which is devoid of underlying view.\nIt's useful for headless rendering or in case you want to keep just one context per application and share it between multiple components.\nIt is slightly faster than usual context as it doesn't swap framebuffers and doesn't present them on the canvas,\nhowever it may require you to take a snapshot in order to present its results.\nAlso, keep in mind that you need to set up a viewport and create your own framebuffer and texture that you will be drawing to, before you take a snapshot.","returns":"A promise that resolves to WebGL context object. See [WebGL API](#webgl-api) for more details.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ExpoWebGLRenderingContext"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"destroyContextAsync","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"destroyContextAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Destroys given context.","returns":"A promise that resolves to boolean value that is `true` if given context existed and has been destroyed successfully.\n"},"parameters":[{"name":"exgl","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"WebGL context to destroy."},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"ExpoWebGLRenderingContext"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"name":"takeSnapshotAsync","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"takeSnapshotAsync","kind":4096,"kindString":"Call signature","comment":{"shortText":"Takes a snapshot of the framebuffer and saves it as a file to app's cache directory.","returns":"A promise that resolves to `GLSnapshot` object.\n"},"parameters":[{"name":"exgl","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"WebGL context to take a snapshot from."},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"ExpoWebGLRenderingContext"}]}},{"name":"options","kind":32768,"kindString":"Parameter","comment":{},"type":{"type":"reference","name":"SnapshotOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLSnapshot"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"qualifiedName":"React.Component","package":"@types/react","name":"Component"}]},{"name":"ComponentOrHandle","kind":4194304,"kindString":"Type alias","type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"qualifiedName":"React.Component","package":"@types/react","name":"Component"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"React.ComponentClass","package":"@types/react","name":"ComponentClass"}]}},{"name":"ExpoWebGLRenderingContext","kind":4194304,"kindString":"Type alias","type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"WebGL2RenderingContext","package":"typescript","name":"WebGL2RenderingContext"},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"contextId","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"__expoSetLogging","kind":2048,"kindString":"Method","signatures":[{"name":"__expoSetLogging","kind":4096,"kindString":"Call signature","parameters":[{"name":"option","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"GLLoggingOption"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"endFrameEXP","kind":2048,"kindString":"Method","signatures":[{"name":"endFrameEXP","kind":4096,"kindString":"Call signature","type":{"type":"intrinsic","name":"void"}}]},{"name":"flushEXP","kind":2048,"kindString":"Method","signatures":[{"name":"flushEXP","kind":4096,"kindString":"Call signature","type":{"type":"intrinsic","name":"void"}}]}]}}]}},{"name":"GLSnapshot","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"height","kind":1024,"kindString":"Property","comment":{"shortText":"Height of the snapshot."},"type":{"type":"intrinsic","name":"number"}},{"name":"localUri","kind":1024,"kindString":"Property","comment":{"shortText":"Synonym for `uri`. Makes snapshot object compatible with `texImage2D`."},"type":{"type":"intrinsic","name":"string"}},{"name":"uri","kind":1024,"kindString":"Property","comment":{"shortText":"URI to the snapshot."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","qualifiedName":"Blob","package":"typescript","name":"Blob"},{"type":"literal","value":null}]}},{"name":"width","kind":1024,"kindString":"Property","comment":{"shortText":"Width of the snapshot."},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"GLViewProps","kind":4194304,"kindString":"Type alias","type":{"type":"intersection","types":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"msaaSamples","kind":1024,"kindString":"Property","comment":{"shortText":"`GLView` can enable iOS's built-in [multisampling](https://www.khronos.org/registry/OpenGL/extensions/APPLE/APPLE_framebuffer_multisample.txt).\nThis prop specifies the number of samples to use. Setting this to `0` turns off multisampling.","tags":[{"tag":"platform","text":"ios"},{"tag":"default","text":"4\n"}]},"type":{"type":"intrinsic","name":"number"}},{"name":"onContextCreate","kind":2048,"kindString":"Method","signatures":[{"name":"onContextCreate","kind":4096,"kindString":"Call signature","comment":{"shortText":"A function that will be called when the OpenGL ES context is created.\nThe function is passed a single argument `gl` that extends a [WebGLRenderingContext](https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14) interface."},"parameters":[{"name":"gl","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ExpoWebGLRenderingContext"}}],"type":{"type":"intrinsic","name":"void"}}]}]}},{"type":"reference","qualifiedName":"ViewProps","package":"@types/react-native","name":"ViewProps"}]}},{"name":"SnapshotOptions","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"compress","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A value in range `0` to `1.0` specifying compression level of the result image.\n`1.0` means no compression and `0` the highest compression.","tags":[{"tag":"default","text":"1.0\n"}]},"type":{"type":"intrinsic","name":"number"}},{"name":"flip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether to flip the snapshot vertically.","tags":[{"tag":"default","text":"false\n"}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Specifies what type of compression should be used and what is the result file extension.\nPNG compression is lossless but slower, JPEG is faster but the image has visible artifacts.\n> **Note:** When using WebP format, the iOS version will print a warning, and generate a `'png'` file instead.\n> It is recommendable to use platform dependant code in this case. You can refer to the [documentation on platform specific code](/versions/latest/react-native/platform-specific-code).","tags":[{"tag":"default","text":"'jpeg'\n"}]},"type":{"type":"union","types":[{"type":"literal","value":"jpeg"},{"type":"literal","value":"png"},{"type":"literal","value":"webp"}]}},{"name":"framebuffer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Specify the framebuffer that we will be reading from.\nDefaults to underlying framebuffer that is presented in the view or the current framebuffer if context is headless."},"type":{"type":"reference","qualifiedName":"WebGLFramebuffer","package":"typescript","name":"WebGLFramebuffer"}},{"name":"rect","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Rect to crop the snapshot. It's passed directly to `glReadPixels`."},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"height","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"width","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"x","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"y","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}}]}}}]}}},{"name":"SurfaceCreateEvent","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"nativeEvent","kind":1024,"kindString":"Property","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"exglCtxId","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}}]}}}]}}},{"name":"WebGLObject","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"id","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}}]}}}]}