{"name":"expo-router","variant":"project","kind":1,"children":[{"name":"Slot","variant":"reference","kind":4194304},{"name":"SplashScreen","variant":"declaration","kind":4,"children":[{"name":"hideAsync","variant":"declaration","kind":64,"signatures":[{"name":"hideAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hides the native splash screen immediately. Be careful to ensure that your app has content ready\nto display when you hide the splash screen, or you may see a blank screen briefly. See the\n[\"Usage\"](#usage) section for an example."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]},{"name":"preventAutoHideAsync","variant":"declaration","kind":64,"signatures":[{"name":"preventAutoHideAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Makes the native splash screen (configured in "},{"kind":"code","text":"`app.json`"},{"kind":"text","text":") remain visible until "},{"kind":"code","text":"`hideAsync`"},{"kind":"text","text":" is called.\n\n> **Important note**: It is recommended to call this in global scope without awaiting, rather than\n> inside React components or hooks, because otherwise this might be called too late,\n> when the splash screen is already hidden."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nimport * as SplashScreen from 'expo-splash-screen';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n // ...\n}\n```"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]}]},{"name":"ErrorBoundaryProps","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Props passed to a page's "},{"kind":"code","text":"`ErrorBoundary`"},{"kind":"text","text":" export."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"error","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The error that was thrown."}]},"type":{"type":"reference","name":"Error","package":"typescript"}},{"name":"retry","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Retry rendering the component by clearing the "},{"kind":"code","text":"`error`"},{"kind":"text","text":" state."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Retry rendering the component by clearing the "},{"kind":"code","text":"`error`"},{"kind":"text","text":" state."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}}]}}},{"name":"router","variant":"declaration","kind":32,"flags":{"isConst":true},"type":{"type":"reference","name":"ExpoRouter.Router","package":"expo-router"},"defaultValue":"..."},{"name":"ErrorBoundary","variant":"declaration","kind":64,"signatures":[{"name":"ErrorBoundary","variant":"signature","kind":4096,"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"ErrorBoundaryProps","package":"expo-router"}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element"}}]},{"name":"ExpoRoot","variant":"declaration","kind":64,"signatures":[{"name":"ExpoRoot","variant":"signature","kind":4096,"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"ExpoRootProps","package":"expo-router"}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element"}}]},{"name":"Link","variant":"declaration","kind":64,"children":[{"name":"resolveHref","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Helper method to resolve an Href object into a string."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Helper method to resolve an Href object into a string."}]},"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","name":"Href","package":"expo-router","qualifiedName":"ExpoRouter.Href"}}],"type":{"type":"intrinsic","name":"string"}}]}}}],"signatures":[{"name":"Link","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Component to render link to another route using a path.\nUses an anchor tag on the web."}]},"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"LinkProps","package":"expo-router","qualifiedName":"ExpoRouter.LinkProps"}],"name":"PropsWithChildren","package":"@types/react","qualifiedName":"React.PropsWithChildren"}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element"}}]},{"name":"Navigator","variant":"declaration","kind":64,"children":[{"name":"Screen","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Used to configure route settings."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Used to configure route settings."}]},"typeParameter":[{"name":"TOptions","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}],"type":{"type":"literal","value":null}}]}}},{"name":"Slot","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Renders the currently selected content."}]},"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"NavigatorProps","package":"expo-router"},{"type":"literal","value":"children"}],"name":"Omit","package":"typescript"}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element"}}]}}},{"name":"useContext","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"contextKey","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"descriptors","variant":"declaration","kind":1024,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers"},{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"unknown"}]}],"name":"PrivateValueStore","package":"@react-navigation/core"}]},{"type":"literal","value":"getParent"}],"name":"Omit","package":"typescript"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript"},{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}],"name":"Readonly","package":"typescript"}],"name":"EventMapCore","package":"@react-navigation/core"}]}],"name":"EventConsumer","package":"@react-navigation/core"},{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers"},{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript"}]}],"name":"PrivateValueStore","package":"@react-navigation/core"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}],"name":"Record","package":"typescript"}]},{"type":"reference","typeArguments":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers"},{"type":"intrinsic","name":"string"}],"name":"RouteProp","package":"@react-navigation/core"}],"name":"Descriptor","package":"@react-navigation/core"}],"name":"Record","package":"typescript"}},{"name":"navigation","variant":"declaration","kind":1024,"type":{"type":"intersection","types":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers"},{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"unknown"}]}],"name":"PrivateValueStore","package":"@react-navigation/core"},{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript"}],"name":"EventEmitter","package":"@react-navigation/core"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}],"name":"Record","package":"typescript"}]}},{"name":"router","variant":"declaration","kind":1024,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"RouterFactory","package":"@react-navigation/routers"}},{"name":"state","variant":"declaration","kind":1024,"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}],"name":"Readonly","package":"typescript"}}]}}}]}}}],"signatures":[{"name":"Navigator","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"An unstyled custom navigator. Good for basic web layouts"}]},"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"NavigatorProps","package":"expo-router"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element"}]}}]},{"name":"Redirect","variant":"declaration","kind":64,"signatures":[{"name":"Redirect","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Redirects to the href as soon as the component is mounted."}]},"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"href","variant":"declaration","kind":1024,"type":{"type":"reference","name":"Href","package":"expo-router","qualifiedName":"ExpoRouter.Href"}}]}}}],"type":{"type":"literal","value":null}}]},{"name":"Stack","variant":"declaration","kind":64,"children":[{"name":"Screen","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"NativeStackNavigationOptions","package":"@react-navigation/native-stack"},{"type":"reference","typeArguments":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers"}],"name":"StackNavigationState","package":"@react-navigation/routers"},{"type":"reference","name":"NativeStackNavigationEventMap","package":"@react-navigation/native-stack"}],"name":"ScreenProps","package":"expo-router"}}],"type":{"type":"literal","value":null}}]}}}],"signatures":[{"name":"Stack","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"**NOTE**: Exotic components are not callable."}]},"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","name":"StackRouterOptions","package":"@react-navigation/routers"}]},{"type":"union","types":[{"type":"literal","value":"initialRouteName"},{"type":"literal","value":"id"},{"type":"literal","value":"children"},{"type":"literal","value":"screenListeners"},{"type":"literal","value":"screenOptions"}]}],"name":"Omit","package":"typescript"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}]},{"type":"literal","value":"children"}],"name":"Omit","package":"typescript"},{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","name":"StackRouterOptions","package":"@react-navigation/routers"}]},{"type":"union","types":[{"type":"literal","value":"initialRouteName"},{"type":"literal","value":"id"},{"type":"literal","value":"children"},{"type":"literal","value":"screenListeners"},{"type":"literal","value":"screenOptions"}]}],"name":"Omit","package":"typescript"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}]},{"type":"literal","value":"children"}],"name":"Pick","package":"typescript"}],"name":"Partial","package":"typescript"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"RefAttributes","package":"@types/react","qualifiedName":"React.RefAttributes"}]}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor","package":"@types/react","qualifiedName":"React.JSXElementConstructor"}]}],"name":"ReactElement","package":"@types/react","qualifiedName":"React.ReactElement"}]}}]},{"name":"Tabs","variant":"declaration","kind":64,"children":[{"name":"Screen","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","name":"HeaderOptions","package":"@react-navigation/elements"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"href","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Href","package":"expo-router","qualifiedName":"ExpoRouter.Href"}]}}]}}]},{"type":"reference","typeArguments":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers"}],"name":"TabNavigationState","package":"@react-navigation/routers"},{"type":"reference","name":"BottomTabNavigationEventMap","package":"@react-navigation/bottom-tabs"}],"name":"ScreenProps","package":"expo-router"}}],"type":{"type":"literal","value":null}}]}}}],"signatures":[{"name":"Tabs","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"**NOTE**: Exotic components are not callable."}]},"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","name":"BottomTabNavigationConfig","package":"@react-navigation/bottom-tabs"}]},{"type":"union","types":[{"type":"literal","value":"initialRouteName"},{"type":"literal","value":"id"},{"type":"literal","value":"children"},{"type":"literal","value":"screenListeners"},{"type":"literal","value":"screenOptions"}]}],"name":"Omit","package":"typescript"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}]},{"type":"literal","value":"children"}],"name":"Omit","package":"typescript"},{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","name":"BottomTabNavigationConfig","package":"@react-navigation/bottom-tabs"}]},{"type":"union","types":[{"type":"literal","value":"initialRouteName"},{"type":"literal","value":"id"},{"type":"literal","value":"children"},{"type":"literal","value":"screenListeners"},{"type":"literal","value":"screenOptions"}]}],"name":"Omit","package":"typescript"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"DefaultRouterOptions","package":"@react-navigation/routers"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}]},{"type":"literal","value":"children"}],"name":"Pick","package":"typescript"}],"name":"Partial","package":"typescript"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"RefAttributes","package":"@types/react","qualifiedName":"React.RefAttributes"}]}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor","package":"@types/react","qualifiedName":"React.JSXElementConstructor"}]}],"name":"ReactElement","package":"@types/react","qualifiedName":"React.ReactElement"}]}}]},{"name":"Unmatched","variant":"declaration","kind":64,"signatures":[{"name":"Unmatched","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Default screen for unmatched routes."}]},"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element"}}]},{"name":"useFocusEffect","variant":"declaration","kind":64,"signatures":[{"name":"useFocusEffect","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hook to run an effect whenever a route is \"focused\" Similar to "},{"kind":"code","text":"`React.useEffect`"},{"kind":"text","text":".\nThis can be used to perform side-effects such as fetching data or subscribing to events.\nThe passed callback should be wrapped in "},{"kind":"code","text":"`React.useCallback`"},{"kind":"text","text":" to avoid running the effect too often."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useFocusEffect } from 'expo-router';\nimport { useCallback } from 'react';\n\nexport default function Route() {\n useFocusEffect(\n   // Callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n   useCallback(() => {\n     // Invoked whenever the route is focused.\n     console.log('Hello')\n     }, []);\n   );\n return </>;\n}\n```"}]}]},"parameters":[{"name":"effect","variant":"param","kind":32768,"type":{"type":"reference","name":"EffectCallback","package":"expo-router"}},{"name":"do_not_pass_a_second_prop","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"undefined"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"useGlobalSearchParams","variant":"declaration","kind":64,"signatures":[{"name":"useGlobalSearchParams","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the globally selected query parameters, including dynamic path segments. This function will update even when the route is not focused.\nUseful for analytics or other background operations that don't draw to the screen.\n\nWhen querying search params in a stack, opt-towards using ["},{"kind":"code","text":"`useLocalSearchParams`"},{"kind":"text","text":"](#uselocalsearchparams) as these will only\nupdate when the route is focused.\n\nRoute URL example: "},{"kind":"code","text":"`acme://profile/baconbrix?extra=info`"},{"kind":"text","text":".\n\n> **Note:** See [local versus global search parameters](/router/reference/search-parameters/#local-versus-global-search-parameters) for usage\n> information."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useGlobalSearchParams } from 'expo-router';\n\nexport default function Route() {\n\n // user=baconbrix & extra=info\n const { user, extra } = useGlobalSearchParams();\n return <Text>User: {user}</Text>;\n}\n```"}]}]},"typeParameter":[{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"SearchParams","package":"expo-router"},"default":{"type":"reference","name":"SearchParams","package":"expo-router"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TParams","package":"expo-router","refersToTypeParameter":true}],"name":"Partial","package":"typescript"}}]},{"name":"useLocalSearchParams","variant":"declaration","kind":64,"signatures":[{"name":"useLocalSearchParams","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the URL search parameters for the contextually focused route. For example, "},{"kind":"code","text":"`/acme?foo=bar`"},{"kind":"text","text":" -> "},{"kind":"code","text":"`{ foo: \"bar\" }`"},{"kind":"text","text":".\nThis is useful for stacks where you may push a new screen that changes the query parameters.\n\nTo observe updates even when the invoking route is not focused, use ["},{"kind":"code","text":"`useGlobalSearchParams`"},{"kind":"text","text":"](#useglobalsearchparams).\n\nWhen "},{"kind":"code","text":"`/abc/home`"},{"kind":"text","text":" pushes "},{"kind":"code","text":"`/123/shop`"},{"kind":"text","text":", "},{"kind":"code","text":"`useGlobalSearchParams`"},{"kind":"text","text":" returns "},{"kind":"code","text":"`{ first: undefined, second: '123' }`"},{"kind":"text","text":" on "},{"kind":"code","text":"`app/[first]/home.tsx`"},{"kind":"text","text":"\nbecause the global URL has changed.\n\nHowever, you may want the params to remain "},{"kind":"code","text":"`{ first: 'abc' }`"},{"kind":"text","text":" to reflect the context of the screen. In this\ncase, you can use "},{"kind":"code","text":"`useLocalSearchParams`"},{"kind":"text","text":" to ensure the params "},{"kind":"code","text":"`{ first: 'abc' }`"},{"kind":"text","text":" are still returned in "},{"kind":"code","text":"`app/[first]/home.tsx`"},{"kind":"text","text":"\n\n> **Note:** See [local versus global search parameters](/router/reference/search-parameters/#local-versus-global-search-parameters) for usage\n> information.\n\nRoute URL example: "},{"kind":"code","text":"`acme://profile/baconbrix?extra=info`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function Route() {\n const { user, extra } = useLocalSearchParams();\n\n return <Text>User: {user}</Text>;\n}\n```"}]}]},"typeParameter":[{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"SearchParams","package":"expo-router"},"default":{"type":"reference","name":"SearchParams","package":"expo-router"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TParams","package":"expo-router","refersToTypeParameter":true}],"name":"Partial","package":"typescript"}}]},{"name":"useNavigation","variant":"declaration","kind":64,"signatures":[{"name":"useNavigation","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Access the underlying React Navigation ["},{"kind":"code","text":"`navigation`"},{"kind":"text","text":" prop](https://reactnavigation.org/docs/navigation-prop) to imperatively access layout-specific functionality like "},{"kind":"code","text":"`navigation.openDrawer()`"},{"kind":"text","text":" in a Drawer layout."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useNavigation } from 'expo-router';\n\nexport default function Route() {\n // Access the current navigation object for the current route.\n const navigation = useNavigation();\n\n return (\n  <View>\n   <Text onPress={() => {\n     // Open the drawer view.\n     navigation.openDrawer();\n   }}>\n    Open Drawer\n   </Text>\n  </View>\n );\n}\n```"},{"kind":"text","text":"\n\nWhen using nested layouts, you can access higher-order layouts by passing a secondary argument denoting the layout route. For example, "},{"kind":"code","text":"`/menu/_layout.tsx`"},{"kind":"text","text":" is nested inside "},{"kind":"code","text":"`/app/orders/`"},{"kind":"text","text":", you can use "},{"kind":"code","text":"`useNavigation('/orders/menu/')`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx app/orders/menu/index.tsx\nimport { useNavigation } from 'expo-router';\n\nexport default function MenuRoute() {\n\n const rootLayout = useNavigation('/');\n const ordersLayout = useNavigation('/orders');\n\n // Same as the default results of `useNavigation()` when invoked in this route.\n const parentLayout = useNavigation('/orders/menu');\n\n}\n```"},{"kind":"text","text":"\n\nIf you attempt to access a layout that doesn't exist, an error such as "},{"kind":"code","text":"`Could not find parent navigation with route \"/non-existent\"`"},{"kind":"text","text":" is thrown.\n\nSee React Navigation documentation on [navigation dependent functions](https://reactnavigation.org/docs/navigation-prop/#navigator-dependent-functions) for more information."}]},{"tag":"@returns","content":[{"kind":"text","text":"The navigation object for the current route."}]}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072,"default":{"type":"reference","typeArguments":[{"type":"reference","name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList"}],"name":"NavigationProp","package":"@react-navigation/core"}}],"parameters":[{"name":"parent","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Provide an absolute path such as "},{"kind":"code","text":"`/(root)`"},{"kind":"text","text":" to the parent route or a relative path like "},{"kind":"code","text":"`../../`"},{"kind":"text","text":" to the parent route."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}}]},{"name":"useNavigationContainerRef","variant":"declaration","kind":64,"signatures":[{"name":"useNavigationContainerRef","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The root "},{"kind":"code","text":"`<NavigationContainer />`"},{"kind":"text","text":" ref for the app. The "},{"kind":"code","text":"`ref.current`"},{"kind":"text","text":" may be "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the "},{"kind":"code","text":"`<NavigationContainer />`"},{"kind":"text","text":" hasn't mounted yet."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList"}],"name":"NavigationContainerRefWithCurrent","package":"@react-navigation/core"}}]},{"name":"usePathname","variant":"declaration","kind":64,"signatures":[{"name":"usePathname","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Global selected route location without search parameters. For example, "},{"kind":"code","text":"`/acme?foo=bar`"},{"kind":"text","text":" -> "},{"kind":"code","text":"`/acme`"},{"kind":"text","text":". Segments will be normalized: "},{"kind":"code","text":"`/[id]?id=normal`"},{"kind":"text","text":" -> "},{"kind":"code","text":"`/normal`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  // segments = [\"profile\", \"[user]\"]</b>\n  const segments = useSegments();\n\n  return <Text>Hello</Text>;\n\n}\n```"}]}]},"type":{"type":"intrinsic","name":"string"}}]},{"name":"useRootNavigation","variant":"declaration","kind":64,"signatures":[{"name":"useRootNavigation","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Use ["},{"kind":"code","text":"`useNavigationContainerRef`"},{"kind":"text","text":"](#usenavigationcontainerref) instead, which returns a React "},{"kind":"code","text":"`ref`"},{"kind":"text","text":"."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","typeArguments":[{"type":"reference","name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList"}],"name":"NavigationContainerRef","package":"@react-navigation/core"}]}}]},{"name":"useRootNavigationState","variant":"declaration","kind":64,"signatures":[{"name":"useRootNavigationState","variant":"signature","kind":4096,"type":{"type":"reference","name":"ResultState","package":"expo-router"}}]},{"name":"useRouter","variant":"declaration","kind":64,"signatures":[{"name":"useRouter","variant":"signature","kind":4096,"type":{"type":"reference","name":"ExpoRouter.Router","package":"expo-router"}}]},{"name":"useSegments","variant":"declaration","kind":64,"signatures":[{"name":"useSegments","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get a list of selected file segments for the currently selected route. Segments are not normalized, so they will be the same as the file path. For example: "},{"kind":"code","text":"`/[id]?id=normal -> [\"[id]\"]`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  // segments = [\"profile\", \"[user]\"]\n  const segments = useSegments();\n\n  return <Text>Hello</Text>;\n}\n```"},{"kind":"text","text":"\n\n\n"},{"kind":"code","text":"`useSegments`"},{"kind":"text","text":" can be typed using an abstract. Consider the following file structure, and strictly typed "},{"kind":"code","text":"`useSegments`"},{"kind":"text","text":" function:\n\n"},{"kind":"code","text":"```md\n- app\n  - [user]\n    - index.js\n    - followers.js\n  - settings.js\n```"},{"kind":"text","text":"\n\n\nThis can be strictly typed using the following abstract:\n\n"},{"kind":"code","text":"```ts\nconst [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n```"}]}]},"typeParameter":[{"name":"TSegments","variant":"typeParam","kind":131072,"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"reference","name":"TSegments","package":"expo-router","refersToTypeParameter":true}}]},{"name":"withLayoutContext","variant":"declaration","kind":64,"signatures":[{"name":"withLayoutContext","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Return a navigator that automatically injects matched routes and renders nothing when there are no children. Return type with children prop optional"}]},"typeParameter":[{"name":"TOptions","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"object"}},{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ComponentType","package":"@types/react","qualifiedName":"React.ComponentType"}},{"name":"State","variant":"typeParam","kind":131072,"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}],"name":"Readonly","package":"typescript"}},{"name":"EventMap","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"EventMapBase","package":"@react-navigation/core"}}],"parameters":[{"name":"Nav","variant":"param","kind":32768,"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}},{"name":"processor","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"options","variant":"param","kind":32768,"type":{"type":"array","elementType":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"State","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"EventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}}],"type":{"type":"array","elementType":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"State","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"EventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}}]}}}],"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"React.ComponentProps","package":"@types/react"},{"type":"literal","value":"children"}],"name":"PickPartial","package":"expo-router"}],"name":"React.PropsWithoutRef","package":"@types/react"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"React.RefAttributes","package":"@types/react"}]}],"name":"React.ForwardRefExoticComponent","package":"@types/react"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"Screen","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"State","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"EventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}],"type":{"type":"literal","value":null}}]}}}]}}]}}]}],"packageName":"expo-router"}