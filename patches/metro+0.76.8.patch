diff --git a/node_modules/metro/src/DeltaBundler/DeltaCalculator.js b/node_modules/metro/src/DeltaBundler/DeltaCalculator.js
index 655f4ba..4e11105 100644
--- a/node_modules/metro/src/DeltaBundler/DeltaCalculator.js
+++ b/node_modules/metro/src/DeltaBundler/DeltaCalculator.js
@@ -98,6 +98,15 @@ class DeltaCalculator extends EventEmitter {
       this._graph.entryPoints.forEach(markModified);
     }
 
+
+    // this._graph.dependencies.forEach(dep => {
+    //   if (
+    //     dep.output.find(file => file.data.css?.skipCache)
+    //   ) {
+    //     modifiedFiles.add(dep.path);
+    //   }
+    // });
+
     // Concurrent requests should reuse the same bundling process. To do so,
     // this method stores the promise as an instance variable, and then it's
     // removed after it gets resolved.
diff --git a/node_modules/metro/src/DeltaBundler/Graph.js b/node_modules/metro/src/DeltaBundler/Graph.js
index f156ee6..d02ba31 100644
--- a/node_modules/metro/src/DeltaBundler/Graph.js
+++ b/node_modules/metro/src/DeltaBundler/Graph.js
@@ -133,6 +133,17 @@ class Graph {
       deleted: new Set(),
       earlyInverseDependencies: new Map(),
     };
+
+    this.dependencies.forEach(dep => {
+      if (
+        dep.output.find(file => file.data.css?.skipCache) &&
+        !paths.includes(dep.path)
+      ) {
+        dep.unstable_transformResultKey = dep.unstable_transformResultKey + '.'
+        paths.push(dep.path);
+      }
+    });
+
     const internalOptions = getInternalOptions(options);
 
     // Record the paths that are part of the dependency graph before we start
@@ -195,10 +206,11 @@ class Graph {
             //    dependencies. In that case, we immediately discard the module
             //    object.
             // TODO: Refactor for more explicit immutability
-            newModule !== originalModule ||
+
+            (newModule !== originalModule ||
             transfromOutputMayDiffer(newModule, originalModule) ||
             // $FlowFixMe[incompatible-call]
-            !allDependenciesEqual(newModule, originalModule)
+            !allDependenciesEqual(newModule, originalModule))
           ) {
             modified.set(path, newModule);
           }
@@ -307,11 +319,15 @@ class Graph {
         );
       }
     }
+    console.log('nextModule', nextModule, Object.keys(nextModule));
     if (
       previousModule &&
+      
       !transfromOutputMayDiffer(previousModule, nextModule) &&
       !dependenciesRemoved &&
       addDependencyPromises.length === 0 
+      // &&
+      // !nextModule.output.some(output => (output.data.css || {}).skipCache)
     ) {
       // We have not operated on nextModule, so restore previousModule
       // to aid diffing.
